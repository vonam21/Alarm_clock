
BTL_HTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800506c  0800506c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800506c  0800506c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800506c  0800506c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800506c  0800506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005070  08005070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000070  080050e0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  080050e0  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba57  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c12  00000000  00000000  0002bb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  0002d748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a13  00000000  00000000  0002e420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a58  00000000  00000000  0002ee33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb61  00000000  00000000  0004688b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a84b  00000000  00000000  000553ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b48  00000000  00000000  000dfc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e3780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f30 	.word	0x08004f30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004f30 	.word	0x08004f30

0800014c <decToBcd>:

#define DS3231_ADDRESS 0xD0

// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a0e      	ldr	r2, [pc, #56]	; (8000190 <decToBcd+0x44>)
 8000158:	fb82 1203 	smull	r1, r2, r2, r3
 800015c:	1092      	asrs	r2, r2, #2
 800015e:	17db      	asrs	r3, r3, #31
 8000160:	1ad3      	subs	r3, r2, r3
 8000162:	b2db      	uxtb	r3, r3
 8000164:	011b      	lsls	r3, r3, #4
 8000166:	b2d8      	uxtb	r0, r3
 8000168:	687a      	ldr	r2, [r7, #4]
 800016a:	4b09      	ldr	r3, [pc, #36]	; (8000190 <decToBcd+0x44>)
 800016c:	fb83 1302 	smull	r1, r3, r3, r2
 8000170:	1099      	asrs	r1, r3, #2
 8000172:	17d3      	asrs	r3, r2, #31
 8000174:	1ac9      	subs	r1, r1, r3
 8000176:	460b      	mov	r3, r1
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	440b      	add	r3, r1
 800017c:	005b      	lsls	r3, r3, #1
 800017e:	1ad1      	subs	r1, r2, r3
 8000180:	b2cb      	uxtb	r3, r1
 8000182:	4403      	add	r3, r0
 8000184:	b2db      	uxtb	r3, r3
}
 8000186:	4618      	mov	r0, r3
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	66666667 	.word	0x66666667

08000194 <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	091b      	lsrs	r3, r3, #4
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	4613      	mov	r3, r2
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	4413      	add	r3, r2
 80001ac:	005b      	lsls	r3, r3, #1
 80001ae:	461a      	mov	r2, r3
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	f003 030f 	and.w	r3, r3, #15
 80001b6:	4413      	add	r3, r2
}
 80001b8:	4618      	mov	r0, r3
 80001ba:	370c      	adds	r7, #12
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
	...

080001c4 <Set_Time>:
TIME time;

// function to set time

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 80001c4:	b590      	push	{r4, r7, lr}
 80001c6:	b089      	sub	sp, #36	; 0x24
 80001c8:	af04      	add	r7, sp, #16
 80001ca:	4604      	mov	r4, r0
 80001cc:	4608      	mov	r0, r1
 80001ce:	4611      	mov	r1, r2
 80001d0:	461a      	mov	r2, r3
 80001d2:	4623      	mov	r3, r4
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	4603      	mov	r3, r0
 80001d8:	71bb      	strb	r3, [r7, #6]
 80001da:	460b      	mov	r3, r1
 80001dc:	717b      	strb	r3, [r7, #5]
 80001de:	4613      	mov	r3, r2
 80001e0:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f7ff ffb1 	bl	800014c <decToBcd>
 80001ea:	4603      	mov	r3, r0
 80001ec:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f7ff ffab 	bl	800014c <decToBcd>
 80001f6:	4603      	mov	r3, r0
 80001f8:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 80001fa:	797b      	ldrb	r3, [r7, #5]
 80001fc:	4618      	mov	r0, r3
 80001fe:	f7ff ffa5 	bl	800014c <decToBcd>
 8000202:	4603      	mov	r3, r0
 8000204:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 8000206:	793b      	ldrb	r3, [r7, #4]
 8000208:	4618      	mov	r0, r3
 800020a:	f7ff ff9f 	bl	800014c <decToBcd>
 800020e:	4603      	mov	r3, r0
 8000210:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 8000212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000216:	4618      	mov	r0, r3
 8000218:	f7ff ff98 	bl	800014c <decToBcd>
 800021c:	4603      	mov	r3, r0
 800021e:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8000220:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000224:	4618      	mov	r0, r3
 8000226:	f7ff ff91 	bl	800014c <decToBcd>
 800022a:	4603      	mov	r3, r0
 800022c:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 800022e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000232:	4618      	mov	r0, r3
 8000234:	f7ff ff8a 	bl	800014c <decToBcd>
 8000238:	4603      	mov	r3, r0
 800023a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 800023c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000240:	9302      	str	r3, [sp, #8]
 8000242:	2307      	movs	r3, #7
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2301      	movs	r3, #1
 800024e:	2200      	movs	r2, #0
 8000250:	21d0      	movs	r1, #208	; 0xd0
 8000252:	4803      	ldr	r0, [pc, #12]	; (8000260 <Set_Time+0x9c>)
 8000254:	f002 f912 	bl	800247c <HAL_I2C_Mem_Write>
}
 8000258:	bf00      	nop
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	bd90      	pop	{r4, r7, pc}
 8000260:	2000008c 	.word	0x2000008c

08000264 <Get_Time>:

void Get_Time (void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	9302      	str	r3, [sp, #8]
 8000270:	2307      	movs	r3, #7
 8000272:	9301      	str	r3, [sp, #4]
 8000274:	463b      	mov	r3, r7
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2301      	movs	r3, #1
 800027a:	2200      	movs	r2, #0
 800027c:	21d0      	movs	r1, #208	; 0xd0
 800027e:	481f      	ldr	r0, [pc, #124]	; (80002fc <Get_Time+0x98>)
 8000280:	f002 f9f6 	bl	8002670 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000284:	783b      	ldrb	r3, [r7, #0]
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ff84 	bl	8000194 <bcdToDec>
 800028c:	4603      	mov	r3, r0
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <Get_Time+0x9c>)
 8000292:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000294:	787b      	ldrb	r3, [r7, #1]
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff7c 	bl	8000194 <bcdToDec>
 800029c:	4603      	mov	r3, r0
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b17      	ldr	r3, [pc, #92]	; (8000300 <Get_Time+0x9c>)
 80002a2:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 80002a4:	78bb      	ldrb	r3, [r7, #2]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ff74 	bl	8000194 <bcdToDec>
 80002ac:	4603      	mov	r3, r0
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <Get_Time+0x9c>)
 80002b2:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80002b4:	78fb      	ldrb	r3, [r7, #3]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ff6c 	bl	8000194 <bcdToDec>
 80002bc:	4603      	mov	r3, r0
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <Get_Time+0x9c>)
 80002c2:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80002c4:	793b      	ldrb	r3, [r7, #4]
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff64 	bl	8000194 <bcdToDec>
 80002cc:	4603      	mov	r3, r0
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <Get_Time+0x9c>)
 80002d2:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80002d4:	797b      	ldrb	r3, [r7, #5]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff5c 	bl	8000194 <bcdToDec>
 80002dc:	4603      	mov	r3, r0
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <Get_Time+0x9c>)
 80002e2:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff54 	bl	8000194 <bcdToDec>
 80002ec:	4603      	mov	r3, r0
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b03      	ldr	r3, [pc, #12]	; (8000300 <Get_Time+0x9c>)
 80002f2:	719a      	strb	r2, [r3, #6]
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	2000008c 	.word	0x2000008c
 8000300:	20000328 	.word	0x20000328

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f001 fae3 	bl	80018d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 fa01 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f000 fb5b 	bl	80009cc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000316:	f000 fa71 	bl	80007fc <MX_TIM2_Init>
  MX_TIM3_Init();
 800031a:	f000 fabb 	bl	8000894 <MX_TIM3_Init>
  MX_I2C1_Init();
 800031e:	f000 fa3f 	bl	80007a0 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000322:	f000 fb05 	bl	8000930 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000326:	f004 f8ff 	bl	8004528 <lcd_init>
  lcd_clear();
 800032a:	f004 f8c7 	bl	80044bc <lcd_clear>
  HAL_TIM_Base_Stop_IT(&htim2);
 800032e:	48a0      	ldr	r0, [pc, #640]	; (80005b0 <main+0x2ac>)
 8000330:	f003 fcda 	bl	8003ce8 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Stop_IT(&htim3);
 8000334:	489f      	ldr	r0, [pc, #636]	; (80005b4 <main+0x2b0>)
 8000336:	f003 fcd7 	bl	8003ce8 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800033a:	489f      	ldr	r0, [pc, #636]	; (80005b8 <main+0x2b4>)
 800033c:	f003 fc82 	bl	8003c44 <HAL_TIM_Base_Start_IT>
  Set_Time(20, 30, 20, 5, 26, 4, 24);
 8000340:	2318      	movs	r3, #24
 8000342:	9302      	str	r3, [sp, #8]
 8000344:	2304      	movs	r3, #4
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	231a      	movs	r3, #26
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2305      	movs	r3, #5
 800034e:	2214      	movs	r2, #20
 8000350:	211e      	movs	r1, #30
 8000352:	2014      	movs	r0, #20
 8000354:	f7ff ff36 	bl	80001c4 <Set_Time>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // lưu ý khi cách đ�?c dht11 là dùng ngắt ngoài nên sử dụng ngắt ưu tiên cao nhất
	  // trước khi đ�?c dht11 thì g�?i hàm doc_dht11() sau đó delay 10ms và g�?i hàm xy_ly_tick_dht11
		doc_dht11();
 8000358:	f001 f800 	bl	800135c <doc_dht11>
		HAL_Delay(10);
 800035c:	200a      	movs	r0, #10
 800035e:	f001 fb1b 	bl	8001998 <HAL_Delay>
		xu_ly_tick_dht11(tick,data_dht11); // hàm này lấy pointer cho ra data_dht11 là 1 mảng với
 8000362:	4996      	ldr	r1, [pc, #600]	; (80005bc <main+0x2b8>)
 8000364:	4896      	ldr	r0, [pc, #600]	; (80005c0 <main+0x2bc>)
 8000366:	f001 f857 	bl	8001418 <xu_ly_tick_dht11>
		/* tương ứng 	data_dht11[0] là phần nguyên độ ẩm
						data_dht11[0] là phần thập phân độ ẩm
						data_dht11[0] là phần nguyên nhiệt độ
						data_dht11[0] là phần thập phân nhiệt độ
						*/
		Get_Time();
 800036a:	f7ff ff7b 	bl	8000264 <Get_Time>
		sprintf(nhiet_do,"Nhiet do: %d.%doC", data_dht11[2], data_dht11[3]); // hàm này ghép chuỗi thành chuỗi nhiet_do để tiện hiển thị LCD
 800036e:	4b93      	ldr	r3, [pc, #588]	; (80005bc <main+0x2b8>)
 8000370:	789b      	ldrb	r3, [r3, #2]
 8000372:	461a      	mov	r2, r3
 8000374:	4b91      	ldr	r3, [pc, #580]	; (80005bc <main+0x2b8>)
 8000376:	78db      	ldrb	r3, [r3, #3]
 8000378:	4992      	ldr	r1, [pc, #584]	; (80005c4 <main+0x2c0>)
 800037a:	4893      	ldr	r0, [pc, #588]	; (80005c8 <main+0x2c4>)
 800037c:	f004 f926 	bl	80045cc <siprintf>
		sprintf(do_am, "Do am:  %d.%d ", data_dht11[0],data_dht11[1]);		// hàm ghép chuỗi độ ẩm để hiển thị LCD
 8000380:	4b8e      	ldr	r3, [pc, #568]	; (80005bc <main+0x2b8>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	461a      	mov	r2, r3
 8000386:	4b8d      	ldr	r3, [pc, #564]	; (80005bc <main+0x2b8>)
 8000388:	785b      	ldrb	r3, [r3, #1]
 800038a:	4990      	ldr	r1, [pc, #576]	; (80005cc <main+0x2c8>)
 800038c:	4890      	ldr	r0, [pc, #576]	; (80005d0 <main+0x2cc>)
 800038e:	f004 f91d 	bl	80045cc <siprintf>

		bool a = (ngay == ngay_bao_thuc)? 1:0 ;
 8000392:	4b90      	ldr	r3, [pc, #576]	; (80005d4 <main+0x2d0>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	4b90      	ldr	r3, [pc, #576]	; (80005d8 <main+0x2d4>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	429a      	cmp	r2, r3
 800039c:	bf0c      	ite	eq
 800039e:	2301      	moveq	r3, #1
 80003a0:	2300      	movne	r3, #0
 80003a2:	71fb      	strb	r3, [r7, #7]
		bool b = (thang == thang_bao_thuc)? 1:0 ;
 80003a4:	4b8d      	ldr	r3, [pc, #564]	; (80005dc <main+0x2d8>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	4b8d      	ldr	r3, [pc, #564]	; (80005e0 <main+0x2dc>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	bf0c      	ite	eq
 80003b0:	2301      	moveq	r3, #1
 80003b2:	2300      	movne	r3, #0
 80003b4:	71bb      	strb	r3, [r7, #6]
		bool c = (nam == nam_bao_thuc)? 1:0 ;
 80003b6:	4b8b      	ldr	r3, [pc, #556]	; (80005e4 <main+0x2e0>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b8b      	ldr	r3, [pc, #556]	; (80005e8 <main+0x2e4>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	429a      	cmp	r2, r3
 80003c0:	bf0c      	ite	eq
 80003c2:	2301      	moveq	r3, #1
 80003c4:	2300      	movne	r3, #0
 80003c6:	717b      	strb	r3, [r7, #5]
		bool d = (gio == gio_bao_thuc)? 1:0 ;
 80003c8:	4b88      	ldr	r3, [pc, #544]	; (80005ec <main+0x2e8>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b88      	ldr	r3, [pc, #544]	; (80005f0 <main+0x2ec>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	bf0c      	ite	eq
 80003d4:	2301      	moveq	r3, #1
 80003d6:	2300      	movne	r3, #0
 80003d8:	713b      	strb	r3, [r7, #4]
		bool e = (phut == phut_bao_thuc)? 1:0 ;
 80003da:	4b86      	ldr	r3, [pc, #536]	; (80005f4 <main+0x2f0>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b86      	ldr	r3, [pc, #536]	; (80005f8 <main+0x2f4>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	bf0c      	ite	eq
 80003e6:	2301      	moveq	r3, #1
 80003e8:	2300      	movne	r3, #0
 80003ea:	70fb      	strb	r3, [r7, #3]
		bool flag_bat_bao_thuc = a&b&c&d&e;
 80003ec:	79fa      	ldrb	r2, [r7, #7]
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	401a      	ands	r2, r3
 80003f2:	797b      	ldrb	r3, [r7, #5]
 80003f4:	401a      	ands	r2, r3
 80003f6:	793b      	ldrb	r3, [r7, #4]
 80003f8:	401a      	ands	r2, r3
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	4013      	ands	r3, r2
 80003fe:	2b00      	cmp	r3, #0
 8000400:	bf14      	ite	ne
 8000402:	2301      	movne	r3, #1
 8000404:	2300      	moveq	r3, #0
 8000406:	70bb      	strb	r3, [r7, #2]
		if(flag_bat_bao_thuc)
 8000408:	78bb      	ldrb	r3, [r7, #2]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d006      	beq.n	800041c <main+0x118>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000414:	4879      	ldr	r0, [pc, #484]	; (80005fc <main+0x2f8>)
 8000416:	f001 fdbe 	bl	8001f96 <HAL_GPIO_WritePin>
 800041a:	e005      	b.n	8000428 <main+0x124>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000422:	4876      	ldr	r0, [pc, #472]	; (80005fc <main+0x2f8>)
 8000424:	f001 fdb7 	bl	8001f96 <HAL_GPIO_WritePin>
		}
		bool flag_bat_nhiet_do = (data_dht11 >= bao_nhiet_do)? 1:0;
 8000428:	4b75      	ldr	r3, [pc, #468]	; (8000600 <main+0x2fc>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	461a      	mov	r2, r3
 800042e:	4b63      	ldr	r3, [pc, #396]	; (80005bc <main+0x2b8>)
 8000430:	429a      	cmp	r2, r3
 8000432:	bf94      	ite	ls
 8000434:	2301      	movls	r3, #1
 8000436:	2300      	movhi	r3, #0
 8000438:	707b      	strb	r3, [r7, #1]
			// bật báo nhiệt độ
		}
//		if( ngay == ngay_bao_thuc) {
//
//		}
		if(flag_ngat_timer3)
 800043a:	4b72      	ldr	r3, [pc, #456]	; (8000604 <main+0x300>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d08a      	beq.n	8000358 <main+0x54>
		{
			flag_ngat_timer3=0;
 8000442:	4b70      	ldr	r3, [pc, #448]	; (8000604 <main+0x300>)
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
			switch(state_lcd%7) {
 8000448:	4b6f      	ldr	r3, [pc, #444]	; (8000608 <main+0x304>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	4b6f      	ldr	r3, [pc, #444]	; (800060c <main+0x308>)
 800044e:	fb83 1302 	smull	r1, r3, r3, r2
 8000452:	4413      	add	r3, r2
 8000454:	1099      	asrs	r1, r3, #2
 8000456:	17d3      	asrs	r3, r2, #31
 8000458:	1ac9      	subs	r1, r1, r3
 800045a:	460b      	mov	r3, r1
 800045c:	00db      	lsls	r3, r3, #3
 800045e:	1a5b      	subs	r3, r3, r1
 8000460:	1ad1      	subs	r1, r2, r3
 8000462:	2906      	cmp	r1, #6
 8000464:	f63f af78 	bhi.w	8000358 <main+0x54>
 8000468:	a301      	add	r3, pc, #4	; (adr r3, 8000470 <main+0x16c>)
 800046a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800046e:	bf00      	nop
 8000470:	0800048d 	.word	0x0800048d
 8000474:	080004ab 	.word	0x080004ab
 8000478:	08000359 	.word	0x08000359
 800047c:	08000691 	.word	0x08000691
 8000480:	080006a5 	.word	0x080006a5
 8000484:	080006b9 	.word	0x080006b9
 8000488:	080006cd 	.word	0x080006cd
				case 0:
				{
					  lcd_put_cur(0,1);
 800048c:	2101      	movs	r1, #1
 800048e:	2000      	movs	r0, #0
 8000490:	f004 f82b 	bl	80044ea <lcd_put_cur>
					  lcd_send_string(nhiet_do);
 8000494:	484c      	ldr	r0, [pc, #304]	; (80005c8 <main+0x2c4>)
 8000496:	f004 f884 	bl	80045a2 <lcd_send_string>
					  lcd_put_cur(1,1);
 800049a:	2101      	movs	r1, #1
 800049c:	2001      	movs	r0, #1
 800049e:	f004 f824 	bl	80044ea <lcd_put_cur>
					  lcd_send_string(do_am);
 80004a2:	484b      	ldr	r0, [pc, #300]	; (80005d0 <main+0x2cc>)
 80004a4:	f004 f87d 	bl	80045a2 <lcd_send_string>
					  break;
 80004a8:	e11b      	b.n	80006e2 <main+0x3de>
				}
				case 1:
				{

					if(flag_chuyen_lcd)
 80004aa:	4b59      	ldr	r3, [pc, #356]	; (8000610 <main+0x30c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d019      	beq.n	80004e6 <main+0x1e2>
					{
						count_mat_khau=-2;
 80004b2:	4b58      	ldr	r3, [pc, #352]	; (8000614 <main+0x310>)
 80004b4:	f06f 0201 	mvn.w	r2, #1
 80004b8:	601a      	str	r2, [r3, #0]
						count_may_chu_nhap_vao=0;
 80004ba:	4b57      	ldr	r3, [pc, #348]	; (8000618 <main+0x314>)
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
						flag_lan_dau_nhap_mat_khau =1;
 80004c0:	4b56      	ldr	r3, [pc, #344]	; (800061c <main+0x318>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	601a      	str	r2, [r3, #0]
						flag_chuyen_lcd=0;
 80004c6:	4b52      	ldr	r3, [pc, #328]	; (8000610 <main+0x30c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
						lcd_clear();
 80004cc:	f003 fff6 	bl	80044bc <lcd_clear>
						lcd_put_cur(0,1);
 80004d0:	2101      	movs	r1, #1
 80004d2:	2000      	movs	r0, #0
 80004d4:	f004 f809 	bl	80044ea <lcd_put_cur>
						lcd_send_string("Nhap mat khau:");
 80004d8:	4851      	ldr	r0, [pc, #324]	; (8000620 <main+0x31c>)
 80004da:	f004 f862 	bl	80045a2 <lcd_send_string>
						lcd_put_cur(1,0);
 80004de:	2100      	movs	r1, #0
 80004e0:	2001      	movs	r0, #1
 80004e2:	f004 f802 	bl	80044ea <lcd_put_cur>
					}
						count_mat_khau++;
 80004e6:	4b4b      	ldr	r3, [pc, #300]	; (8000614 <main+0x310>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	4a49      	ldr	r2, [pc, #292]	; (8000614 <main+0x310>)
 80004ee:	6013      	str	r3, [r2, #0]
						count_may_chu_nhap_vao++;
 80004f0:	4b49      	ldr	r3, [pc, #292]	; (8000618 <main+0x314>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	3301      	adds	r3, #1
 80004f6:	4a48      	ldr	r2, [pc, #288]	; (8000618 <main+0x314>)
 80004f8:	6013      	str	r3, [r2, #0]
						if((flag_number <= 9) && (flag_number >=0))
 80004fa:	4b4a      	ldr	r3, [pc, #296]	; (8000624 <main+0x320>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b09      	cmp	r3, #9
 8000500:	dc0a      	bgt.n	8000518 <main+0x214>
 8000502:	4b48      	ldr	r3, [pc, #288]	; (8000624 <main+0x320>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	db06      	blt.n	8000518 <main+0x214>
						{
							mat_khau_user[count_mat_khau] = flag_number;
 800050a:	4b46      	ldr	r3, [pc, #280]	; (8000624 <main+0x320>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b41      	ldr	r3, [pc, #260]	; (8000614 <main+0x310>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	b2d1      	uxtb	r1, r2
 8000514:	4a44      	ldr	r2, [pc, #272]	; (8000628 <main+0x324>)
 8000516:	54d1      	strb	r1, [r2, r3]
						}
						  switch(flag_number) {
 8000518:	4b42      	ldr	r3, [pc, #264]	; (8000624 <main+0x320>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b0b      	cmp	r3, #11
 800051e:	f040 80ae 	bne.w	800067e <main+0x37a>
							  case 11:
							  {
								  for(int i=0 ;i < 6 ; i++)
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e013      	b.n	8000550 <main+0x24c>
									{
										if(mat_khau_user[i] != mat_khau_dung[i])
 8000528:	4a3f      	ldr	r2, [pc, #252]	; (8000628 <main+0x324>)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	4413      	add	r3, r2
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	493e      	ldr	r1, [pc, #248]	; (800062c <main+0x328>)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	440b      	add	r3, r1
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	d003      	beq.n	8000544 <main+0x240>
										{
											check_pass_LCD=0;
 800053c:	4b3c      	ldr	r3, [pc, #240]	; (8000630 <main+0x32c>)
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
											break;
 8000542:	e008      	b.n	8000556 <main+0x252>
										}
										check_pass_LCD=1;
 8000544:	4b3a      	ldr	r3, [pc, #232]	; (8000630 <main+0x32c>)
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]
								  for(int i=0 ;i < 6 ; i++)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3301      	adds	r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2b05      	cmp	r3, #5
 8000554:	dde8      	ble.n	8000528 <main+0x224>
									}
									for(int i=0;i<6;i++)
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	e007      	b.n	800056c <main+0x268>
									{
										mat_khau_user[i] =0;
 800055c:	4a32      	ldr	r2, [pc, #200]	; (8000628 <main+0x324>)
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	4413      	add	r3, r2
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
									for(int i=0;i<6;i++)
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	3301      	adds	r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	2b05      	cmp	r3, #5
 8000570:	ddf4      	ble.n	800055c <main+0x258>
									}
									if(check_pass_LCD) {
 8000572:	4b2f      	ldr	r3, [pc, #188]	; (8000630 <main+0x32c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d060      	beq.n	800063c <main+0x338>
										state_lcd =2;
 800057a:	4b23      	ldr	r3, [pc, #140]	; (8000608 <main+0x304>)
 800057c:	2202      	movs	r2, #2
 800057e:	601a      	str	r2, [r3, #0]
										flag_ngat_timer3=1;
 8000580:	4b20      	ldr	r3, [pc, #128]	; (8000604 <main+0x300>)
 8000582:	2201      	movs	r2, #1
 8000584:	601a      	str	r2, [r3, #0]
										lcd_clear();
 8000586:	f003 ff99 	bl	80044bc <lcd_clear>
										lcd_put_cur(0,1);
 800058a:	2101      	movs	r1, #1
 800058c:	2000      	movs	r0, #0
 800058e:	f003 ffac 	bl	80044ea <lcd_put_cur>
										lcd_send_string("Mat khau dung ->>");
 8000592:	4828      	ldr	r0, [pc, #160]	; (8000634 <main+0x330>)
 8000594:	f004 f805 	bl	80045a2 <lcd_send_string>
										flag_di_qua_nhap_mat_khau=1;
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <main+0x334>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
										HAL_Delay(2000);
 800059e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005a2:	f001 f9f9 	bl	8001998 <HAL_Delay>
										flag_number=0;
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <main+0x320>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
										lcd_put_cur(1,1);
										lcd_send_string("Moi nhap lai  ");
										HAL_Delay(2000);
										flag_number=0;
									}
								  break;
 80005ac:	e06f      	b.n	800068e <main+0x38a>
 80005ae:	bf00      	nop
 80005b0:	200000e0 	.word	0x200000e0
 80005b4:	20000128 	.word	0x20000128
 80005b8:	20000170 	.word	0x20000170
 80005bc:	2000021c 	.word	0x2000021c
 80005c0:	200001b8 	.word	0x200001b8
 80005c4:	08004f48 	.word	0x08004f48
 80005c8:	20000288 	.word	0x20000288
 80005cc:	08004f5c 	.word	0x08004f5c
 80005d0:	2000029c 	.word	0x2000029c
 80005d4:	200002d4 	.word	0x200002d4
 80005d8:	200002d8 	.word	0x200002d8
 80005dc:	200002dc 	.word	0x200002dc
 80005e0:	200002e0 	.word	0x200002e0
 80005e4:	200002e4 	.word	0x200002e4
 80005e8:	200002e8 	.word	0x200002e8
 80005ec:	200002ec 	.word	0x200002ec
 80005f0:	200002f0 	.word	0x200002f0
 80005f4:	200002f4 	.word	0x200002f4
 80005f8:	200002f8 	.word	0x200002f8
 80005fc:	40010800 	.word	0x40010800
 8000600:	200002fc 	.word	0x200002fc
 8000604:	20000004 	.word	0x20000004
 8000608:	200002b0 	.word	0x200002b0
 800060c:	92492493 	.word	0x92492493
 8000610:	200002cc 	.word	0x200002cc
 8000614:	200002c0 	.word	0x200002c0
 8000618:	200002c4 	.word	0x200002c4
 800061c:	200002d0 	.word	0x200002d0
 8000620:	08004f6c 	.word	0x08004f6c
 8000624:	20000238 	.word	0x20000238
 8000628:	200002b4 	.word	0x200002b4
 800062c:	20000008 	.word	0x20000008
 8000630:	200002bc 	.word	0x200002bc
 8000634:	08004f7c 	.word	0x08004f7c
 8000638:	200002c8 	.word	0x200002c8
										state_lcd =1;
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <main+0x3e0>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
										flag_chuyen_lcd=1;
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <main+0x3e4>)
 8000644:	2201      	movs	r2, #1
 8000646:	601a      	str	r2, [r3, #0]
										flag_ngat_timer3=1;
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <main+0x3e8>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]
										lcd_clear();
 800064e:	f003 ff35 	bl	80044bc <lcd_clear>
										lcd_put_cur(0,1);
 8000652:	2101      	movs	r1, #1
 8000654:	2000      	movs	r0, #0
 8000656:	f003 ff48 	bl	80044ea <lcd_put_cur>
										lcd_send_string("Mat khau sai ");
 800065a:	4825      	ldr	r0, [pc, #148]	; (80006f0 <main+0x3ec>)
 800065c:	f003 ffa1 	bl	80045a2 <lcd_send_string>
										lcd_put_cur(1,1);
 8000660:	2101      	movs	r1, #1
 8000662:	2001      	movs	r0, #1
 8000664:	f003 ff41 	bl	80044ea <lcd_put_cur>
										lcd_send_string("Moi nhap lai  ");
 8000668:	4822      	ldr	r0, [pc, #136]	; (80006f4 <main+0x3f0>)
 800066a:	f003 ff9a 	bl	80045a2 <lcd_send_string>
										HAL_Delay(2000);
 800066e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000672:	f001 f991 	bl	8001998 <HAL_Delay>
										flag_number=0;
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <main+0x3f4>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
								  break;
 800067c:	e007      	b.n	800068e <main+0x38a>
							  }
							  default :
							  {
								  if(count_mat_khau <0)
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <main+0x3f8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	db02      	blt.n	800068c <main+0x388>
								  {

								  } else {

								  lcd_send_string("*");
 8000686:	481e      	ldr	r0, [pc, #120]	; (8000700 <main+0x3fc>)
 8000688:	f003 ff8b 	bl	80045a2 <lcd_send_string>
								  }
								  break;
 800068c:	bf00      	nop
							  }
						  }
					  break;
 800068e:	e028      	b.n	80006e2 <main+0x3de>
				}

				case 3:
				{
					  lcd_clear();
 8000690:	f003 ff14 	bl	80044bc <lcd_clear>
					  lcd_put_cur(0,1);
 8000694:	2101      	movs	r1, #1
 8000696:	2000      	movs	r0, #0
 8000698:	f003 ff27 	bl	80044ea <lcd_put_cur>
					  lcd_send_string("set ngay");
 800069c:	4819      	ldr	r0, [pc, #100]	; (8000704 <main+0x400>)
 800069e:	f003 ff80 	bl	80045a2 <lcd_send_string>
					  break;
 80006a2:	e01e      	b.n	80006e2 <main+0x3de>
				}
				case 4:
				{
					lcd_clear();
 80006a4:	f003 ff0a 	bl	80044bc <lcd_clear>
					  lcd_put_cur(0,1);
 80006a8:	2101      	movs	r1, #1
 80006aa:	2000      	movs	r0, #0
 80006ac:	f003 ff1d 	bl	80044ea <lcd_put_cur>
					  lcd_send_string("set gio");
 80006b0:	4815      	ldr	r0, [pc, #84]	; (8000708 <main+0x404>)
 80006b2:	f003 ff76 	bl	80045a2 <lcd_send_string>
					  break;
 80006b6:	e014      	b.n	80006e2 <main+0x3de>
				}
				case 5:
				{
					lcd_clear();
 80006b8:	f003 ff00 	bl	80044bc <lcd_clear>
					  lcd_put_cur(0,1);
 80006bc:	2101      	movs	r1, #1
 80006be:	2000      	movs	r0, #0
 80006c0:	f003 ff13 	bl	80044ea <lcd_put_cur>
					  lcd_send_string("cai bao thuc");
 80006c4:	4811      	ldr	r0, [pc, #68]	; (800070c <main+0x408>)
 80006c6:	f003 ff6c 	bl	80045a2 <lcd_send_string>
					  break;
 80006ca:	e00a      	b.n	80006e2 <main+0x3de>
				}
				case 6:
				{
					lcd_clear();
 80006cc:	f003 fef6 	bl	80044bc <lcd_clear>
					  lcd_put_cur(0,1);
 80006d0:	2101      	movs	r1, #1
 80006d2:	2000      	movs	r0, #0
 80006d4:	f003 ff09 	bl	80044ea <lcd_put_cur>
					  lcd_send_string("cai bao nhiet do");
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <main+0x40c>)
 80006da:	f003 ff62 	bl	80045a2 <lcd_send_string>
					  break;
 80006de:	bf00      	nop
 80006e0:	e63a      	b.n	8000358 <main+0x54>
  {
 80006e2:	e639      	b.n	8000358 <main+0x54>
 80006e4:	200002b0 	.word	0x200002b0
 80006e8:	200002cc 	.word	0x200002cc
 80006ec:	20000004 	.word	0x20000004
 80006f0:	08004f90 	.word	0x08004f90
 80006f4:	08004fa0 	.word	0x08004fa0
 80006f8:	20000238 	.word	0x20000238
 80006fc:	200002c0 	.word	0x200002c0
 8000700:	08004fb0 	.word	0x08004fb0
 8000704:	08004fb4 	.word	0x08004fb4
 8000708:	08004fc0 	.word	0x08004fc0
 800070c:	08004fc8 	.word	0x08004fc8
 8000710:	08004fd8 	.word	0x08004fd8

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b090      	sub	sp, #64	; 0x40
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	2228      	movs	r2, #40	; 0x28
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 ff72 	bl	800460c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000736:	2301      	movs	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000752:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fe25 	bl	80033ac <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000768:	f000 ff28 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2102      	movs	r1, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f003 f892 	bl	80038b0 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000792:	f000 ff13 	bl	80015bc <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3740      	adds	r7, #64	; 0x40
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007a6:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <MX_I2C1_Init+0x54>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007ac:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x58>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007de:	f001 fc0b 	bl	8001ff8 <HAL_I2C_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e8:	f000 fee8 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000008c 	.word	0x2000008c
 80007f4:	40005400 	.word	0x40005400
 80007f8:	000186a0 	.word	0x000186a0

080007fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_TIM2_Init+0x94>)
 800081a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_TIM2_Init+0x94>)
 8000822:	223f      	movs	r2, #63	; 0x3f
 8000824:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_TIM2_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_TIM2_Init+0x94>)
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_TIM2_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_TIM2_Init+0x94>)
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000840:	4813      	ldr	r0, [pc, #76]	; (8000890 <MX_TIM2_Init+0x94>)
 8000842:	f003 f9af 	bl	8003ba4 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800084c:	f000 feb6 	bl	80015bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4619      	mov	r1, r3
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <MX_TIM2_Init+0x94>)
 800085e:	f003 fb79 	bl	8003f54 <HAL_TIM_ConfigClockSource>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 fea8 	bl	80015bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_TIM2_Init+0x94>)
 800087a:	f003 fd4f 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000884:	f000 fe9a 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200000e0 	.word	0x200000e0

08000894 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_TIM3_Init+0x94>)
 80008b2:	4a1e      	ldr	r2, [pc, #120]	; (800092c <MX_TIM3_Init+0x98>)
 80008b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_TIM3_Init+0x94>)
 80008b8:	223f      	movs	r2, #63	; 0x3f
 80008ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_TIM3_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_TIM3_Init+0x94>)
 80008c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_TIM3_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_TIM3_Init+0x94>)
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008d6:	4814      	ldr	r0, [pc, #80]	; (8000928 <MX_TIM3_Init+0x94>)
 80008d8:	f003 f964 	bl	8003ba4 <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 fe6b 	bl	80015bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_TIM3_Init+0x94>)
 80008f4:	f003 fb2e 	bl	8003f54 <HAL_TIM_ConfigClockSource>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 fe5d 	bl	80015bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <MX_TIM3_Init+0x94>)
 8000910:	f003 fd04 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800091a:	f000 fe4f 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000128 	.word	0x20000128
 800092c:	40000400 	.word	0x40000400

08000930 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_TIM4_Init+0x94>)
 800094e:	4a1e      	ldr	r2, [pc, #120]	; (80009c8 <MX_TIM4_Init+0x98>)
 8000950:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63000;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_TIM4_Init+0x94>)
 8000954:	f24f 6218 	movw	r2, #63000	; 0xf618
 8000958:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_TIM4_Init+0x94>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_TIM4_Init+0x94>)
 8000962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000966:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_TIM4_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_TIM4_Init+0x94>)
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000974:	4813      	ldr	r0, [pc, #76]	; (80009c4 <MX_TIM4_Init+0x94>)
 8000976:	f003 f915 	bl	8003ba4 <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000980:	f000 fe1c 	bl	80015bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	4619      	mov	r1, r3
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_TIM4_Init+0x94>)
 8000992:	f003 fadf 	bl	8003f54 <HAL_TIM_ConfigClockSource>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800099c:	f000 fe0e 	bl	80015bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_TIM4_Init+0x94>)
 80009ae:	f003 fcb5 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80009b8:	f000 fe00 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000170 	.word	0x20000170
 80009c8:	40000800 	.word	0x40000800

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e0:	4b42      	ldr	r3, [pc, #264]	; (8000aec <MX_GPIO_Init+0x120>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a41      	ldr	r2, [pc, #260]	; (8000aec <MX_GPIO_Init+0x120>)
 80009e6:	f043 0320 	orr.w	r3, r3, #32
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <MX_GPIO_Init+0x120>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0320 	and.w	r3, r3, #32
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <MX_GPIO_Init+0x120>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a3b      	ldr	r2, [pc, #236]	; (8000aec <MX_GPIO_Init+0x120>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b39      	ldr	r3, [pc, #228]	; (8000aec <MX_GPIO_Init+0x120>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <MX_GPIO_Init+0x120>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a35      	ldr	r2, [pc, #212]	; (8000aec <MX_GPIO_Init+0x120>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b33      	ldr	r3, [pc, #204]	; (8000aec <MX_GPIO_Init+0x120>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f240 7101 	movw	r1, #1793	; 0x701
 8000a2e:	4830      	ldr	r0, [pc, #192]	; (8000af0 <MX_GPIO_Init+0x124>)
 8000a30:	f001 fab1 	bl	8001f96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	482e      	ldr	r0, [pc, #184]	; (8000af4 <MX_GPIO_Init+0x128>)
 8000a3c:	f001 faab 	bl	8001f96 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a40:	233e      	movs	r3, #62	; 0x3e
 8000a42:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <MX_GPIO_Init+0x12c>)
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	4619      	mov	r1, r3
 8000a52:	4828      	ldr	r0, [pc, #160]	; (8000af4 <MX_GPIO_Init+0x128>)
 8000a54:	f001 f904 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
 8000a58:	f240 7301 	movw	r3, #1793	; 0x701
 8000a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481f      	ldr	r0, [pc, #124]	; (8000af0 <MX_GPIO_Init+0x124>)
 8000a72:	f001 f8f5 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4819      	ldr	r0, [pc, #100]	; (8000af4 <MX_GPIO_Init+0x128>)
 8000a90:	f001 f8e6 	bl	8001c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 4, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2104      	movs	r1, #4
 8000a98:	2007      	movs	r0, #7
 8000a9a:	f001 f89c 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a9e:	2007      	movs	r0, #7
 8000aa0:	f001 f8b5 	bl	8001c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 11, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	210b      	movs	r1, #11
 8000aa8:	2008      	movs	r0, #8
 8000aaa:	f001 f894 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000aae:	2008      	movs	r0, #8
 8000ab0:	f001 f8ad 	bl	8001c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 11, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	210b      	movs	r1, #11
 8000ab8:	2009      	movs	r0, #9
 8000aba:	f001 f88c 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000abe:	2009      	movs	r0, #9
 8000ac0:	f001 f8a5 	bl	8001c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 11, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	210b      	movs	r1, #11
 8000ac8:	200a      	movs	r0, #10
 8000aca:	f001 f884 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f001 f89d 	bl	8001c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 11, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	210b      	movs	r1, #11
 8000ad8:	2017      	movs	r0, #23
 8000ada:	f001 f87c 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ade:	2017      	movs	r0, #23
 8000ae0:	f001 f895 	bl	8001c0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	40010800 	.word	0x40010800
 8000af8:	10310000 	.word	0x10310000

08000afc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	f040 80d9 	bne.w	8000cc0 <HAL_GPIO_EXTI_Callback+0x1c4>
	{
		currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8000b0e:	f000 ff39 	bl	8001984 <HAL_GetTick>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4ab7      	ldr	r2, [pc, #732]	; (8000df4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000b16:	6013      	str	r3, [r2, #0]
		if ((currentTime - lastDebounceTime) > debounceDelay)
 8000b18:	4bb6      	ldr	r3, [pc, #728]	; (8000df4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4bb6      	ldr	r3, [pc, #728]	; (8000df8 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	1ad2      	subs	r2, r2, r3
 8000b22:	4bb6      	ldr	r3, [pc, #728]	; (8000dfc <HAL_GPIO_EXTI_Callback+0x300>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	f240 80ca 	bls.w	8000cc0 <HAL_GPIO_EXTI_Callback+0x1c4>
		{
			// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	48b4      	ldr	r0, [pc, #720]	; (8000e00 <HAL_GPIO_EXTI_Callback+0x304>)
 8000b30:	f001 fa1a 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 80be 	bne.w	8000cb8 <HAL_GPIO_EXTI_Callback+0x1bc>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b42:	48b0      	ldr	r0, [pc, #704]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000b44:	f001 fa27 	bl	8001f96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4e:	48ad      	ldr	r0, [pc, #692]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000b50:	f001 fa21 	bl	8001f96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5a:	48aa      	ldr	r0, [pc, #680]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000b5c:	f001 fa1b 	bl	8001f96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2101      	movs	r1, #1
 8000b64:	48a7      	ldr	r0, [pc, #668]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000b66:	f001 fa16 	bl	8001f96 <HAL_GPIO_WritePin>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	48a4      	ldr	r0, [pc, #656]	; (8000e00 <HAL_GPIO_EXTI_Callback+0x304>)
 8000b6e:	f001 f9fb 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10b      	bne.n	8000b90 <HAL_GPIO_EXTI_Callback+0x94>
				{
					num1++;
 8000b78:	4ba3      	ldr	r3, [pc, #652]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	4aa2      	ldr	r2, [pc, #648]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000b80:	6013      	str	r3, [r2, #0]
					flag_number=1;
 8000b82:	4ba2      	ldr	r3, [pc, #648]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x310>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim3);
 8000b88:	48a1      	ldr	r0, [pc, #644]	; (8000e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8000b8a:	f003 f85b 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8000b8e:	e07c      	b.n	8000c8a <HAL_GPIO_EXTI_Callback+0x18e>
				} else {
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b96:	489b      	ldr	r0, [pc, #620]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000b98:	f001 f9fd 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba2:	4898      	ldr	r0, [pc, #608]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000ba4:	f001 f9f7 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bae:	4895      	ldr	r0, [pc, #596]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000bb0:	f001 f9f1 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4892      	ldr	r0, [pc, #584]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000bba:	f001 f9ec 	bl	8001f96 <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	488f      	ldr	r0, [pc, #572]	; (8000e00 <HAL_GPIO_EXTI_Callback+0x304>)
 8000bc2:	f001 f9d1 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10b      	bne.n	8000be4 <HAL_GPIO_EXTI_Callback+0xe8>
					{
						num2++;
 8000bcc:	4b91      	ldr	r3, [pc, #580]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4a90      	ldr	r2, [pc, #576]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8000bd4:	6013      	str	r3, [r2, #0]
						flag_number=2;
 8000bd6:	4b8d      	ldr	r3, [pc, #564]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x310>)
 8000bd8:	2202      	movs	r2, #2
 8000bda:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim3);
 8000bdc:	488c      	ldr	r0, [pc, #560]	; (8000e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8000bde:	f003 f831 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8000be2:	e052      	b.n	8000c8a <HAL_GPIO_EXTI_Callback+0x18e>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bea:	4886      	ldr	r0, [pc, #536]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000bec:	f001 f9d3 	bl	8001f96 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf6:	4883      	ldr	r0, [pc, #524]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000bf8:	f001 f9cd 	bl	8001f96 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c02:	4880      	ldr	r0, [pc, #512]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c04:	f001 f9c7 	bl	8001f96 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	487d      	ldr	r0, [pc, #500]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c0e:	f001 f9c2 	bl	8001f96 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8000c12:	2104      	movs	r1, #4
 8000c14:	487a      	ldr	r0, [pc, #488]	; (8000e00 <HAL_GPIO_EXTI_Callback+0x304>)
 8000c16:	f001 f9a7 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10b      	bne.n	8000c38 <HAL_GPIO_EXTI_Callback+0x13c>
						{
							num3++;
 8000c20:	4b7d      	ldr	r3, [pc, #500]	; (8000e18 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	4a7c      	ldr	r2, [pc, #496]	; (8000e18 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000c28:	6013      	str	r3, [r2, #0]
							flag_number=3;
 8000c2a:	4b78      	ldr	r3, [pc, #480]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x310>)
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 8000c30:	4877      	ldr	r0, [pc, #476]	; (8000e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8000c32:	f003 f807 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8000c36:	e028      	b.n	8000c8a <HAL_GPIO_EXTI_Callback+0x18e>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3e:	4871      	ldr	r0, [pc, #452]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c40:	f001 f9a9 	bl	8001f96 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c4a:	486e      	ldr	r0, [pc, #440]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c4c:	f001 f9a3 	bl	8001f96 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c56:	486b      	ldr	r0, [pc, #428]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c58:	f001 f99d 	bl	8001f96 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4868      	ldr	r0, [pc, #416]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c62:	f001 f998 	bl	8001f96 <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8000c66:	2104      	movs	r1, #4
 8000c68:	4865      	ldr	r0, [pc, #404]	; (8000e00 <HAL_GPIO_EXTI_Callback+0x304>)
 8000c6a:	f001 f97d 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d10a      	bne.n	8000c8a <HAL_GPIO_EXTI_Callback+0x18e>
							{

									led++;
 8000c74:	4b69      	ldr	r3, [pc, #420]	; (8000e1c <HAL_GPIO_EXTI_Callback+0x320>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a68      	ldr	r2, [pc, #416]	; (8000e1c <HAL_GPIO_EXTI_Callback+0x320>)
 8000c7c:	6013      	str	r3, [r2, #0]
									flag_number=10;
 8000c7e:	4b63      	ldr	r3, [pc, #396]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x310>)
 8000c80:	220a      	movs	r2, #10
 8000c82:	601a      	str	r2, [r3, #0]
									HAL_TIM_Base_Start_IT(&htim3);
 8000c84:	4862      	ldr	r0, [pc, #392]	; (8000e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8000c86:	f002 ffdd 	bl	8003c44 <HAL_TIM_Base_Start_IT>
							}
						}
					}
				}

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c90:	485c      	ldr	r0, [pc, #368]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c92:	f001 f980 	bl	8001f96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c9c:	4859      	ldr	r0, [pc, #356]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c9e:	f001 f97a 	bl	8001f96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca8:	4856      	ldr	r0, [pc, #344]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000caa:	f001 f974 	bl	8001f96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4854      	ldr	r0, [pc, #336]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000cb4:	f001 f96f 	bl	8001f96 <HAL_GPIO_WritePin>
			}

			lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8000cb8:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a4e      	ldr	r2, [pc, #312]	; (8000df8 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000cbe:	6013      	str	r3, [r2, #0]
		}
	}


	if(GPIO_Pin == GPIO_PIN_3)
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	2b08      	cmp	r3, #8
 8000cc4:	f040 80f6 	bne.w	8000eb4 <HAL_GPIO_EXTI_Callback+0x3b8>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8000cc8:	f000 fe5c 	bl	8001984 <HAL_GetTick>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a49      	ldr	r2, [pc, #292]	; (8000df4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000cd0:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 8000cd2:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b48      	ldr	r3, [pc, #288]	; (8000df8 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	1ad2      	subs	r2, r2, r3
 8000cdc:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <HAL_GPIO_EXTI_Callback+0x300>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <HAL_GPIO_EXTI_Callback+0x3b8>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	4845      	ldr	r0, [pc, #276]	; (8000e00 <HAL_GPIO_EXTI_Callback+0x304>)
 8000cea:	f001 f93d 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f040 80db 	bne.w	8000eac <HAL_GPIO_EXTI_Callback+0x3b0>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfc:	4841      	ldr	r0, [pc, #260]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000cfe:	f001 f94a 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d08:	483e      	ldr	r0, [pc, #248]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000d0a:	f001 f944 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d14:	483b      	ldr	r0, [pc, #236]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000d16:	f001 f93e 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4839      	ldr	r0, [pc, #228]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000d20:	f001 f939 	bl	8001f96 <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 8000d24:	2108      	movs	r1, #8
 8000d26:	4836      	ldr	r0, [pc, #216]	; (8000e00 <HAL_GPIO_EXTI_Callback+0x304>)
 8000d28:	f001 f91e 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10b      	bne.n	8000d4a <HAL_GPIO_EXTI_Callback+0x24e>
					{
						num4++;
 8000d32:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <HAL_GPIO_EXTI_Callback+0x324>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	4a39      	ldr	r2, [pc, #228]	; (8000e20 <HAL_GPIO_EXTI_Callback+0x324>)
 8000d3a:	6013      	str	r3, [r2, #0]
						flag_number=4;
 8000d3c:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x310>)
 8000d3e:	2204      	movs	r2, #4
 8000d40:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim3);
 8000d42:	4833      	ldr	r0, [pc, #204]	; (8000e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8000d44:	f002 ff7e 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8000d48:	e099      	b.n	8000e7e <HAL_GPIO_EXTI_Callback+0x382>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d50:	482c      	ldr	r0, [pc, #176]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000d52:	f001 f920 	bl	8001f96 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5c:	4829      	ldr	r0, [pc, #164]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000d5e:	f001 f91a 	bl	8001f96 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d68:	4826      	ldr	r0, [pc, #152]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000d6a:	f001 f914 	bl	8001f96 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2101      	movs	r1, #1
 8000d72:	4824      	ldr	r0, [pc, #144]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000d74:	f001 f90f 	bl	8001f96 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 8000d78:	2108      	movs	r1, #8
 8000d7a:	4821      	ldr	r0, [pc, #132]	; (8000e00 <HAL_GPIO_EXTI_Callback+0x304>)
 8000d7c:	f001 f8f4 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10b      	bne.n	8000d9e <HAL_GPIO_EXTI_Callback+0x2a2>
						{
							num5++;
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	4a25      	ldr	r2, [pc, #148]	; (8000e24 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d8e:	6013      	str	r3, [r2, #0]
							flag_number=5;
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x310>)
 8000d92:	2205      	movs	r2, #5
 8000d94:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 8000d96:	481e      	ldr	r0, [pc, #120]	; (8000e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8000d98:	f002 ff54 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8000d9c:	e06f      	b.n	8000e7e <HAL_GPIO_EXTI_Callback+0x382>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da4:	4817      	ldr	r0, [pc, #92]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000da6:	f001 f8f6 	bl	8001f96 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db0:	4814      	ldr	r0, [pc, #80]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000db2:	f001 f8f0 	bl	8001f96 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dbc:	4811      	ldr	r0, [pc, #68]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000dbe:	f001 f8ea 	bl	8001f96 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	480f      	ldr	r0, [pc, #60]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8000dc8:	f001 f8e5 	bl	8001f96 <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 8000dcc:	2108      	movs	r1, #8
 8000dce:	480c      	ldr	r0, [pc, #48]	; (8000e00 <HAL_GPIO_EXTI_Callback+0x304>)
 8000dd0:	f001 f8ca 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d128      	bne.n	8000e2c <HAL_GPIO_EXTI_Callback+0x330>
							{
								num6++;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000de2:	6013      	str	r3, [r2, #0]
								flag_number=6;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x310>)
 8000de6:	2206      	movs	r2, #6
 8000de8:	601a      	str	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000dea:	4809      	ldr	r0, [pc, #36]	; (8000e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8000dec:	f002 ff2a 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8000df0:	e045      	b.n	8000e7e <HAL_GPIO_EXTI_Callback+0x382>
 8000df2:	bf00      	nop
 8000df4:	20000234 	.word	0x20000234
 8000df8:	20000230 	.word	0x20000230
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	40010800 	.word	0x40010800
 8000e04:	40010c00 	.word	0x40010c00
 8000e08:	2000023c 	.word	0x2000023c
 8000e0c:	20000238 	.word	0x20000238
 8000e10:	20000128 	.word	0x20000128
 8000e14:	20000240 	.word	0x20000240
 8000e18:	20000244 	.word	0x20000244
 8000e1c:	2000026c 	.word	0x2000026c
 8000e20:	20000248 	.word	0x20000248
 8000e24:	2000024c 	.word	0x2000024c
 8000e28:	20000250 	.word	0x20000250
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e32:	48b5      	ldr	r0, [pc, #724]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000e34:	f001 f8af 	bl	8001f96 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e3e:	48b2      	ldr	r0, [pc, #712]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000e40:	f001 f8a9 	bl	8001f96 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4a:	48af      	ldr	r0, [pc, #700]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000e4c:	f001 f8a3 	bl	8001f96 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	48ac      	ldr	r0, [pc, #688]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000e56:	f001 f89e 	bl	8001f96 <HAL_GPIO_WritePin>
								if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 8000e5a:	2108      	movs	r1, #8
 8000e5c:	48ab      	ldr	r0, [pc, #684]	; (800110c <HAL_GPIO_EXTI_Callback+0x610>)
 8000e5e:	f001 f883 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10a      	bne.n	8000e7e <HAL_GPIO_EXTI_Callback+0x382>
								{
										quat++;
 8000e68:	4ba9      	ldr	r3, [pc, #676]	; (8001110 <HAL_GPIO_EXTI_Callback+0x614>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4aa8      	ldr	r2, [pc, #672]	; (8001110 <HAL_GPIO_EXTI_Callback+0x614>)
 8000e70:	6013      	str	r3, [r2, #0]
										flag_number=10;
 8000e72:	4ba8      	ldr	r3, [pc, #672]	; (8001114 <HAL_GPIO_EXTI_Callback+0x618>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	601a      	str	r2, [r3, #0]
										HAL_TIM_Base_Start_IT(&htim3);
 8000e78:	48a7      	ldr	r0, [pc, #668]	; (8001118 <HAL_GPIO_EXTI_Callback+0x61c>)
 8000e7a:	f002 fee3 	bl	8003c44 <HAL_TIM_Base_Start_IT>
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e84:	48a0      	ldr	r0, [pc, #640]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000e86:	f001 f886 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e90:	489d      	ldr	r0, [pc, #628]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000e92:	f001 f880 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9c:	489a      	ldr	r0, [pc, #616]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000e9e:	f001 f87a 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4898      	ldr	r0, [pc, #608]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000ea8:	f001 f875 	bl	8001f96 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8000eac:	4b9b      	ldr	r3, [pc, #620]	; (800111c <HAL_GPIO_EXTI_Callback+0x620>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a9b      	ldr	r2, [pc, #620]	; (8001120 <HAL_GPIO_EXTI_Callback+0x624>)
 8000eb2:	6013      	str	r3, [r2, #0]
			}
		}


	if(GPIO_Pin == GPIO_PIN_4)
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	2b10      	cmp	r3, #16
 8000eb8:	f040 80d9 	bne.w	800106e <HAL_GPIO_EXTI_Callback+0x572>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8000ebc:	f000 fd62 	bl	8001984 <HAL_GetTick>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a96      	ldr	r2, [pc, #600]	; (800111c <HAL_GPIO_EXTI_Callback+0x620>)
 8000ec4:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 8000ec6:	4b95      	ldr	r3, [pc, #596]	; (800111c <HAL_GPIO_EXTI_Callback+0x620>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4b95      	ldr	r3, [pc, #596]	; (8001120 <HAL_GPIO_EXTI_Callback+0x624>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1ad2      	subs	r2, r2, r3
 8000ed0:	4b94      	ldr	r3, [pc, #592]	; (8001124 <HAL_GPIO_EXTI_Callback+0x628>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	f240 80ca 	bls.w	800106e <HAL_GPIO_EXTI_Callback+0x572>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8000eda:	2110      	movs	r1, #16
 8000edc:	488b      	ldr	r0, [pc, #556]	; (800110c <HAL_GPIO_EXTI_Callback+0x610>)
 8000ede:	f001 f843 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f040 80be 	bne.w	8001066 <HAL_GPIO_EXTI_Callback+0x56a>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef0:	4885      	ldr	r0, [pc, #532]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000ef2:	f001 f850 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efc:	4882      	ldr	r0, [pc, #520]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000efe:	f001 f84a 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f08:	487f      	ldr	r0, [pc, #508]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000f0a:	f001 f844 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2101      	movs	r1, #1
 8000f12:	487d      	ldr	r0, [pc, #500]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000f14:	f001 f83f 	bl	8001f96 <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8000f18:	2110      	movs	r1, #16
 8000f1a:	487c      	ldr	r0, [pc, #496]	; (800110c <HAL_GPIO_EXTI_Callback+0x610>)
 8000f1c:	f001 f824 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10b      	bne.n	8000f3e <HAL_GPIO_EXTI_Callback+0x442>
					{
						num7++;
 8000f26:	4b80      	ldr	r3, [pc, #512]	; (8001128 <HAL_GPIO_EXTI_Callback+0x62c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	4a7e      	ldr	r2, [pc, #504]	; (8001128 <HAL_GPIO_EXTI_Callback+0x62c>)
 8000f2e:	6013      	str	r3, [r2, #0]
						flag_number=7;
 8000f30:	4b78      	ldr	r3, [pc, #480]	; (8001114 <HAL_GPIO_EXTI_Callback+0x618>)
 8000f32:	2207      	movs	r2, #7
 8000f34:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim3);
 8000f36:	4878      	ldr	r0, [pc, #480]	; (8001118 <HAL_GPIO_EXTI_Callback+0x61c>)
 8000f38:	f002 fe84 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8000f3c:	e07c      	b.n	8001038 <HAL_GPIO_EXTI_Callback+0x53c>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	4870      	ldr	r0, [pc, #448]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000f46:	f001 f826 	bl	8001f96 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f50:	486d      	ldr	r0, [pc, #436]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000f52:	f001 f820 	bl	8001f96 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5c:	486a      	ldr	r0, [pc, #424]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000f5e:	f001 f81a 	bl	8001f96 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2101      	movs	r1, #1
 8000f66:	4868      	ldr	r0, [pc, #416]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000f68:	f001 f815 	bl	8001f96 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	4867      	ldr	r0, [pc, #412]	; (800110c <HAL_GPIO_EXTI_Callback+0x610>)
 8000f70:	f000 fffa 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10b      	bne.n	8000f92 <HAL_GPIO_EXTI_Callback+0x496>
						{
							num8++;
 8000f7a:	4b6c      	ldr	r3, [pc, #432]	; (800112c <HAL_GPIO_EXTI_Callback+0x630>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a6a      	ldr	r2, [pc, #424]	; (800112c <HAL_GPIO_EXTI_Callback+0x630>)
 8000f82:	6013      	str	r3, [r2, #0]
							flag_number=8;
 8000f84:	4b63      	ldr	r3, [pc, #396]	; (8001114 <HAL_GPIO_EXTI_Callback+0x618>)
 8000f86:	2208      	movs	r2, #8
 8000f88:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 8000f8a:	4863      	ldr	r0, [pc, #396]	; (8001118 <HAL_GPIO_EXTI_Callback+0x61c>)
 8000f8c:	f002 fe5a 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8000f90:	e052      	b.n	8001038 <HAL_GPIO_EXTI_Callback+0x53c>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f98:	485b      	ldr	r0, [pc, #364]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000f9a:	f000 fffc 	bl	8001f96 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa4:	4858      	ldr	r0, [pc, #352]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000fa6:	f000 fff6 	bl	8001f96 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb0:	4855      	ldr	r0, [pc, #340]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000fb2:	f000 fff0 	bl	8001f96 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4853      	ldr	r0, [pc, #332]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000fbc:	f000 ffeb 	bl	8001f96 <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	4852      	ldr	r0, [pc, #328]	; (800110c <HAL_GPIO_EXTI_Callback+0x610>)
 8000fc4:	f000 ffd0 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_GPIO_EXTI_Callback+0x4ea>
							{
								num9++;
 8000fce:	4b58      	ldr	r3, [pc, #352]	; (8001130 <HAL_GPIO_EXTI_Callback+0x634>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4a56      	ldr	r2, [pc, #344]	; (8001130 <HAL_GPIO_EXTI_Callback+0x634>)
 8000fd6:	6013      	str	r3, [r2, #0]
								flag_number=9;
 8000fd8:	4b4e      	ldr	r3, [pc, #312]	; (8001114 <HAL_GPIO_EXTI_Callback+0x618>)
 8000fda:	2209      	movs	r2, #9
 8000fdc:	601a      	str	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000fde:	484e      	ldr	r0, [pc, #312]	; (8001118 <HAL_GPIO_EXTI_Callback+0x61c>)
 8000fe0:	f002 fe30 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8000fe4:	e028      	b.n	8001038 <HAL_GPIO_EXTI_Callback+0x53c>
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fec:	4846      	ldr	r0, [pc, #280]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000fee:	f000 ffd2 	bl	8001f96 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff8:	4843      	ldr	r0, [pc, #268]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8000ffa:	f000 ffcc 	bl	8001f96 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001004:	4840      	ldr	r0, [pc, #256]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8001006:	f000 ffc6 	bl	8001f96 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 800100a:	2200      	movs	r2, #0
 800100c:	2101      	movs	r1, #1
 800100e:	483e      	ldr	r0, [pc, #248]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8001010:	f000 ffc1 	bl	8001f96 <HAL_GPIO_WritePin>
								if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8001014:	2110      	movs	r1, #16
 8001016:	483d      	ldr	r0, [pc, #244]	; (800110c <HAL_GPIO_EXTI_Callback+0x610>)
 8001018:	f000 ffa6 	bl	8001f68 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10a      	bne.n	8001038 <HAL_GPIO_EXTI_Callback+0x53c>
								{
										bom++;
 8001022:	4b44      	ldr	r3, [pc, #272]	; (8001134 <HAL_GPIO_EXTI_Callback+0x638>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a42      	ldr	r2, [pc, #264]	; (8001134 <HAL_GPIO_EXTI_Callback+0x638>)
 800102a:	6013      	str	r3, [r2, #0]
										flag_number=10;
 800102c:	4b39      	ldr	r3, [pc, #228]	; (8001114 <HAL_GPIO_EXTI_Callback+0x618>)
 800102e:	220a      	movs	r2, #10
 8001030:	601a      	str	r2, [r3, #0]
										HAL_TIM_Base_Start_IT(&htim3);
 8001032:	4839      	ldr	r0, [pc, #228]	; (8001118 <HAL_GPIO_EXTI_Callback+0x61c>)
 8001034:	f002 fe06 	bl	8003c44 <HAL_TIM_Base_Start_IT>
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103e:	4832      	ldr	r0, [pc, #200]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8001040:	f000 ffa9 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104a:	482f      	ldr	r0, [pc, #188]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 800104c:	f000 ffa3 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001056:	482c      	ldr	r0, [pc, #176]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8001058:	f000 ff9d 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 800105c:	2200      	movs	r2, #0
 800105e:	2101      	movs	r1, #1
 8001060:	4829      	ldr	r0, [pc, #164]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 8001062:	f000 ff98 	bl	8001f96 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <HAL_GPIO_EXTI_Callback+0x620>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <HAL_GPIO_EXTI_Callback+0x624>)
 800106c:	6013      	str	r3, [r2, #0]
			}
		}



	if(GPIO_Pin == GPIO_PIN_5)
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	2b20      	cmp	r3, #32
 8001072:	f040 810e 	bne.w	8001292 <HAL_GPIO_EXTI_Callback+0x796>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8001076:	f000 fc85 	bl	8001984 <HAL_GetTick>
 800107a:	4603      	mov	r3, r0
 800107c:	4a27      	ldr	r2, [pc, #156]	; (800111c <HAL_GPIO_EXTI_Callback+0x620>)
 800107e:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <HAL_GPIO_EXTI_Callback+0x620>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <HAL_GPIO_EXTI_Callback+0x624>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	1ad2      	subs	r2, r2, r3
 800108a:	4b26      	ldr	r3, [pc, #152]	; (8001124 <HAL_GPIO_EXTI_Callback+0x628>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	f240 80ff 	bls.w	8001292 <HAL_GPIO_EXTI_Callback+0x796>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8001094:	2120      	movs	r1, #32
 8001096:	481d      	ldr	r0, [pc, #116]	; (800110c <HAL_GPIO_EXTI_Callback+0x610>)
 8001098:	f000 ff66 	bl	8001f68 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f040 80f3 	bne.w	800128a <HAL_GPIO_EXTI_Callback+0x78e>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010aa:	4817      	ldr	r0, [pc, #92]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 80010ac:	f000 ff73 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b6:	4814      	ldr	r0, [pc, #80]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 80010b8:	f000 ff6d 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	4811      	ldr	r0, [pc, #68]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 80010c4:	f000 ff67 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2101      	movs	r1, #1
 80010cc:	480e      	ldr	r0, [pc, #56]	; (8001108 <HAL_GPIO_EXTI_Callback+0x60c>)
 80010ce:	f000 ff62 	bl	8001f96 <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 80010d2:	2120      	movs	r1, #32
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <HAL_GPIO_EXTI_Callback+0x610>)
 80010d6:	f000 ff47 	bl	8001f68 <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d140      	bne.n	8001162 <HAL_GPIO_EXTI_Callback+0x666>
					{
							num_sao++;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_GPIO_EXTI_Callback+0x63c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <HAL_GPIO_EXTI_Callback+0x63c>)
 80010e8:	6013      	str	r3, [r2, #0]
							if(state_lcd ==1)
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_GPIO_EXTI_Callback+0x640>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d128      	bne.n	8001144 <HAL_GPIO_EXTI_Callback+0x648>
							{
								if(flag_di_qua_nhap_mat_khau==1)
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_GPIO_EXTI_Callback+0x644>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d129      	bne.n	800114e <HAL_GPIO_EXTI_Callback+0x652>
								{
									state_lcd ++;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_GPIO_EXTI_Callback+0x640>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_GPIO_EXTI_Callback+0x640>)
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	e023      	b.n	800114e <HAL_GPIO_EXTI_Callback+0x652>
 8001106:	bf00      	nop
 8001108:	40010c00 	.word	0x40010c00
 800110c:	40010800 	.word	0x40010800
 8001110:	20000270 	.word	0x20000270
 8001114:	20000238 	.word	0x20000238
 8001118:	20000128 	.word	0x20000128
 800111c:	20000234 	.word	0x20000234
 8001120:	20000230 	.word	0x20000230
 8001124:	20000000 	.word	0x20000000
 8001128:	20000254 	.word	0x20000254
 800112c:	20000258 	.word	0x20000258
 8001130:	2000025c 	.word	0x2000025c
 8001134:	20000274 	.word	0x20000274
 8001138:	20000264 	.word	0x20000264
 800113c:	200002b0 	.word	0x200002b0
 8001140:	200002c8 	.word	0x200002c8
								} else {

								}
							} else {
								state_lcd ++;
 8001144:	4b74      	ldr	r3, [pc, #464]	; (8001318 <HAL_GPIO_EXTI_Callback+0x81c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	4a73      	ldr	r2, [pc, #460]	; (8001318 <HAL_GPIO_EXTI_Callback+0x81c>)
 800114c:	6013      	str	r3, [r2, #0]
							}
							flag_chuyen_lcd=1;
 800114e:	4b73      	ldr	r3, [pc, #460]	; (800131c <HAL_GPIO_EXTI_Callback+0x820>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]
							flag_number=10;
 8001154:	4b72      	ldr	r3, [pc, #456]	; (8001320 <HAL_GPIO_EXTI_Callback+0x824>)
 8001156:	220a      	movs	r2, #10
 8001158:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 800115a:	4872      	ldr	r0, [pc, #456]	; (8001324 <HAL_GPIO_EXTI_Callback+0x828>)
 800115c:	f002 fd72 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8001160:	e07c      	b.n	800125c <HAL_GPIO_EXTI_Callback+0x760>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001168:	486f      	ldr	r0, [pc, #444]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 800116a:	f000 ff14 	bl	8001f96 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	486c      	ldr	r0, [pc, #432]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 8001176:	f000 ff0e 	bl	8001f96 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001180:	4869      	ldr	r0, [pc, #420]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 8001182:	f000 ff08 	bl	8001f96 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001186:	2201      	movs	r2, #1
 8001188:	2101      	movs	r1, #1
 800118a:	4867      	ldr	r0, [pc, #412]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 800118c:	f000 ff03 	bl	8001f96 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8001190:	2120      	movs	r1, #32
 8001192:	4866      	ldr	r0, [pc, #408]	; (800132c <HAL_GPIO_EXTI_Callback+0x830>)
 8001194:	f000 fee8 	bl	8001f68 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10b      	bne.n	80011b6 <HAL_GPIO_EXTI_Callback+0x6ba>
						{
							num0++;
 800119e:	4b64      	ldr	r3, [pc, #400]	; (8001330 <HAL_GPIO_EXTI_Callback+0x834>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a62      	ldr	r2, [pc, #392]	; (8001330 <HAL_GPIO_EXTI_Callback+0x834>)
 80011a6:	6013      	str	r3, [r2, #0]
							flag_number=0;
 80011a8:	4b5d      	ldr	r3, [pc, #372]	; (8001320 <HAL_GPIO_EXTI_Callback+0x824>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 80011ae:	485d      	ldr	r0, [pc, #372]	; (8001324 <HAL_GPIO_EXTI_Callback+0x828>)
 80011b0:	f002 fd48 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 80011b4:	e052      	b.n	800125c <HAL_GPIO_EXTI_Callback+0x760>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	485a      	ldr	r0, [pc, #360]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 80011be:	f000 feea 	bl	8001f96 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c8:	4857      	ldr	r0, [pc, #348]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 80011ca:	f000 fee4 	bl	8001f96 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d4:	4854      	ldr	r0, [pc, #336]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 80011d6:	f000 fede 	bl	8001f96 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2101      	movs	r1, #1
 80011de:	4852      	ldr	r0, [pc, #328]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 80011e0:	f000 fed9 	bl	8001f96 <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 80011e4:	2120      	movs	r1, #32
 80011e6:	4851      	ldr	r0, [pc, #324]	; (800132c <HAL_GPIO_EXTI_Callback+0x830>)
 80011e8:	f000 febe 	bl	8001f68 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10b      	bne.n	800120a <HAL_GPIO_EXTI_Callback+0x70e>
							{
								num_thang++;
 80011f2:	4b50      	ldr	r3, [pc, #320]	; (8001334 <HAL_GPIO_EXTI_Callback+0x838>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a4e      	ldr	r2, [pc, #312]	; (8001334 <HAL_GPIO_EXTI_Callback+0x838>)
 80011fa:	6013      	str	r3, [r2, #0]
								flag_number=11;
 80011fc:	4b48      	ldr	r3, [pc, #288]	; (8001320 <HAL_GPIO_EXTI_Callback+0x824>)
 80011fe:	220b      	movs	r2, #11
 8001200:	601a      	str	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8001202:	4848      	ldr	r0, [pc, #288]	; (8001324 <HAL_GPIO_EXTI_Callback+0x828>)
 8001204:	f002 fd1e 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8001208:	e028      	b.n	800125c <HAL_GPIO_EXTI_Callback+0x760>
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001210:	4845      	ldr	r0, [pc, #276]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 8001212:	f000 fec0 	bl	8001f96 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121c:	4842      	ldr	r0, [pc, #264]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 800121e:	f000 feba 	bl	8001f96 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001228:	483f      	ldr	r0, [pc, #252]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 800122a:	f000 feb4 	bl	8001f96 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 800122e:	2200      	movs	r2, #0
 8001230:	2101      	movs	r1, #1
 8001232:	483d      	ldr	r0, [pc, #244]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 8001234:	f000 feaf 	bl	8001f96 <HAL_GPIO_WritePin>
								if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8001238:	2120      	movs	r1, #32
 800123a:	483c      	ldr	r0, [pc, #240]	; (800132c <HAL_GPIO_EXTI_Callback+0x830>)
 800123c:	f000 fe94 	bl	8001f68 <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10a      	bne.n	800125c <HAL_GPIO_EXTI_Callback+0x760>
								{
										mode++;
 8001246:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <HAL_GPIO_EXTI_Callback+0x83c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	4a3a      	ldr	r2, [pc, #232]	; (8001338 <HAL_GPIO_EXTI_Callback+0x83c>)
 800124e:	6013      	str	r3, [r2, #0]
										flag_number=10;
 8001250:	4b33      	ldr	r3, [pc, #204]	; (8001320 <HAL_GPIO_EXTI_Callback+0x824>)
 8001252:	220a      	movs	r2, #10
 8001254:	601a      	str	r2, [r3, #0]
										HAL_TIM_Base_Start_IT(&htim3);
 8001256:	4833      	ldr	r0, [pc, #204]	; (8001324 <HAL_GPIO_EXTI_Callback+0x828>)
 8001258:	f002 fcf4 	bl	8003c44 <HAL_TIM_Base_Start_IT>
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001262:	4831      	ldr	r0, [pc, #196]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 8001264:	f000 fe97 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126e:	482e      	ldr	r0, [pc, #184]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 8001270:	f000 fe91 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800127a:	482b      	ldr	r0, [pc, #172]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 800127c:	f000 fe8b 	bl	8001f96 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001280:	2200      	movs	r2, #0
 8001282:	2101      	movs	r1, #1
 8001284:	4828      	ldr	r0, [pc, #160]	; (8001328 <HAL_GPIO_EXTI_Callback+0x82c>)
 8001286:	f000 fe86 	bl	8001f96 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 800128a:	4b2c      	ldr	r3, [pc, #176]	; (800133c <HAL_GPIO_EXTI_Callback+0x840>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a2c      	ldr	r2, [pc, #176]	; (8001340 <HAL_GPIO_EXTI_Callback+0x844>)
 8001290:	6013      	str	r3, [r2, #0]
			}
		}
	if(GPIO_Pin == GPIO_PIN_1)
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d13a      	bne.n	800130e <HAL_GPIO_EXTI_Callback+0x812>
		{

				tick_hien_tai = __HAL_TIM_GET_COUNTER(&htim2);
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_GPIO_EXTI_Callback+0x848>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	4a2a      	ldr	r2, [pc, #168]	; (8001348 <HAL_GPIO_EXTI_Callback+0x84c>)
 80012a0:	6013      	str	r3, [r2, #0]
				thoi_gian_tick = tick_hien_tai - tick_lan_truoc;
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_GPIO_EXTI_Callback+0x84c>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <HAL_GPIO_EXTI_Callback+0x850>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a28      	ldr	r2, [pc, #160]	; (8001350 <HAL_GPIO_EXTI_Callback+0x854>)
 80012ae:	6013      	str	r3, [r2, #0]
				tick_lan_truoc = tick_hien_tai;
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_GPIO_EXTI_Callback+0x84c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a25      	ldr	r2, [pc, #148]	; (800134c <HAL_GPIO_EXTI_Callback+0x850>)
 80012b6:	6013      	str	r3, [r2, #0]
				tick[count_tick] = thoi_gian_tick;
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <HAL_GPIO_EXTI_Callback+0x854>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <HAL_GPIO_EXTI_Callback+0x858>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	b2d1      	uxtb	r1, r2
 80012c2:	4a25      	ldr	r2, [pc, #148]	; (8001358 <HAL_GPIO_EXTI_Callback+0x85c>)
 80012c4:	54d1      	strb	r1, [r2, r3]
				count_tick++;
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <HAL_GPIO_EXTI_Callback+0x858>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <HAL_GPIO_EXTI_Callback+0x858>)
 80012ce:	6013      	str	r3, [r2, #0]
				if(count_tick >84)
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_GPIO_EXTI_Callback+0x858>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b54      	cmp	r3, #84	; 0x54
 80012d6:	dd1a      	ble.n	800130e <HAL_GPIO_EXTI_Callback+0x812>
				{
					  HAL_TIM_Base_Stop_IT(&htim2);
 80012d8:	481a      	ldr	r0, [pc, #104]	; (8001344 <HAL_GPIO_EXTI_Callback+0x848>)
 80012da:	f002 fd05 	bl	8003ce8 <HAL_TIM_Base_Stop_IT>
					  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80012de:	2007      	movs	r0, #7
 80012e0:	f000 fca3 	bl	8001c2a <HAL_NVIC_DisableIRQ>
					  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
					  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
					  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 80012f6:	2301      	movs	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
					  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012fa:	2302      	movs	r3, #2
 80012fc:	60bb      	str	r3, [r7, #8]
					  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2302      	movs	r3, #2
 8001300:	617b      	str	r3, [r7, #20]
					  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4619      	mov	r1, r3
 8001308:	4808      	ldr	r0, [pc, #32]	; (800132c <HAL_GPIO_EXTI_Callback+0x830>)
 800130a:	f000 fca9 	bl	8001c60 <HAL_GPIO_Init>
				}
		}

}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200002b0 	.word	0x200002b0
 800131c:	200002cc 	.word	0x200002cc
 8001320:	20000238 	.word	0x20000238
 8001324:	20000128 	.word	0x20000128
 8001328:	40010c00 	.word	0x40010c00
 800132c:	40010800 	.word	0x40010800
 8001330:	20000260 	.word	0x20000260
 8001334:	20000268 	.word	0x20000268
 8001338:	20000278 	.word	0x20000278
 800133c:	20000234 	.word	0x20000234
 8001340:	20000230 	.word	0x20000230
 8001344:	200000e0 	.word	0x200000e0
 8001348:	20000224 	.word	0x20000224
 800134c:	20000220 	.word	0x20000220
 8001350:	20000228 	.word	0x20000228
 8001354:	2000022c 	.word	0x2000022c
 8001358:	200001b8 	.word	0x200001b8

0800135c <doc_dht11>:
void doc_dht11(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001362:	4828      	ldr	r0, [pc, #160]	; (8001404 <doc_dht11+0xa8>)
 8001364:	f002 fc6e 	bl	8003c44 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001368:	2007      	movs	r0, #7
 800136a:	f000 fc5e 	bl	8001c2a <HAL_NVIC_DisableIRQ>
	count_tick =0;
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <doc_dht11+0xac>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]

	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001380:	2301      	movs	r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001388:	2302      	movs	r3, #2
 800138a:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2302      	movs	r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	481d      	ldr	r0, [pc, #116]	; (800140c <doc_dht11+0xb0>)
 8001396:	f000 fc63 	bl	8001c60 <HAL_GPIO_Init>

	  HAL_Delay(1);
 800139a:	2001      	movs	r0, #1
 800139c:	f000 fafc 	bl	8001998 <HAL_Delay>

	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 80013a4:	2301      	movs	r3, #1
 80013a6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013a8:	2302      	movs	r3, #2
 80013aa:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2302      	movs	r3, #2
 80013ae:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4815      	ldr	r0, [pc, #84]	; (800140c <doc_dht11+0xb0>)
 80013b6:	f000 fc53 	bl	8001c60 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2102      	movs	r1, #2
 80013be:	4813      	ldr	r0, [pc, #76]	; (800140c <doc_dht11+0xb0>)
 80013c0:	f000 fde9 	bl	8001f96 <HAL_GPIO_WritePin>

	HAL_Delay(20);
 80013c4:	2014      	movs	r0, #20
 80013c6:	f000 fae7 	bl	8001998 <HAL_Delay>
	if(count_tick ==0)
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <doc_dht11+0xac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <doc_dht11+0x84>
	{
		__HAL_TIM_SET_COUNTER(&htim2,0);
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <doc_dht11+0xa8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
		tick_lan_truoc=0;
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <doc_dht11+0xb4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
	}
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013e0:	2302      	movs	r3, #2
 80013e2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <doc_dht11+0xb8>)
 80013e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	4806      	ldr	r0, [pc, #24]	; (800140c <doc_dht11+0xb0>)
 80013f2:	f000 fc35 	bl	8001c60 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013f6:	2007      	movs	r0, #7
 80013f8:	f000 fc09 	bl	8001c0e <HAL_NVIC_EnableIRQ>

}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200000e0 	.word	0x200000e0
 8001408:	2000022c 	.word	0x2000022c
 800140c:	40010800 	.word	0x40010800
 8001410:	20000220 	.word	0x20000220
 8001414:	10310000 	.word	0x10310000

08001418 <xu_ly_tick_dht11>:
void xu_ly_tick_dht11(uint8_t* tick,uint8_t* data_dht11)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001422:	4828      	ldr	r0, [pc, #160]	; (80014c4 <xu_ly_tick_dht11+0xac>)
 8001424:	f002 fc60 	bl	8003ce8 <HAL_TIM_Base_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001428:	2007      	movs	r0, #7
 800142a:	f000 fbfe 	bl	8001c2a <HAL_NVIC_DisableIRQ>
	int count_data_dht11=0;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
	for(int i =4;i<= 82;i+=2)
 8001432:	2304      	movs	r3, #4
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	e03d      	b.n	80014b4 <xu_ly_tick_dht11+0x9c>
	{
			data_dht11[count_data_dht11/8] <<= 1;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	da00      	bge.n	8001440 <xu_ly_tick_dht11+0x28>
 800143e:	3307      	adds	r3, #7
 8001440:	10db      	asrs	r3, r3, #3
 8001442:	4619      	mov	r1, r3
 8001444:	460a      	mov	r2, r1
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	4413      	add	r3, r2
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	440b      	add	r3, r1
 8001450:	0052      	lsls	r2, r2, #1
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]
			if( tick[i] > tick[i+1] ) {
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	781a      	ldrb	r2, [r3, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	440b      	add	r3, r1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d90d      	bls.n	8001488 <xu_ly_tick_dht11+0x70>
				data_dht11[count_data_dht11/8] |= 0;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	da00      	bge.n	8001474 <xu_ly_tick_dht11+0x5c>
 8001472:	3307      	adds	r3, #7
 8001474:	10db      	asrs	r3, r3, #3
 8001476:	4619      	mov	r1, r3
 8001478:	460a      	mov	r2, r1
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	441a      	add	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	440b      	add	r3, r1
 8001482:	7812      	ldrb	r2, [r2, #0]
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	e00f      	b.n	80014a8 <xu_ly_tick_dht11+0x90>
			}	else {

				data_dht11[count_data_dht11/8] |= 1;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	da00      	bge.n	8001490 <xu_ly_tick_dht11+0x78>
 800148e:	3307      	adds	r3, #7
 8001490:	10db      	asrs	r3, r3, #3
 8001492:	4619      	mov	r1, r3
 8001494:	460a      	mov	r2, r1
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	4413      	add	r3, r2
 800149a:	781a      	ldrb	r2, [r3, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	440b      	add	r3, r1
 80014a0:	f042 0201 	orr.w	r2, r2, #1
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	701a      	strb	r2, [r3, #0]
			}
		count_data_dht11++;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3301      	adds	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
	for(int i =4;i<= 82;i+=2)
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	3302      	adds	r3, #2
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b52      	cmp	r3, #82	; 0x52
 80014b8:	ddbe      	ble.n	8001438 <xu_ly_tick_dht11+0x20>
	}

}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200000e0 	.word	0x200000e0

080014c8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d8:	d108      	bne.n	80014ec <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			count++;
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	1c54      	adds	r4, r2, #1
 80014e2:	f143 0500 	adc.w	r5, r3, #0
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80014e8:	e9c3 4500 	strd	r4, r5, [r3]
		}
	if(htim->Instance == TIM3)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a27      	ldr	r2, [pc, #156]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d105      	bne.n	8001502 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		flag_ngat_timer3=1;
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim3);
 80014fc:	4826      	ldr	r0, [pc, #152]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80014fe:	f002 fbf3 	bl	8003ce8 <HAL_TIM_Base_Stop_IT>
	}
	if(htim->Instance == TIM4)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a25      	ldr	r2, [pc, #148]	; (800159c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d13a      	bne.n	8001582 <HAL_TIM_PeriodElapsedCallback+0xba>
	{
		if(state_lcd%7 == 2){
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001512:	fb83 1302 	smull	r1, r3, r3, r2
 8001516:	4413      	add	r3, r2
 8001518:	1099      	asrs	r1, r3, #2
 800151a:	17d3      	asrs	r3, r2, #31
 800151c:	1ac9      	subs	r1, r1, r3
 800151e:	460b      	mov	r3, r1
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	1a5b      	subs	r3, r3, r1
 8001524:	1ad1      	subs	r1, r2, r3
 8001526:	2902      	cmp	r1, #2
 8001528:	d12b      	bne.n	8001582 <HAL_TIM_PeriodElapsedCallback+0xba>
			  sprintf(gio_string,"%d : %d : %d ",time.hour,time.minutes,time.seconds);
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800152c:	789b      	ldrb	r3, [r3, #2]
 800152e:	461a      	mov	r2, r3
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	4619      	mov	r1, r3
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	460b      	mov	r3, r1
 800153e:	491b      	ldr	r1, [pc, #108]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001540:	481b      	ldr	r0, [pc, #108]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001542:	f003 f843 	bl	80045cc <siprintf>
			  sprintf(ngay_string,"%d : %d : 20%d",time.dayofmonth,time.month,time.year);
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001548:	791b      	ldrb	r3, [r3, #4]
 800154a:	461a      	mov	r2, r3
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800154e:	795b      	ldrb	r3, [r3, #5]
 8001550:	4619      	mov	r1, r3
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001554:	799b      	ldrb	r3, [r3, #6]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	460b      	mov	r3, r1
 800155a:	4916      	ldr	r1, [pc, #88]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800155c:	4816      	ldr	r0, [pc, #88]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800155e:	f003 f835 	bl	80045cc <siprintf>
			  lcd_clear();
 8001562:	f002 ffab 	bl	80044bc <lcd_clear>
			  lcd_put_cur(0,1);
 8001566:	2101      	movs	r1, #1
 8001568:	2000      	movs	r0, #0
 800156a:	f002 ffbe 	bl	80044ea <lcd_put_cur>
			  lcd_send_string(ngay_string);
 800156e:	4812      	ldr	r0, [pc, #72]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001570:	f003 f817 	bl	80045a2 <lcd_send_string>
			  lcd_put_cur(1,1);
 8001574:	2101      	movs	r1, #1
 8001576:	2001      	movs	r0, #1
 8001578:	f002 ffb7 	bl	80044ea <lcd_put_cur>
			  lcd_send_string(gio_string);
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800157e:	f003 f810 	bl	80045a2 <lcd_send_string>
		}
	}

}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bdb0      	pop	{r4, r5, r7, pc}
 800158a:	bf00      	nop
 800158c:	20000280 	.word	0x20000280
 8001590:	40000400 	.word	0x40000400
 8001594:	20000004 	.word	0x20000004
 8001598:	20000128 	.word	0x20000128
 800159c:	40000800 	.word	0x40000800
 80015a0:	200002b0 	.word	0x200002b0
 80015a4:	92492493 	.word	0x92492493
 80015a8:	20000328 	.word	0x20000328
 80015ac:	08004fec 	.word	0x08004fec
 80015b0:	20000314 	.word	0x20000314
 80015b4:	08004ffc 	.word	0x08004ffc
 80015b8:	20000300 	.word	0x20000300

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <Error_Handler+0x8>
	...

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_MspInit+0x40>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <HAL_MspInit+0x40>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6193      	str	r3, [r2, #24]
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_MspInit+0x40>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_MspInit+0x40>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_MspInit+0x40>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	61d3      	str	r3, [r2, #28]
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_MspInit+0x40>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a15      	ldr	r2, [pc, #84]	; (800167c <HAL_I2C_MspInit+0x70>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d123      	bne.n	8001674 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_I2C_MspInit+0x74>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a13      	ldr	r2, [pc, #76]	; (8001680 <HAL_I2C_MspInit+0x74>)
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_I2C_MspInit+0x74>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001644:	23c0      	movs	r3, #192	; 0xc0
 8001646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001648:	2312      	movs	r3, #18
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	480b      	ldr	r0, [pc, #44]	; (8001684 <HAL_I2C_MspInit+0x78>)
 8001658:	f000 fb02 	bl	8001c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_I2C_MspInit+0x74>)
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_I2C_MspInit+0x74>)
 8001662:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001666:	61d3      	str	r3, [r2, #28]
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_I2C_MspInit+0x74>)
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40005400 	.word	0x40005400
 8001680:	40021000 	.word	0x40021000
 8001684:	40010c00 	.word	0x40010c00

08001688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001698:	d114      	bne.n	80016c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <HAL_TIM_Base_MspInit+0xac>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a25      	ldr	r2, [pc, #148]	; (8001734 <HAL_TIM_Base_MspInit+0xac>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <HAL_TIM_Base_MspInit+0xac>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	210a      	movs	r1, #10
 80016b6:	201c      	movs	r0, #28
 80016b8:	f000 fa8d 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016bc:	201c      	movs	r0, #28
 80016be:	f000 faa6 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016c2:	e032      	b.n	800172a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <HAL_TIM_Base_MspInit+0xb0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d114      	bne.n	80016f8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_TIM_Base_MspInit+0xac>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <HAL_TIM_Base_MspInit+0xac>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_TIM_Base_MspInit+0xac>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 12, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	210c      	movs	r1, #12
 80016ea:	201d      	movs	r0, #29
 80016ec:	f000 fa73 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016f0:	201d      	movs	r0, #29
 80016f2:	f000 fa8c 	bl	8001c0e <HAL_NVIC_EnableIRQ>
}
 80016f6:	e018      	b.n	800172a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0f      	ldr	r2, [pc, #60]	; (800173c <HAL_TIM_Base_MspInit+0xb4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d113      	bne.n	800172a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_TIM_Base_MspInit+0xac>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_TIM_Base_MspInit+0xac>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_TIM_Base_MspInit+0xac>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	201e      	movs	r0, #30
 8001720:	f000 fa59 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001724:	201e      	movs	r0, #30
 8001726:	f000 fa72 	bl	8001c0e <HAL_NVIC_EnableIRQ>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	40000400 	.word	0x40000400
 800173c:	40000800 	.word	0x40000800

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <NMI_Handler+0x4>

08001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <MemManage_Handler+0x4>

08001752 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <UsageFault_Handler+0x4>

0800175e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001786:	f000 f8eb 	bl	8001960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}

0800178e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001792:	2002      	movs	r0, #2
 8001794:	f000 fc18 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80017a0:	2004      	movs	r0, #4
 80017a2:	f000 fc11 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}

080017aa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80017ae:	2008      	movs	r0, #8
 80017b0:	f000 fc0a 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80017bc:	2010      	movs	r0, #16
 80017be:	f000 fc03 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80017ca:	2020      	movs	r0, #32
 80017cc:	f000 fbfc 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM2_IRQHandler+0x10>)
 80017da:	f002 fab3 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200000e0 	.word	0x200000e0

080017e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM3_IRQHandler+0x10>)
 80017ee:	f002 faa9 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000128 	.word	0x20000128

080017fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM4_IRQHandler+0x10>)
 8001802:	f002 fa9f 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000170 	.word	0x20000170

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f002 feec 	bl	800461c <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20005000 	.word	0x20005000
 8001870:	00000400 	.word	0x00000400
 8001874:	20000330 	.word	0x20000330
 8001878:	20000480 	.word	0x20000480

0800187c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001888:	f7ff fff8 	bl	800187c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800188c:	480b      	ldr	r0, [pc, #44]	; (80018bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800188e:	490c      	ldr	r1, [pc, #48]	; (80018c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001890:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018a4:	4c09      	ldr	r4, [pc, #36]	; (80018cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b2:	f002 feb9 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018b6:	f7fe fd25 	bl	8000304 <main>
  bx lr
 80018ba:	4770      	bx	lr
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80018c4:	08005074 	.word	0x08005074
  ldr r2, =_sbss
 80018c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018cc:	20000480 	.word	0x20000480

080018d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC1_2_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_Init+0x28>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_Init+0x28>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f96b 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f000 f808 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff fe6a 	bl	80015c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40022000 	.word	0x40022000

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x54>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x58>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f991 	bl	8001c46 <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 f94b 	bl	8001bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_InitTick+0x5c>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000010 	.word	0x20000010
 8001958:	20000018 	.word	0x20000018
 800195c:	20000014 	.word	0x20000014

08001960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_IncTick+0x1c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_IncTick+0x20>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a03      	ldr	r2, [pc, #12]	; (8001980 <HAL_IncTick+0x20>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	20000018 	.word	0x20000018
 8001980:	20000334 	.word	0x20000334

08001984 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b02      	ldr	r3, [pc, #8]	; (8001994 <HAL_GetTick+0x10>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000334 	.word	0x20000334

08001998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff fff0 	bl	8001984 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffe0 	bl	8001984 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000018 	.word	0x20000018

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4906      	ldr	r1, [pc, #24]	; (8001a78 <__NVIC_EnableIRQ+0x34>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	db12      	blt.n	8001ab4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	490a      	ldr	r1, [pc, #40]	; (8001ac0 <__NVIC_DisableIRQ+0x44>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa2:	3320      	adds	r3, #32
 8001aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001aa8:	f3bf 8f4f 	dsb	sy
}
 8001aac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001aae:	f3bf 8f6f 	isb	sy
}
 8001ab2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db0a      	blt.n	8001aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <__NVIC_SetPriority+0x4c>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aec:	e00a      	b.n	8001b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <__NVIC_SetPriority+0x50>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3b04      	subs	r3, #4
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	440b      	add	r3, r1
 8001b02:	761a      	strb	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf28      	it	cs
 8001b36:	2304      	movcs	r3, #4
 8001b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d902      	bls.n	8001b48 <NVIC_EncodePriority+0x30>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b03      	subs	r3, #3
 8001b46:	e000      	b.n	8001b4a <NVIC_EncodePriority+0x32>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	4313      	orrs	r3, r2
         );
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b8c:	d301      	bcc.n	8001b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00f      	b.n	8001bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <SysTick_Config+0x40>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f7ff ff90 	bl	8001ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SysTick_Config+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <SysTick_Config+0x40>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff09 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be8:	f7ff ff1e 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f7ff ff90 	bl	8001b18 <NVIC_EncodePriority>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff5f 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff11 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff1f 	bl	8001a7c <__NVIC_DisableIRQ>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ff94 	bl	8001b7c <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b08b      	sub	sp, #44	; 0x2c
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c72:	e169      	b.n	8001f48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c74:	2201      	movs	r2, #1
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f040 8158 	bne.w	8001f42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4a9a      	ldr	r2, [pc, #616]	; (8001f00 <HAL_GPIO_Init+0x2a0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d05e      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001c9c:	4a98      	ldr	r2, [pc, #608]	; (8001f00 <HAL_GPIO_Init+0x2a0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d875      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001ca2:	4a98      	ldr	r2, [pc, #608]	; (8001f04 <HAL_GPIO_Init+0x2a4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d058      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001ca8:	4a96      	ldr	r2, [pc, #600]	; (8001f04 <HAL_GPIO_Init+0x2a4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d86f      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cae:	4a96      	ldr	r2, [pc, #600]	; (8001f08 <HAL_GPIO_Init+0x2a8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d052      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001cb4:	4a94      	ldr	r2, [pc, #592]	; (8001f08 <HAL_GPIO_Init+0x2a8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d869      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cba:	4a94      	ldr	r2, [pc, #592]	; (8001f0c <HAL_GPIO_Init+0x2ac>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d04c      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001cc0:	4a92      	ldr	r2, [pc, #584]	; (8001f0c <HAL_GPIO_Init+0x2ac>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d863      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cc6:	4a92      	ldr	r2, [pc, #584]	; (8001f10 <HAL_GPIO_Init+0x2b0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d046      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001ccc:	4a90      	ldr	r2, [pc, #576]	; (8001f10 <HAL_GPIO_Init+0x2b0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d85d      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cd2:	2b12      	cmp	r3, #18
 8001cd4:	d82a      	bhi.n	8001d2c <HAL_GPIO_Init+0xcc>
 8001cd6:	2b12      	cmp	r3, #18
 8001cd8:	d859      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cda:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <HAL_GPIO_Init+0x80>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001d5b 	.word	0x08001d5b
 8001ce4:	08001d35 	.word	0x08001d35
 8001ce8:	08001d47 	.word	0x08001d47
 8001cec:	08001d89 	.word	0x08001d89
 8001cf0:	08001d8f 	.word	0x08001d8f
 8001cf4:	08001d8f 	.word	0x08001d8f
 8001cf8:	08001d8f 	.word	0x08001d8f
 8001cfc:	08001d8f 	.word	0x08001d8f
 8001d00:	08001d8f 	.word	0x08001d8f
 8001d04:	08001d8f 	.word	0x08001d8f
 8001d08:	08001d8f 	.word	0x08001d8f
 8001d0c:	08001d8f 	.word	0x08001d8f
 8001d10:	08001d8f 	.word	0x08001d8f
 8001d14:	08001d8f 	.word	0x08001d8f
 8001d18:	08001d8f 	.word	0x08001d8f
 8001d1c:	08001d8f 	.word	0x08001d8f
 8001d20:	08001d8f 	.word	0x08001d8f
 8001d24:	08001d3d 	.word	0x08001d3d
 8001d28:	08001d51 	.word	0x08001d51
 8001d2c:	4a79      	ldr	r2, [pc, #484]	; (8001f14 <HAL_GPIO_Init+0x2b4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d32:	e02c      	b.n	8001d8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	623b      	str	r3, [r7, #32]
          break;
 8001d3a:	e029      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	3304      	adds	r3, #4
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e024      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	623b      	str	r3, [r7, #32]
          break;
 8001d4e:	e01f      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	330c      	adds	r3, #12
 8001d56:	623b      	str	r3, [r7, #32]
          break;
 8001d58:	e01a      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d62:	2304      	movs	r3, #4
 8001d64:	623b      	str	r3, [r7, #32]
          break;
 8001d66:	e013      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d70:	2308      	movs	r3, #8
 8001d72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	611a      	str	r2, [r3, #16]
          break;
 8001d7a:	e009      	b.n	8001d90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	615a      	str	r2, [r3, #20]
          break;
 8001d86:	e003      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
          break;
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          break;
 8001d8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d801      	bhi.n	8001d9a <HAL_GPIO_Init+0x13a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	e001      	b.n	8001d9e <HAL_GPIO_Init+0x13e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2bff      	cmp	r3, #255	; 0xff
 8001da4:	d802      	bhi.n	8001dac <HAL_GPIO_Init+0x14c>
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	e002      	b.n	8001db2 <HAL_GPIO_Init+0x152>
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	3b08      	subs	r3, #8
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	210f      	movs	r1, #15
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80b1 	beq.w	8001f42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001de0:	4b4d      	ldr	r3, [pc, #308]	; (8001f18 <HAL_GPIO_Init+0x2b8>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a4c      	ldr	r2, [pc, #304]	; (8001f18 <HAL_GPIO_Init+0x2b8>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <HAL_GPIO_Init+0x2b8>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001df8:	4a48      	ldr	r2, [pc, #288]	; (8001f1c <HAL_GPIO_Init+0x2bc>)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a40      	ldr	r2, [pc, #256]	; (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <HAL_GPIO_Init+0x1ec>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a3f      	ldr	r2, [pc, #252]	; (8001f24 <HAL_GPIO_Init+0x2c4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00d      	beq.n	8001e48 <HAL_GPIO_Init+0x1e8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3e      	ldr	r2, [pc, #248]	; (8001f28 <HAL_GPIO_Init+0x2c8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d007      	beq.n	8001e44 <HAL_GPIO_Init+0x1e4>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3d      	ldr	r2, [pc, #244]	; (8001f2c <HAL_GPIO_Init+0x2cc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_GPIO_Init+0x1e0>
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e006      	b.n	8001e4e <HAL_GPIO_Init+0x1ee>
 8001e40:	2304      	movs	r3, #4
 8001e42:	e004      	b.n	8001e4e <HAL_GPIO_Init+0x1ee>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e002      	b.n	8001e4e <HAL_GPIO_Init+0x1ee>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_GPIO_Init+0x1ee>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	f002 0203 	and.w	r2, r2, #3
 8001e54:	0092      	lsls	r2, r2, #2
 8001e56:	4093      	lsls	r3, r2
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e5e:	492f      	ldr	r1, [pc, #188]	; (8001f1c <HAL_GPIO_Init+0x2bc>)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e78:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	492c      	ldr	r1, [pc, #176]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4928      	ldr	r1, [pc, #160]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ea0:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4922      	ldr	r1, [pc, #136]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60cb      	str	r3, [r1, #12]
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	491e      	ldr	r1, [pc, #120]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4918      	ldr	r1, [pc, #96]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	4914      	ldr	r1, [pc, #80]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d021      	beq.n	8001f34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	490e      	ldr	r1, [pc, #56]	; (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
 8001efc:	e021      	b.n	8001f42 <HAL_GPIO_Init+0x2e2>
 8001efe:	bf00      	nop
 8001f00:	10320000 	.word	0x10320000
 8001f04:	10310000 	.word	0x10310000
 8001f08:	10220000 	.word	0x10220000
 8001f0c:	10210000 	.word	0x10210000
 8001f10:	10120000 	.word	0x10120000
 8001f14:	10110000 	.word	0x10110000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	40010800 	.word	0x40010800
 8001f24:	40010c00 	.word	0x40010c00
 8001f28:	40011000 	.word	0x40011000
 8001f2c:	40011400 	.word	0x40011400
 8001f30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_GPIO_Init+0x304>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	4909      	ldr	r1, [pc, #36]	; (8001f64 <HAL_GPIO_Init+0x304>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	3301      	adds	r3, #1
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f47f ae8e 	bne.w	8001c74 <HAL_GPIO_Init+0x14>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	372c      	adds	r7, #44	; 0x2c
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	40010400 	.word	0x40010400

08001f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e001      	b.n	8001f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	807b      	strh	r3, [r7, #2]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa6:	787b      	ldrb	r3, [r7, #1]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fac:	887a      	ldrh	r2, [r7, #2]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fb2:	e003      	b.n	8001fbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	041a      	lsls	r2, r3, #16
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	611a      	str	r2, [r3, #16]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fd88 	bl	8000afc <HAL_GPIO_EXTI_Callback>
  }
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40010400 	.word	0x40010400

08001ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e12b      	b.n	8002262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff faf4 	bl	800160c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	; 0x24
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800204a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800205a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800205c:	f001 fd70 	bl	8003b40 <HAL_RCC_GetPCLK1Freq>
 8002060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4a81      	ldr	r2, [pc, #516]	; (800226c <HAL_I2C_Init+0x274>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d807      	bhi.n	800207c <HAL_I2C_Init+0x84>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a80      	ldr	r2, [pc, #512]	; (8002270 <HAL_I2C_Init+0x278>)
 8002070:	4293      	cmp	r3, r2
 8002072:	bf94      	ite	ls
 8002074:	2301      	movls	r3, #1
 8002076:	2300      	movhi	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e006      	b.n	800208a <HAL_I2C_Init+0x92>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a7d      	ldr	r2, [pc, #500]	; (8002274 <HAL_I2C_Init+0x27c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	bf94      	ite	ls
 8002084:	2301      	movls	r3, #1
 8002086:	2300      	movhi	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0e7      	b.n	8002262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4a78      	ldr	r2, [pc, #480]	; (8002278 <HAL_I2C_Init+0x280>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0c9b      	lsrs	r3, r3, #18
 800209c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a6a      	ldr	r2, [pc, #424]	; (800226c <HAL_I2C_Init+0x274>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d802      	bhi.n	80020cc <HAL_I2C_Init+0xd4>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	3301      	adds	r3, #1
 80020ca:	e009      	b.n	80020e0 <HAL_I2C_Init+0xe8>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	4a69      	ldr	r2, [pc, #420]	; (800227c <HAL_I2C_Init+0x284>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	3301      	adds	r3, #1
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	495c      	ldr	r1, [pc, #368]	; (800226c <HAL_I2C_Init+0x274>)
 80020fc:	428b      	cmp	r3, r1
 80020fe:	d819      	bhi.n	8002134 <HAL_I2C_Init+0x13c>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1e59      	subs	r1, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fbb1 f3f3 	udiv	r3, r1, r3
 800210e:	1c59      	adds	r1, r3, #1
 8002110:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002114:	400b      	ands	r3, r1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_I2C_Init+0x138>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1e59      	subs	r1, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fbb1 f3f3 	udiv	r3, r1, r3
 8002128:	3301      	adds	r3, #1
 800212a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212e:	e051      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 8002130:	2304      	movs	r3, #4
 8002132:	e04f      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d111      	bne.n	8002160 <HAL_I2C_Init+0x168>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1e58      	subs	r0, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	e012      	b.n	8002186 <HAL_I2C_Init+0x18e>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1e58      	subs	r0, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	0099      	lsls	r1, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	fbb0 f3f3 	udiv	r3, r0, r3
 8002176:	3301      	adds	r3, #1
 8002178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Init+0x196>
 800218a:	2301      	movs	r3, #1
 800218c:	e022      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10e      	bne.n	80021b4 <HAL_I2C_Init+0x1bc>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1e58      	subs	r0, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6859      	ldr	r1, [r3, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	440b      	add	r3, r1
 80021a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b2:	e00f      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1e58      	subs	r0, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	0099      	lsls	r1, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	6809      	ldr	r1, [r1, #0]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6911      	ldr	r1, [r2, #16]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68d2      	ldr	r2, [r2, #12]
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	430b      	orrs	r3, r1
 8002216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	000186a0 	.word	0x000186a0
 8002270:	001e847f 	.word	0x001e847f
 8002274:	003d08ff 	.word	0x003d08ff
 8002278:	431bde83 	.word	0x431bde83
 800227c:	10624dd3 	.word	0x10624dd3

08002280 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	461a      	mov	r2, r3
 800228c:	460b      	mov	r3, r1
 800228e:	817b      	strh	r3, [r7, #10]
 8002290:	4613      	mov	r3, r2
 8002292:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fb76 	bl	8001984 <HAL_GetTick>
 8002298:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	f040 80e0 	bne.w	8002468 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2319      	movs	r3, #25
 80022ae:	2201      	movs	r2, #1
 80022b0:	4970      	ldr	r1, [pc, #448]	; (8002474 <HAL_I2C_Master_Transmit+0x1f4>)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fe44 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
 80022c0:	e0d3      	b.n	800246a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_I2C_Master_Transmit+0x50>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e0cc      	b.n	800246a <HAL_I2C_Master_Transmit+0x1ea>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d007      	beq.n	80022f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002304:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2221      	movs	r2, #33	; 0x21
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2210      	movs	r2, #16
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a50      	ldr	r2, [pc, #320]	; (8002478 <HAL_I2C_Master_Transmit+0x1f8>)
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002338:	8979      	ldrh	r1, [r7, #10]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	6a3a      	ldr	r2, [r7, #32]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fbfe 	bl	8002b40 <I2C_MasterRequestWrite>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e08d      	b.n	800246a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002364:	e066      	b.n	8002434 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	6a39      	ldr	r1, [r7, #32]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 ff02 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00d      	beq.n	8002392 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2b04      	cmp	r3, #4
 800237c:	d107      	bne.n	800238e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e06b      	b.n	800246a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d11b      	bne.n	8002408 <HAL_I2C_Master_Transmit+0x188>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d017      	beq.n	8002408 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	781a      	ldrb	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	6a39      	ldr	r1, [r7, #32]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fef9 	bl	8003204 <I2C_WaitOnBTFFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00d      	beq.n	8002434 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	2b04      	cmp	r3, #4
 800241e:	d107      	bne.n	8002430 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e01a      	b.n	800246a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	d194      	bne.n	8002366 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	e000      	b.n	800246a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002468:	2302      	movs	r3, #2
  }
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	00100002 	.word	0x00100002
 8002478:	ffff0000 	.word	0xffff0000

0800247c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	4608      	mov	r0, r1
 8002486:	4611      	mov	r1, r2
 8002488:	461a      	mov	r2, r3
 800248a:	4603      	mov	r3, r0
 800248c:	817b      	strh	r3, [r7, #10]
 800248e:	460b      	mov	r3, r1
 8002490:	813b      	strh	r3, [r7, #8]
 8002492:	4613      	mov	r3, r2
 8002494:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002496:	f7ff fa75 	bl	8001984 <HAL_GetTick>
 800249a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	f040 80d9 	bne.w	800265c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2319      	movs	r3, #25
 80024b0:	2201      	movs	r2, #1
 80024b2:	496d      	ldr	r1, [pc, #436]	; (8002668 <HAL_I2C_Mem_Write+0x1ec>)
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fd43 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
 80024c2:	e0cc      	b.n	800265e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_I2C_Mem_Write+0x56>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e0c5      	b.n	800265e <HAL_I2C_Mem_Write+0x1e2>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d007      	beq.n	80024f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002506:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2221      	movs	r2, #33	; 0x21
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2240      	movs	r2, #64	; 0x40
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a3a      	ldr	r2, [r7, #32]
 8002522:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002528:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a4d      	ldr	r2, [pc, #308]	; (800266c <HAL_I2C_Mem_Write+0x1f0>)
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800253a:	88f8      	ldrh	r0, [r7, #6]
 800253c:	893a      	ldrh	r2, [r7, #8]
 800253e:	8979      	ldrh	r1, [r7, #10]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	4603      	mov	r3, r0
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fb7a 	bl	8002c44 <I2C_RequestMemoryWrite>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d052      	beq.n	80025fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e081      	b.n	800265e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fe08 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00d      	beq.n	8002586 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	2b04      	cmp	r3, #4
 8002570:	d107      	bne.n	8002582 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002580:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e06b      	b.n	800265e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	781a      	ldrb	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d11b      	bne.n	80025fc <HAL_I2C_Mem_Write+0x180>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d017      	beq.n	80025fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1aa      	bne.n	800255a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fdfb 	bl	8003204 <I2C_WaitOnBTFFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00d      	beq.n	8002630 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	2b04      	cmp	r3, #4
 800261a:	d107      	bne.n	800262c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e016      	b.n	800265e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	e000      	b.n	800265e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800265c:	2302      	movs	r3, #2
  }
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	00100002 	.word	0x00100002
 800266c:	ffff0000 	.word	0xffff0000

08002670 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	; 0x30
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	4608      	mov	r0, r1
 800267a:	4611      	mov	r1, r2
 800267c:	461a      	mov	r2, r3
 800267e:	4603      	mov	r3, r0
 8002680:	817b      	strh	r3, [r7, #10]
 8002682:	460b      	mov	r3, r1
 8002684:	813b      	strh	r3, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800268e:	f7ff f979 	bl	8001984 <HAL_GetTick>
 8002692:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b20      	cmp	r3, #32
 800269e:	f040 8244 	bne.w	8002b2a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2319      	movs	r3, #25
 80026a8:	2201      	movs	r2, #1
 80026aa:	4982      	ldr	r1, [pc, #520]	; (80028b4 <HAL_I2C_Mem_Read+0x244>)
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fc47 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
 80026ba:	e237      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_I2C_Mem_Read+0x5a>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e230      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4bc>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d007      	beq.n	80026f0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2222      	movs	r2, #34	; 0x22
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2240      	movs	r2, #64	; 0x40
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002720:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a62      	ldr	r2, [pc, #392]	; (80028b8 <HAL_I2C_Mem_Read+0x248>)
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002732:	88f8      	ldrh	r0, [r7, #6]
 8002734:	893a      	ldrh	r2, [r7, #8]
 8002736:	8979      	ldrh	r1, [r7, #10]
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	4603      	mov	r3, r0
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 fb14 	bl	8002d70 <I2C_RequestMemoryRead>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1ec      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	d113      	bne.n	8002782 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e1c0      	b.n	8002b04 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	2b01      	cmp	r3, #1
 8002788:	d11e      	bne.n	80027c8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002798:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800279a:	b672      	cpsid	i
}
 800279c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027c4:	b662      	cpsie	i
}
 80027c6:	e035      	b.n	8002834 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d11e      	bne.n	800280e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027e0:	b672      	cpsid	i
}
 80027e2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002808:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800280a:	b662      	cpsie	i
}
 800280c:	e012      	b.n	8002834 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800281c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002834:	e166      	b.n	8002b04 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	2b03      	cmp	r3, #3
 800283c:	f200 811f 	bhi.w	8002a7e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	2b01      	cmp	r3, #1
 8002846:	d123      	bne.n	8002890 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fd21 	bl	8003294 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e167      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800288e:	e139      	b.n	8002b04 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	2b02      	cmp	r3, #2
 8002896:	d152      	bne.n	800293e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289e:	2200      	movs	r2, #0
 80028a0:	4906      	ldr	r1, [pc, #24]	; (80028bc <HAL_I2C_Mem_Read+0x24c>)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fb4c 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e13c      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4bc>
 80028b2:	bf00      	nop
 80028b4:	00100002 	.word	0x00100002
 80028b8:	ffff0000 	.word	0xffff0000
 80028bc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028c0:	b672      	cpsid	i
}
 80028c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002906:	b662      	cpsie	i
}
 8002908:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800293c:	e0e2      	b.n	8002b04 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	2200      	movs	r2, #0
 8002946:	497b      	ldr	r1, [pc, #492]	; (8002b34 <HAL_I2C_Mem_Read+0x4c4>)
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 faf9 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0e9      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002966:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002968:	b672      	cpsid	i
}
 800296a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800299e:	4b66      	ldr	r3, [pc, #408]	; (8002b38 <HAL_I2C_Mem_Read+0x4c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	08db      	lsrs	r3, r3, #3
 80029a4:	4a65      	ldr	r2, [pc, #404]	; (8002b3c <HAL_I2C_Mem_Read+0x4cc>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0a1a      	lsrs	r2, r3, #8
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	00da      	lsls	r2, r3, #3
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d118      	bne.n	80029f6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80029e6:	b662      	cpsie	i
}
 80029e8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e09a      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d1d9      	bne.n	80029b8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a46:	b662      	cpsie	i
}
 8002a48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a7c:	e042      	b.n	8002b04 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fc06 	bl	8003294 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e04c      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d118      	bne.n	8002b04 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f47f ae94 	bne.w	8002836 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e000      	b.n	8002b2c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
  }
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3728      	adds	r7, #40	; 0x28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	00010004 	.word	0x00010004
 8002b38:	20000010 	.word	0x20000010
 8002b3c:	14f8b589 	.word	0x14f8b589

08002b40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d006      	beq.n	8002b6a <I2C_MasterRequestWrite+0x2a>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d003      	beq.n	8002b6a <I2C_MasterRequestWrite+0x2a>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b68:	d108      	bne.n	8002b7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e00b      	b.n	8002b94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	2b12      	cmp	r3, #18
 8002b82:	d107      	bne.n	8002b94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f9cd 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00d      	beq.n	8002bc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bba:	d103      	bne.n	8002bc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e035      	b.n	8002c34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd0:	d108      	bne.n	8002be4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bd2:	897b      	ldrh	r3, [r7, #10]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	e01b      	b.n	8002c1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002be4:	897b      	ldrh	r3, [r7, #10]
 8002be6:	11db      	asrs	r3, r3, #7
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f003 0306 	and.w	r3, r3, #6
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f063 030f 	orn	r3, r3, #15
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	490e      	ldr	r1, [pc, #56]	; (8002c3c <I2C_MasterRequestWrite+0xfc>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fa16 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e010      	b.n	8002c34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c12:	897b      	ldrh	r3, [r7, #10]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4907      	ldr	r1, [pc, #28]	; (8002c40 <I2C_MasterRequestWrite+0x100>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fa06 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	00010008 	.word	0x00010008
 8002c40:	00010002 	.word	0x00010002

08002c44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	817b      	strh	r3, [r7, #10]
 8002c56:	460b      	mov	r3, r1
 8002c58:	813b      	strh	r3, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f960 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c94:	d103      	bne.n	8002c9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e05f      	b.n	8002d62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	6a3a      	ldr	r2, [r7, #32]
 8002cb6:	492d      	ldr	r1, [pc, #180]	; (8002d6c <I2C_RequestMemoryWrite+0x128>)
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f9bb 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e04c      	b.n	8002d62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	6a39      	ldr	r1, [r7, #32]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fa46 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d107      	bne.n	8002d06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e02b      	b.n	8002d62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]
 8002d1a:	e021      	b.n	8002d60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2c:	6a39      	ldr	r1, [r7, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fa20 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d107      	bne.n	8002d52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e005      	b.n	8002d62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d56:	893b      	ldrh	r3, [r7, #8]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	00010002 	.word	0x00010002

08002d70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	817b      	strh	r3, [r7, #10]
 8002d82:	460b      	mov	r3, r1
 8002d84:	813b      	strh	r3, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f8c2 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd0:	d103      	bne.n	8002dda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0aa      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dde:	897b      	ldrh	r3, [r7, #10]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	6a3a      	ldr	r2, [r7, #32]
 8002df2:	4952      	ldr	r1, [pc, #328]	; (8002f3c <I2C_RequestMemoryRead+0x1cc>)
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f91d 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e097      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1c:	6a39      	ldr	r1, [r7, #32]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f9a8 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00d      	beq.n	8002e46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d107      	bne.n	8002e42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e076      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4c:	893b      	ldrh	r3, [r7, #8]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	611a      	str	r2, [r3, #16]
 8002e56:	e021      	b.n	8002e9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e58:	893b      	ldrh	r3, [r7, #8]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	6a39      	ldr	r1, [r7, #32]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f982 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00d      	beq.n	8002e92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d107      	bne.n	8002e8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e050      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e92:	893b      	ldrh	r3, [r7, #8]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9e:	6a39      	ldr	r1, [r7, #32]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f967 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00d      	beq.n	8002ec8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d107      	bne.n	8002ec4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e035      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f82b 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00d      	beq.n	8002f0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efe:	d103      	bne.n	8002f08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e013      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f0c:	897b      	ldrh	r3, [r7, #10]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	6a3a      	ldr	r2, [r7, #32]
 8002f20:	4906      	ldr	r1, [pc, #24]	; (8002f3c <I2C_RequestMemoryRead+0x1cc>)
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f886 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	00010002 	.word	0x00010002

08002f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f50:	e048      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d044      	beq.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7fe fd13 	bl	8001984 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d139      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10d      	bne.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	e00c      	b.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d116      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e023      	b.n	800302c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	0c1b      	lsrs	r3, r3, #16
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d10d      	bne.n	800300a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	e00c      	b.n	8003024 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	43da      	mvns	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	429a      	cmp	r2, r3
 8003028:	d093      	beq.n	8002f52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003042:	e071      	b.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003052:	d123      	bne.n	800309c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800306c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0204 	orr.w	r2, r3, #4
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e067      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d041      	beq.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a4:	f7fe fc6e 	bl	8001984 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d302      	bcc.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d136      	bne.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10c      	bne.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e00b      	b.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e021      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10c      	bne.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	43da      	mvns	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4013      	ands	r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e00b      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4013      	ands	r3, r2
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f af6d 	bne.w	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003180:	e034      	b.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f8e3 	bl	800334e <I2C_IsAcknowledgeFailed>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e034      	b.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d028      	beq.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe fbf3 	bl	8001984 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11d      	bne.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b80      	cmp	r3, #128	; 0x80
 80031bc:	d016      	beq.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e007      	b.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b80      	cmp	r3, #128	; 0x80
 80031f8:	d1c3      	bne.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003210:	e034      	b.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f89b 	bl	800334e <I2C_IsAcknowledgeFailed>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e034      	b.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d028      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7fe fbab 	bl	8001984 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d11d      	bne.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d016      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e007      	b.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b04      	cmp	r3, #4
 8003288:	d1c3      	bne.n	8003212 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032a0:	e049      	b.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d119      	bne.n	80032e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0210 	mvn.w	r2, #16
 80032b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e030      	b.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7fe fb4e 	bl	8001984 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d11d      	bne.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d016      	beq.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f043 0220 	orr.w	r2, r3, #32
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e007      	b.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d1ae      	bne.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003364:	d11b      	bne.n	800339e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800336e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f043 0204 	orr.w	r2, r3, #4
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e272      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8087 	beq.w	80034da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033cc:	4b92      	ldr	r3, [pc, #584]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d00c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033d8:	4b8f      	ldr	r3, [pc, #572]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d112      	bne.n	800340a <HAL_RCC_OscConfig+0x5e>
 80033e4:	4b8c      	ldr	r3, [pc, #560]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f0:	d10b      	bne.n	800340a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f2:	4b89      	ldr	r3, [pc, #548]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d06c      	beq.n	80034d8 <HAL_RCC_OscConfig+0x12c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d168      	bne.n	80034d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e24c      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x76>
 8003414:	4b80      	ldr	r3, [pc, #512]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a7f      	ldr	r2, [pc, #508]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800341a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	e02e      	b.n	8003480 <HAL_RCC_OscConfig+0xd4>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x98>
 800342a:	4b7b      	ldr	r3, [pc, #492]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a7a      	ldr	r2, [pc, #488]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b78      	ldr	r3, [pc, #480]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a77      	ldr	r2, [pc, #476]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800343c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e01d      	b.n	8003480 <HAL_RCC_OscConfig+0xd4>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0xbc>
 800344e:	4b72      	ldr	r3, [pc, #456]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a71      	ldr	r2, [pc, #452]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6e      	ldr	r2, [pc, #440]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0xd4>
 8003468:	4b6b      	ldr	r3, [pc, #428]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6a      	ldr	r2, [pc, #424]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800346e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a67      	ldr	r2, [pc, #412]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800347a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d013      	beq.n	80034b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe fa7c 	bl	8001984 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe fa78 	bl	8001984 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e200      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b5d      	ldr	r3, [pc, #372]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0xe4>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fe fa68 	bl	8001984 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fe fa64 	bl	8001984 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1ec      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x10c>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034e6:	4b4c      	ldr	r3, [pc, #304]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034f2:	4b49      	ldr	r3, [pc, #292]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d11c      	bne.n	8003538 <HAL_RCC_OscConfig+0x18c>
 80034fe:	4b46      	ldr	r3, [pc, #280]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d116      	bne.n	8003538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350a:	4b43      	ldr	r3, [pc, #268]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x176>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e1c0      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4939      	ldr	r1, [pc, #228]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	e03a      	b.n	80035ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b36      	ldr	r3, [pc, #216]	; (800361c <HAL_RCC_OscConfig+0x270>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fe fa1d 	bl	8001984 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354e:	f7fe fa19 	bl	8001984 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1a1      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4927      	ldr	r1, [pc, #156]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <HAL_RCC_OscConfig+0x270>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe f9fc 	bl	8001984 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003590:	f7fe f9f8 	bl	8001984 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e180      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d03a      	beq.n	8003630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d019      	beq.n	80035f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c2:	4b17      	ldr	r3, [pc, #92]	; (8003620 <HAL_RCC_OscConfig+0x274>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c8:	f7fe f9dc 	bl	8001984 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d0:	f7fe f9d8 	bl	8001984 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e160      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035ee:	2001      	movs	r0, #1
 80035f0:	f000 faba 	bl	8003b68 <RCC_Delay>
 80035f4:	e01c      	b.n	8003630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <HAL_RCC_OscConfig+0x274>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fc:	f7fe f9c2 	bl	8001984 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003602:	e00f      	b.n	8003624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003604:	f7fe f9be 	bl	8001984 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d908      	bls.n	8003624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e146      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	42420000 	.word	0x42420000
 8003620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	4b92      	ldr	r3, [pc, #584]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1e9      	bne.n	8003604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80a6 	beq.w	800378a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003642:	4b8b      	ldr	r3, [pc, #556]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10d      	bne.n	800366a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	4b88      	ldr	r3, [pc, #544]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4a87      	ldr	r2, [pc, #540]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003658:	61d3      	str	r3, [r2, #28]
 800365a:	4b85      	ldr	r3, [pc, #532]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b82      	ldr	r3, [pc, #520]	; (8003874 <HAL_RCC_OscConfig+0x4c8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d118      	bne.n	80036a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003676:	4b7f      	ldr	r3, [pc, #508]	; (8003874 <HAL_RCC_OscConfig+0x4c8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a7e      	ldr	r2, [pc, #504]	; (8003874 <HAL_RCC_OscConfig+0x4c8>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003682:	f7fe f97f 	bl	8001984 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fe f97b 	bl	8001984 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b64      	cmp	r3, #100	; 0x64
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e103      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	4b75      	ldr	r3, [pc, #468]	; (8003874 <HAL_RCC_OscConfig+0x4c8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x312>
 80036b0:	4b6f      	ldr	r3, [pc, #444]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	4a6e      	ldr	r2, [pc, #440]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	6213      	str	r3, [r2, #32]
 80036bc:	e02d      	b.n	800371a <HAL_RCC_OscConfig+0x36e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x334>
 80036c6:	4b6a      	ldr	r3, [pc, #424]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4a69      	ldr	r2, [pc, #420]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6213      	str	r3, [r2, #32]
 80036d2:	4b67      	ldr	r3, [pc, #412]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	4a66      	ldr	r2, [pc, #408]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	f023 0304 	bic.w	r3, r3, #4
 80036dc:	6213      	str	r3, [r2, #32]
 80036de:	e01c      	b.n	800371a <HAL_RCC_OscConfig+0x36e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	d10c      	bne.n	8003702 <HAL_RCC_OscConfig+0x356>
 80036e8:	4b61      	ldr	r3, [pc, #388]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4a60      	ldr	r2, [pc, #384]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	f043 0304 	orr.w	r3, r3, #4
 80036f2:	6213      	str	r3, [r2, #32]
 80036f4:	4b5e      	ldr	r3, [pc, #376]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4a5d      	ldr	r2, [pc, #372]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6213      	str	r3, [r2, #32]
 8003700:	e00b      	b.n	800371a <HAL_RCC_OscConfig+0x36e>
 8003702:	4b5b      	ldr	r3, [pc, #364]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	4a5a      	ldr	r2, [pc, #360]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	6213      	str	r3, [r2, #32]
 800370e:	4b58      	ldr	r3, [pc, #352]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	4a57      	ldr	r2, [pc, #348]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	f023 0304 	bic.w	r3, r3, #4
 8003718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d015      	beq.n	800374e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003722:	f7fe f92f 	bl	8001984 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fe f92b 	bl	8001984 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e0b1      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003740:	4b4b      	ldr	r3, [pc, #300]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ee      	beq.n	800372a <HAL_RCC_OscConfig+0x37e>
 800374c:	e014      	b.n	8003778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7fe f919 	bl	8001984 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003754:	e00a      	b.n	800376c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003756:	f7fe f915 	bl	8001984 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f241 3288 	movw	r2, #5000	; 0x1388
 8003764:	4293      	cmp	r3, r2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e09b      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376c:	4b40      	ldr	r3, [pc, #256]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ee      	bne.n	8003756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377e:	4b3c      	ldr	r3, [pc, #240]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4a3b      	ldr	r2, [pc, #236]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8087 	beq.w	80038a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003794:	4b36      	ldr	r3, [pc, #216]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	2b08      	cmp	r3, #8
 800379e:	d061      	beq.n	8003864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d146      	bne.n	8003836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a8:	4b33      	ldr	r3, [pc, #204]	; (8003878 <HAL_RCC_OscConfig+0x4cc>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fe f8e9 	bl	8001984 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b6:	f7fe f8e5 	bl	8001984 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e06d      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c8:	4b29      	ldr	r3, [pc, #164]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f0      	bne.n	80037b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037dc:	d108      	bne.n	80037f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	4921      	ldr	r1, [pc, #132]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f0:	4b1f      	ldr	r3, [pc, #124]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a19      	ldr	r1, [r3, #32]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	430b      	orrs	r3, r1
 8003802:	491b      	ldr	r1, [pc, #108]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_RCC_OscConfig+0x4cc>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7fe f8b9 	bl	8001984 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe f8b5 	bl	8001984 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e03d      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x46a>
 8003834:	e035      	b.n	80038a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_RCC_OscConfig+0x4cc>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fe f8a2 	bl	8001984 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe f89e 	bl	8001984 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e026      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x498>
 8003862:	e01e      	b.n	80038a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d107      	bne.n	800387c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e019      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
 8003870:	40021000 	.word	0x40021000
 8003874:	40007000 	.word	0x40007000
 8003878:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_OscConfig+0x500>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	429a      	cmp	r2, r3
 800388e:	d106      	bne.n	800389e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000

080038b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0d0      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c4:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <HAL_RCC_ClockConfig+0x1c0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d910      	bls.n	80038f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b67      	ldr	r3, [pc, #412]	; (8003a70 <HAL_RCC_ClockConfig+0x1c0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 0207 	bic.w	r2, r3, #7
 80038da:	4965      	ldr	r1, [pc, #404]	; (8003a70 <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b63      	ldr	r3, [pc, #396]	; (8003a70 <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0b8      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d020      	beq.n	8003942 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800390c:	4b59      	ldr	r3, [pc, #356]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a58      	ldr	r2, [pc, #352]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003916:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003924:	4b53      	ldr	r3, [pc, #332]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a52      	ldr	r2, [pc, #328]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800392e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003930:	4b50      	ldr	r3, [pc, #320]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	494d      	ldr	r1, [pc, #308]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d040      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d107      	bne.n	8003966 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003956:	4b47      	ldr	r3, [pc, #284]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d115      	bne.n	800398e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e07f      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d107      	bne.n	800397e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396e:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e073      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397e:	4b3d      	ldr	r3, [pc, #244]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e06b      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800398e:	4b39      	ldr	r3, [pc, #228]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f023 0203 	bic.w	r2, r3, #3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4936      	ldr	r1, [pc, #216]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	4313      	orrs	r3, r2
 800399e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a0:	f7fd fff0 	bl	8001984 <HAL_GetTick>
 80039a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a6:	e00a      	b.n	80039be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a8:	f7fd ffec 	bl	8001984 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e053      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039be:	4b2d      	ldr	r3, [pc, #180]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 020c 	and.w	r2, r3, #12
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d1eb      	bne.n	80039a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d0:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <HAL_RCC_ClockConfig+0x1c0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d210      	bcs.n	8003a00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039de:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <HAL_RCC_ClockConfig+0x1c0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 0207 	bic.w	r2, r3, #7
 80039e6:	4922      	ldr	r1, [pc, #136]	; (8003a70 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <HAL_RCC_ClockConfig+0x1c0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e032      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a0c:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4916      	ldr	r1, [pc, #88]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	490e      	ldr	r1, [pc, #56]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a3e:	f000 f821 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 8003a42:	4602      	mov	r2, r0
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	490a      	ldr	r1, [pc, #40]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a50:	5ccb      	ldrb	r3, [r1, r3]
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	4a09      	ldr	r2, [pc, #36]	; (8003a7c <HAL_RCC_ClockConfig+0x1cc>)
 8003a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_RCC_ClockConfig+0x1d0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd ff4e 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40022000 	.word	0x40022000
 8003a74:	40021000 	.word	0x40021000
 8003a78:	0800500c 	.word	0x0800500c
 8003a7c:	20000010 	.word	0x20000010
 8003a80:	20000014 	.word	0x20000014

08003a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d002      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x30>
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_GetSysClockFreq+0x36>
 8003ab2:	e027      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ab4:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ab6:	613b      	str	r3, [r7, #16]
      break;
 8003ab8:	e027      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	0c9b      	lsrs	r3, r3, #18
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ac4:	5cd3      	ldrb	r3, [r2, r3]
 8003ac6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d010      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ad2:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	0c5b      	lsrs	r3, r3, #17
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	4a11      	ldr	r2, [pc, #68]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ade:	5cd3      	ldrb	r3, [r2, r3]
 8003ae0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a0d      	ldr	r2, [pc, #52]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ae6:	fb03 f202 	mul.w	r2, r3, r2
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	e004      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a0c      	ldr	r2, [pc, #48]	; (8003b28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003af8:	fb02 f303 	mul.w	r3, r2, r3
 8003afc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	613b      	str	r3, [r7, #16]
      break;
 8003b02:	e002      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b06:	613b      	str	r3, [r7, #16]
      break;
 8003b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b0a:	693b      	ldr	r3, [r7, #16]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	007a1200 	.word	0x007a1200
 8003b20:	08005024 	.word	0x08005024
 8003b24:	08005034 	.word	0x08005034
 8003b28:	003d0900 	.word	0x003d0900

08003b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b30:	4b02      	ldr	r3, [pc, #8]	; (8003b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b32:	681b      	ldr	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	20000010 	.word	0x20000010

08003b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b44:	f7ff fff2 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	4903      	ldr	r1, [pc, #12]	; (8003b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40021000 	.word	0x40021000
 8003b64:	0800501c 	.word	0x0800501c

08003b68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <RCC_Delay+0x34>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <RCC_Delay+0x38>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	0a5b      	lsrs	r3, r3, #9
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b84:	bf00      	nop
  }
  while (Delay --);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1e5a      	subs	r2, r3, #1
 8003b8a:	60fa      	str	r2, [r7, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f9      	bne.n	8003b84 <RCC_Delay+0x1c>
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	20000010 	.word	0x20000010
 8003ba0:	10624dd3 	.word	0x10624dd3

08003ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e041      	b.n	8003c3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd fd5c 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f000 faa2 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d001      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e03a      	b.n	8003cd2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <HAL_TIM_Base_Start_IT+0x98>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00e      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x58>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c86:	d009      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x58>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a14      	ldr	r2, [pc, #80]	; (8003ce0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x58>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a13      	ldr	r2, [pc, #76]	; (8003ce4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d111      	bne.n	8003cc0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b06      	cmp	r3, #6
 8003cac:	d010      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbe:	e007      	b.n	8003cd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800

08003ce8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6a1a      	ldr	r2, [r3, #32]
 8003d06:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10f      	bne.n	8003d30 <HAL_TIM_Base_Stop_IT+0x48>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a1a      	ldr	r2, [r3, #32]
 8003d16:	f240 4344 	movw	r3, #1092	; 0x444
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <HAL_TIM_Base_Stop_IT+0x48>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d122      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d11b      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0202 	mvn.w	r2, #2
 8003d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f9b4 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003d8c:	e005      	b.n	8003d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f9a7 	bl	80040e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f9b6 	bl	8004106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d122      	bne.n	8003df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d11b      	bne.n	8003df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0204 	mvn.w	r2, #4
 8003dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f98a 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003de0:	e005      	b.n	8003dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f97d 	bl	80040e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f98c 	bl	8004106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d122      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d11b      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0208 	mvn.w	r2, #8
 8003e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f960 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f953 	bl	80040e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f962 	bl	8004106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0210 	mvn.w	r2, #16
 8003e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2208      	movs	r2, #8
 8003e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f936 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f929 	bl	80040e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f938 	bl	8004106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0201 	mvn.w	r2, #1
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd fb00 	bl	80014c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee0:	2b80      	cmp	r3, #128	; 0x80
 8003ee2:	d107      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa7b 	bl	80043ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d10e      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d107      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8fc 	bl	8004118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d10e      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d107      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0220 	mvn.w	r2, #32
 8003f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa46 	bl	80043d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_TIM_ConfigClockSource+0x1c>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e0b4      	b.n	80040da <HAL_TIM_ConfigClockSource+0x186>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa8:	d03e      	beq.n	8004028 <HAL_TIM_ConfigClockSource+0xd4>
 8003faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fae:	f200 8087 	bhi.w	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb6:	f000 8086 	beq.w	80040c6 <HAL_TIM_ConfigClockSource+0x172>
 8003fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbe:	d87f      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc0:	2b70      	cmp	r3, #112	; 0x70
 8003fc2:	d01a      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0xa6>
 8003fc4:	2b70      	cmp	r3, #112	; 0x70
 8003fc6:	d87b      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc8:	2b60      	cmp	r3, #96	; 0x60
 8003fca:	d050      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x11a>
 8003fcc:	2b60      	cmp	r3, #96	; 0x60
 8003fce:	d877      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd0:	2b50      	cmp	r3, #80	; 0x50
 8003fd2:	d03c      	beq.n	800404e <HAL_TIM_ConfigClockSource+0xfa>
 8003fd4:	2b50      	cmp	r3, #80	; 0x50
 8003fd6:	d873      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d058      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x13a>
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	d86f      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b30      	cmp	r3, #48	; 0x30
 8003fe2:	d064      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003fe4:	2b30      	cmp	r3, #48	; 0x30
 8003fe6:	d86b      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d060      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d867      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05c      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d05a      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003ff8:	e062      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800400a:	f000 f968 	bl	80042de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800401c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	609a      	str	r2, [r3, #8]
      break;
 8004026:	e04f      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004038:	f000 f951 	bl	80042de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800404a:	609a      	str	r2, [r3, #8]
      break;
 800404c:	e03c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	461a      	mov	r2, r3
 800405c:	f000 f8c8 	bl	80041f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2150      	movs	r1, #80	; 0x50
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f91f 	bl	80042aa <TIM_ITRx_SetConfig>
      break;
 800406c:	e02c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800407a:	461a      	mov	r2, r3
 800407c:	f000 f8e6 	bl	800424c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2160      	movs	r1, #96	; 0x60
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f90f 	bl	80042aa <TIM_ITRx_SetConfig>
      break;
 800408c:	e01c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	461a      	mov	r2, r3
 800409c:	f000 f8a8 	bl	80041f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2140      	movs	r1, #64	; 0x40
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f8ff 	bl	80042aa <TIM_ITRx_SetConfig>
      break;
 80040ac:	e00c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	4610      	mov	r0, r2
 80040ba:	f000 f8f6 	bl	80042aa <TIM_ITRx_SetConfig>
      break;
 80040be:	e003      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      break;
 80040c4:	e000      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr
	...

0800412c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a29      	ldr	r2, [pc, #164]	; (80041e4 <TIM_Base_SetConfig+0xb8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_Base_SetConfig+0x30>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d007      	beq.n	800415c <TIM_Base_SetConfig+0x30>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a26      	ldr	r2, [pc, #152]	; (80041e8 <TIM_Base_SetConfig+0xbc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_Base_SetConfig+0x30>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a25      	ldr	r2, [pc, #148]	; (80041ec <TIM_Base_SetConfig+0xc0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d108      	bne.n	800416e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <TIM_Base_SetConfig+0xb8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00b      	beq.n	800418e <TIM_Base_SetConfig+0x62>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417c:	d007      	beq.n	800418e <TIM_Base_SetConfig+0x62>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <TIM_Base_SetConfig+0xbc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d003      	beq.n	800418e <TIM_Base_SetConfig+0x62>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a18      	ldr	r2, [pc, #96]	; (80041ec <TIM_Base_SetConfig+0xc0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d108      	bne.n	80041a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a07      	ldr	r2, [pc, #28]	; (80041e4 <TIM_Base_SetConfig+0xb8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d103      	bne.n	80041d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	615a      	str	r2, [r3, #20]
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800

080041f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0201 	bic.w	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800421a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f023 030a 	bic.w	r3, r3, #10
 800422c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f023 0210 	bic.w	r2, r3, #16
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	031b      	lsls	r3, r3, #12
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004288:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	621a      	str	r2, [r3, #32]
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr

080042aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f043 0307 	orr.w	r3, r3, #7
 80042cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	609a      	str	r2, [r3, #8]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042de:	b480      	push	{r7}
 80042e0:	b087      	sub	sp, #28
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	021a      	lsls	r2, r3, #8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	431a      	orrs	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4313      	orrs	r3, r2
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	609a      	str	r2, [r3, #8]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004330:	2302      	movs	r3, #2
 8004332:	e046      	b.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a16      	ldr	r2, [pc, #88]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d009      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10c      	bne.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800439c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800

080043d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr

080043fc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af02      	add	r7, sp, #8
 8004402:	4603      	mov	r3, r0
 8004404:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	f023 030f 	bic.w	r3, r3, #15
 800440c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	f043 030c 	orr.w	r3, r3, #12
 800441a:	b2db      	uxtb	r3, r3
 800441c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	f043 0308 	orr.w	r3, r3, #8
 8004424:	b2db      	uxtb	r3, r3
 8004426:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8004428:	7bbb      	ldrb	r3, [r7, #14]
 800442a:	f043 030c 	orr.w	r3, r3, #12
 800442e:	b2db      	uxtb	r3, r3
 8004430:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8004432:	7bbb      	ldrb	r3, [r7, #14]
 8004434:	f043 0308 	orr.w	r3, r3, #8
 8004438:	b2db      	uxtb	r3, r3
 800443a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800443c:	f107 0208 	add.w	r2, r7, #8
 8004440:	2364      	movs	r3, #100	; 0x64
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2304      	movs	r3, #4
 8004446:	214e      	movs	r1, #78	; 0x4e
 8004448:	4803      	ldr	r0, [pc, #12]	; (8004458 <lcd_send_cmd+0x5c>)
 800444a:	f7fd ff19 	bl	8002280 <HAL_I2C_Master_Transmit>
}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	2000008c 	.word	0x2000008c

0800445c <lcd_send_data>:

void lcd_send_data (char data)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af02      	add	r7, sp, #8
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	f023 030f 	bic.w	r3, r3, #15
 800446c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	f043 030d 	orr.w	r3, r3, #13
 800447a:	b2db      	uxtb	r3, r3
 800447c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	f043 0309 	orr.w	r3, r3, #9
 8004484:	b2db      	uxtb	r3, r3
 8004486:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004488:	7bbb      	ldrb	r3, [r7, #14]
 800448a:	f043 030d 	orr.w	r3, r3, #13
 800448e:	b2db      	uxtb	r3, r3
 8004490:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004492:	7bbb      	ldrb	r3, [r7, #14]
 8004494:	f043 0309 	orr.w	r3, r3, #9
 8004498:	b2db      	uxtb	r3, r3
 800449a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800449c:	f107 0208 	add.w	r2, r7, #8
 80044a0:	2364      	movs	r3, #100	; 0x64
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	2304      	movs	r3, #4
 80044a6:	214e      	movs	r1, #78	; 0x4e
 80044a8:	4803      	ldr	r0, [pc, #12]	; (80044b8 <lcd_send_data+0x5c>)
 80044aa:	f7fd fee9 	bl	8002280 <HAL_I2C_Master_Transmit>
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	2000008c 	.word	0x2000008c

080044bc <lcd_clear>:

void lcd_clear (void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80044c2:	2080      	movs	r0, #128	; 0x80
 80044c4:	f7ff ff9a 	bl	80043fc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80044c8:	2300      	movs	r3, #0
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	e005      	b.n	80044da <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80044ce:	2020      	movs	r0, #32
 80044d0:	f7ff ffc4 	bl	800445c <lcd_send_data>
	for (int i=0; i<70; i++)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3301      	adds	r3, #1
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b45      	cmp	r3, #69	; 0x45
 80044de:	ddf6      	ble.n	80044ce <lcd_clear+0x12>
	}
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	6039      	str	r1, [r7, #0]
    switch (row)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <lcd_put_cur+0x18>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d005      	beq.n	800450c <lcd_put_cur+0x22>
 8004500:	e009      	b.n	8004516 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004508:	603b      	str	r3, [r7, #0]
            break;
 800450a:	e004      	b.n	8004516 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004512:	603b      	str	r3, [r7, #0]
            break;
 8004514:	bf00      	nop
    }

    lcd_send_cmd (col);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ff6e 	bl	80043fc <lcd_send_cmd>
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <lcd_init>:


void lcd_init (void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800452c:	2032      	movs	r0, #50	; 0x32
 800452e:	f7fd fa33 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x30);
 8004532:	2030      	movs	r0, #48	; 0x30
 8004534:	f7ff ff62 	bl	80043fc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8004538:	2005      	movs	r0, #5
 800453a:	f7fd fa2d 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x30);
 800453e:	2030      	movs	r0, #48	; 0x30
 8004540:	f7ff ff5c 	bl	80043fc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8004544:	2001      	movs	r0, #1
 8004546:	f7fd fa27 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x30);
 800454a:	2030      	movs	r0, #48	; 0x30
 800454c:	f7ff ff56 	bl	80043fc <lcd_send_cmd>
	HAL_Delay(10);
 8004550:	200a      	movs	r0, #10
 8004552:	f7fd fa21 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8004556:	2020      	movs	r0, #32
 8004558:	f7ff ff50 	bl	80043fc <lcd_send_cmd>
	HAL_Delay(10);
 800455c:	200a      	movs	r0, #10
 800455e:	f7fd fa1b 	bl	8001998 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8004562:	2028      	movs	r0, #40	; 0x28
 8004564:	f7ff ff4a 	bl	80043fc <lcd_send_cmd>
	HAL_Delay(1);
 8004568:	2001      	movs	r0, #1
 800456a:	f7fd fa15 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800456e:	2008      	movs	r0, #8
 8004570:	f7ff ff44 	bl	80043fc <lcd_send_cmd>
	HAL_Delay(1);
 8004574:	2001      	movs	r0, #1
 8004576:	f7fd fa0f 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800457a:	2001      	movs	r0, #1
 800457c:	f7ff ff3e 	bl	80043fc <lcd_send_cmd>
	HAL_Delay(1);
 8004580:	2001      	movs	r0, #1
 8004582:	f7fd fa09 	bl	8001998 <HAL_Delay>
	HAL_Delay(1);
 8004586:	2001      	movs	r0, #1
 8004588:	f7fd fa06 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800458c:	2006      	movs	r0, #6
 800458e:	f7ff ff35 	bl	80043fc <lcd_send_cmd>
	HAL_Delay(1);
 8004592:	2001      	movs	r0, #1
 8004594:	f7fd fa00 	bl	8001998 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8004598:	200c      	movs	r0, #12
 800459a:	f7ff ff2f 	bl	80043fc <lcd_send_cmd>
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80045aa:	e006      	b.n	80045ba <lcd_send_string+0x18>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff ff51 	bl	800445c <lcd_send_data>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f4      	bne.n	80045ac <lcd_send_string+0xa>
}
 80045c2:	bf00      	nop
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <siprintf>:
 80045cc:	b40e      	push	{r1, r2, r3}
 80045ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045d2:	b500      	push	{lr}
 80045d4:	b09c      	sub	sp, #112	; 0x70
 80045d6:	ab1d      	add	r3, sp, #116	; 0x74
 80045d8:	9002      	str	r0, [sp, #8]
 80045da:	9006      	str	r0, [sp, #24]
 80045dc:	9107      	str	r1, [sp, #28]
 80045de:	9104      	str	r1, [sp, #16]
 80045e0:	4808      	ldr	r0, [pc, #32]	; (8004604 <siprintf+0x38>)
 80045e2:	4909      	ldr	r1, [pc, #36]	; (8004608 <siprintf+0x3c>)
 80045e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045e8:	9105      	str	r1, [sp, #20]
 80045ea:	6800      	ldr	r0, [r0, #0]
 80045ec:	a902      	add	r1, sp, #8
 80045ee:	9301      	str	r3, [sp, #4]
 80045f0:	f000 f98e 	bl	8004910 <_svfiprintf_r>
 80045f4:	2200      	movs	r2, #0
 80045f6:	9b02      	ldr	r3, [sp, #8]
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	b01c      	add	sp, #112	; 0x70
 80045fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004600:	b003      	add	sp, #12
 8004602:	4770      	bx	lr
 8004604:	20000068 	.word	0x20000068
 8004608:	ffff0208 	.word	0xffff0208

0800460c <memset>:
 800460c:	4603      	mov	r3, r0
 800460e:	4402      	add	r2, r0
 8004610:	4293      	cmp	r3, r2
 8004612:	d100      	bne.n	8004616 <memset+0xa>
 8004614:	4770      	bx	lr
 8004616:	f803 1b01 	strb.w	r1, [r3], #1
 800461a:	e7f9      	b.n	8004610 <memset+0x4>

0800461c <__errno>:
 800461c:	4b01      	ldr	r3, [pc, #4]	; (8004624 <__errno+0x8>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000068 	.word	0x20000068

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	2600      	movs	r6, #0
 800462c:	4d0c      	ldr	r5, [pc, #48]	; (8004660 <__libc_init_array+0x38>)
 800462e:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <__libc_init_array+0x3c>)
 8004630:	1b64      	subs	r4, r4, r5
 8004632:	10a4      	asrs	r4, r4, #2
 8004634:	42a6      	cmp	r6, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	f000 fc7a 	bl	8004f30 <_init>
 800463c:	2600      	movs	r6, #0
 800463e:	4d0a      	ldr	r5, [pc, #40]	; (8004668 <__libc_init_array+0x40>)
 8004640:	4c0a      	ldr	r4, [pc, #40]	; (800466c <__libc_init_array+0x44>)
 8004642:	1b64      	subs	r4, r4, r5
 8004644:	10a4      	asrs	r4, r4, #2
 8004646:	42a6      	cmp	r6, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004650:	4798      	blx	r3
 8004652:	3601      	adds	r6, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f855 3b04 	ldr.w	r3, [r5], #4
 800465a:	4798      	blx	r3
 800465c:	3601      	adds	r6, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	0800506c 	.word	0x0800506c
 8004664:	0800506c 	.word	0x0800506c
 8004668:	0800506c 	.word	0x0800506c
 800466c:	08005070 	.word	0x08005070

08004670 <__retarget_lock_acquire_recursive>:
 8004670:	4770      	bx	lr

08004672 <__retarget_lock_release_recursive>:
 8004672:	4770      	bx	lr

08004674 <_free_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4605      	mov	r5, r0
 8004678:	2900      	cmp	r1, #0
 800467a:	d040      	beq.n	80046fe <_free_r+0x8a>
 800467c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004680:	1f0c      	subs	r4, r1, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	bfb8      	it	lt
 8004686:	18e4      	addlt	r4, r4, r3
 8004688:	f000 f8dc 	bl	8004844 <__malloc_lock>
 800468c:	4a1c      	ldr	r2, [pc, #112]	; (8004700 <_free_r+0x8c>)
 800468e:	6813      	ldr	r3, [r2, #0]
 8004690:	b933      	cbnz	r3, 80046a0 <_free_r+0x2c>
 8004692:	6063      	str	r3, [r4, #4]
 8004694:	6014      	str	r4, [r2, #0]
 8004696:	4628      	mov	r0, r5
 8004698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800469c:	f000 b8d8 	b.w	8004850 <__malloc_unlock>
 80046a0:	42a3      	cmp	r3, r4
 80046a2:	d908      	bls.n	80046b6 <_free_r+0x42>
 80046a4:	6820      	ldr	r0, [r4, #0]
 80046a6:	1821      	adds	r1, r4, r0
 80046a8:	428b      	cmp	r3, r1
 80046aa:	bf01      	itttt	eq
 80046ac:	6819      	ldreq	r1, [r3, #0]
 80046ae:	685b      	ldreq	r3, [r3, #4]
 80046b0:	1809      	addeq	r1, r1, r0
 80046b2:	6021      	streq	r1, [r4, #0]
 80046b4:	e7ed      	b.n	8004692 <_free_r+0x1e>
 80046b6:	461a      	mov	r2, r3
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	b10b      	cbz	r3, 80046c0 <_free_r+0x4c>
 80046bc:	42a3      	cmp	r3, r4
 80046be:	d9fa      	bls.n	80046b6 <_free_r+0x42>
 80046c0:	6811      	ldr	r1, [r2, #0]
 80046c2:	1850      	adds	r0, r2, r1
 80046c4:	42a0      	cmp	r0, r4
 80046c6:	d10b      	bne.n	80046e0 <_free_r+0x6c>
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	4401      	add	r1, r0
 80046cc:	1850      	adds	r0, r2, r1
 80046ce:	4283      	cmp	r3, r0
 80046d0:	6011      	str	r1, [r2, #0]
 80046d2:	d1e0      	bne.n	8004696 <_free_r+0x22>
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	4408      	add	r0, r1
 80046da:	6010      	str	r0, [r2, #0]
 80046dc:	6053      	str	r3, [r2, #4]
 80046de:	e7da      	b.n	8004696 <_free_r+0x22>
 80046e0:	d902      	bls.n	80046e8 <_free_r+0x74>
 80046e2:	230c      	movs	r3, #12
 80046e4:	602b      	str	r3, [r5, #0]
 80046e6:	e7d6      	b.n	8004696 <_free_r+0x22>
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	1821      	adds	r1, r4, r0
 80046ec:	428b      	cmp	r3, r1
 80046ee:	bf01      	itttt	eq
 80046f0:	6819      	ldreq	r1, [r3, #0]
 80046f2:	685b      	ldreq	r3, [r3, #4]
 80046f4:	1809      	addeq	r1, r1, r0
 80046f6:	6021      	streq	r1, [r4, #0]
 80046f8:	6063      	str	r3, [r4, #4]
 80046fa:	6054      	str	r4, [r2, #4]
 80046fc:	e7cb      	b.n	8004696 <_free_r+0x22>
 80046fe:	bd38      	pop	{r3, r4, r5, pc}
 8004700:	20000478 	.word	0x20000478

08004704 <sbrk_aligned>:
 8004704:	b570      	push	{r4, r5, r6, lr}
 8004706:	4e0e      	ldr	r6, [pc, #56]	; (8004740 <sbrk_aligned+0x3c>)
 8004708:	460c      	mov	r4, r1
 800470a:	6831      	ldr	r1, [r6, #0]
 800470c:	4605      	mov	r5, r0
 800470e:	b911      	cbnz	r1, 8004716 <sbrk_aligned+0x12>
 8004710:	f000 fbaa 	bl	8004e68 <_sbrk_r>
 8004714:	6030      	str	r0, [r6, #0]
 8004716:	4621      	mov	r1, r4
 8004718:	4628      	mov	r0, r5
 800471a:	f000 fba5 	bl	8004e68 <_sbrk_r>
 800471e:	1c43      	adds	r3, r0, #1
 8004720:	d00a      	beq.n	8004738 <sbrk_aligned+0x34>
 8004722:	1cc4      	adds	r4, r0, #3
 8004724:	f024 0403 	bic.w	r4, r4, #3
 8004728:	42a0      	cmp	r0, r4
 800472a:	d007      	beq.n	800473c <sbrk_aligned+0x38>
 800472c:	1a21      	subs	r1, r4, r0
 800472e:	4628      	mov	r0, r5
 8004730:	f000 fb9a 	bl	8004e68 <_sbrk_r>
 8004734:	3001      	adds	r0, #1
 8004736:	d101      	bne.n	800473c <sbrk_aligned+0x38>
 8004738:	f04f 34ff 	mov.w	r4, #4294967295
 800473c:	4620      	mov	r0, r4
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	2000047c 	.word	0x2000047c

08004744 <_malloc_r>:
 8004744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004748:	1ccd      	adds	r5, r1, #3
 800474a:	f025 0503 	bic.w	r5, r5, #3
 800474e:	3508      	adds	r5, #8
 8004750:	2d0c      	cmp	r5, #12
 8004752:	bf38      	it	cc
 8004754:	250c      	movcc	r5, #12
 8004756:	2d00      	cmp	r5, #0
 8004758:	4607      	mov	r7, r0
 800475a:	db01      	blt.n	8004760 <_malloc_r+0x1c>
 800475c:	42a9      	cmp	r1, r5
 800475e:	d905      	bls.n	800476c <_malloc_r+0x28>
 8004760:	230c      	movs	r3, #12
 8004762:	2600      	movs	r6, #0
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4630      	mov	r0, r6
 8004768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800476c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004840 <_malloc_r+0xfc>
 8004770:	f000 f868 	bl	8004844 <__malloc_lock>
 8004774:	f8d8 3000 	ldr.w	r3, [r8]
 8004778:	461c      	mov	r4, r3
 800477a:	bb5c      	cbnz	r4, 80047d4 <_malloc_r+0x90>
 800477c:	4629      	mov	r1, r5
 800477e:	4638      	mov	r0, r7
 8004780:	f7ff ffc0 	bl	8004704 <sbrk_aligned>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	4604      	mov	r4, r0
 8004788:	d155      	bne.n	8004836 <_malloc_r+0xf2>
 800478a:	f8d8 4000 	ldr.w	r4, [r8]
 800478e:	4626      	mov	r6, r4
 8004790:	2e00      	cmp	r6, #0
 8004792:	d145      	bne.n	8004820 <_malloc_r+0xdc>
 8004794:	2c00      	cmp	r4, #0
 8004796:	d048      	beq.n	800482a <_malloc_r+0xe6>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	4631      	mov	r1, r6
 800479c:	4638      	mov	r0, r7
 800479e:	eb04 0903 	add.w	r9, r4, r3
 80047a2:	f000 fb61 	bl	8004e68 <_sbrk_r>
 80047a6:	4581      	cmp	r9, r0
 80047a8:	d13f      	bne.n	800482a <_malloc_r+0xe6>
 80047aa:	6821      	ldr	r1, [r4, #0]
 80047ac:	4638      	mov	r0, r7
 80047ae:	1a6d      	subs	r5, r5, r1
 80047b0:	4629      	mov	r1, r5
 80047b2:	f7ff ffa7 	bl	8004704 <sbrk_aligned>
 80047b6:	3001      	adds	r0, #1
 80047b8:	d037      	beq.n	800482a <_malloc_r+0xe6>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	442b      	add	r3, r5
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	f8d8 3000 	ldr.w	r3, [r8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d038      	beq.n	800483a <_malloc_r+0xf6>
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	42a2      	cmp	r2, r4
 80047cc:	d12b      	bne.n	8004826 <_malloc_r+0xe2>
 80047ce:	2200      	movs	r2, #0
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	e00f      	b.n	80047f4 <_malloc_r+0xb0>
 80047d4:	6822      	ldr	r2, [r4, #0]
 80047d6:	1b52      	subs	r2, r2, r5
 80047d8:	d41f      	bmi.n	800481a <_malloc_r+0xd6>
 80047da:	2a0b      	cmp	r2, #11
 80047dc:	d917      	bls.n	800480e <_malloc_r+0xca>
 80047de:	1961      	adds	r1, r4, r5
 80047e0:	42a3      	cmp	r3, r4
 80047e2:	6025      	str	r5, [r4, #0]
 80047e4:	bf18      	it	ne
 80047e6:	6059      	strne	r1, [r3, #4]
 80047e8:	6863      	ldr	r3, [r4, #4]
 80047ea:	bf08      	it	eq
 80047ec:	f8c8 1000 	streq.w	r1, [r8]
 80047f0:	5162      	str	r2, [r4, r5]
 80047f2:	604b      	str	r3, [r1, #4]
 80047f4:	4638      	mov	r0, r7
 80047f6:	f104 060b 	add.w	r6, r4, #11
 80047fa:	f000 f829 	bl	8004850 <__malloc_unlock>
 80047fe:	f026 0607 	bic.w	r6, r6, #7
 8004802:	1d23      	adds	r3, r4, #4
 8004804:	1af2      	subs	r2, r6, r3
 8004806:	d0ae      	beq.n	8004766 <_malloc_r+0x22>
 8004808:	1b9b      	subs	r3, r3, r6
 800480a:	50a3      	str	r3, [r4, r2]
 800480c:	e7ab      	b.n	8004766 <_malloc_r+0x22>
 800480e:	42a3      	cmp	r3, r4
 8004810:	6862      	ldr	r2, [r4, #4]
 8004812:	d1dd      	bne.n	80047d0 <_malloc_r+0x8c>
 8004814:	f8c8 2000 	str.w	r2, [r8]
 8004818:	e7ec      	b.n	80047f4 <_malloc_r+0xb0>
 800481a:	4623      	mov	r3, r4
 800481c:	6864      	ldr	r4, [r4, #4]
 800481e:	e7ac      	b.n	800477a <_malloc_r+0x36>
 8004820:	4634      	mov	r4, r6
 8004822:	6876      	ldr	r6, [r6, #4]
 8004824:	e7b4      	b.n	8004790 <_malloc_r+0x4c>
 8004826:	4613      	mov	r3, r2
 8004828:	e7cc      	b.n	80047c4 <_malloc_r+0x80>
 800482a:	230c      	movs	r3, #12
 800482c:	4638      	mov	r0, r7
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	f000 f80e 	bl	8004850 <__malloc_unlock>
 8004834:	e797      	b.n	8004766 <_malloc_r+0x22>
 8004836:	6025      	str	r5, [r4, #0]
 8004838:	e7dc      	b.n	80047f4 <_malloc_r+0xb0>
 800483a:	605b      	str	r3, [r3, #4]
 800483c:	deff      	udf	#255	; 0xff
 800483e:	bf00      	nop
 8004840:	20000478 	.word	0x20000478

08004844 <__malloc_lock>:
 8004844:	4801      	ldr	r0, [pc, #4]	; (800484c <__malloc_lock+0x8>)
 8004846:	f7ff bf13 	b.w	8004670 <__retarget_lock_acquire_recursive>
 800484a:	bf00      	nop
 800484c:	20000474 	.word	0x20000474

08004850 <__malloc_unlock>:
 8004850:	4801      	ldr	r0, [pc, #4]	; (8004858 <__malloc_unlock+0x8>)
 8004852:	f7ff bf0e 	b.w	8004672 <__retarget_lock_release_recursive>
 8004856:	bf00      	nop
 8004858:	20000474 	.word	0x20000474

0800485c <__ssputs_r>:
 800485c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004860:	461f      	mov	r7, r3
 8004862:	688e      	ldr	r6, [r1, #8]
 8004864:	4682      	mov	sl, r0
 8004866:	42be      	cmp	r6, r7
 8004868:	460c      	mov	r4, r1
 800486a:	4690      	mov	r8, r2
 800486c:	680b      	ldr	r3, [r1, #0]
 800486e:	d82c      	bhi.n	80048ca <__ssputs_r+0x6e>
 8004870:	898a      	ldrh	r2, [r1, #12]
 8004872:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004876:	d026      	beq.n	80048c6 <__ssputs_r+0x6a>
 8004878:	6965      	ldr	r5, [r4, #20]
 800487a:	6909      	ldr	r1, [r1, #16]
 800487c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004880:	eba3 0901 	sub.w	r9, r3, r1
 8004884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004888:	1c7b      	adds	r3, r7, #1
 800488a:	444b      	add	r3, r9
 800488c:	106d      	asrs	r5, r5, #1
 800488e:	429d      	cmp	r5, r3
 8004890:	bf38      	it	cc
 8004892:	461d      	movcc	r5, r3
 8004894:	0553      	lsls	r3, r2, #21
 8004896:	d527      	bpl.n	80048e8 <__ssputs_r+0x8c>
 8004898:	4629      	mov	r1, r5
 800489a:	f7ff ff53 	bl	8004744 <_malloc_r>
 800489e:	4606      	mov	r6, r0
 80048a0:	b360      	cbz	r0, 80048fc <__ssputs_r+0xa0>
 80048a2:	464a      	mov	r2, r9
 80048a4:	6921      	ldr	r1, [r4, #16]
 80048a6:	f000 fafd 	bl	8004ea4 <memcpy>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b4:	81a3      	strh	r3, [r4, #12]
 80048b6:	6126      	str	r6, [r4, #16]
 80048b8:	444e      	add	r6, r9
 80048ba:	6026      	str	r6, [r4, #0]
 80048bc:	463e      	mov	r6, r7
 80048be:	6165      	str	r5, [r4, #20]
 80048c0:	eba5 0509 	sub.w	r5, r5, r9
 80048c4:	60a5      	str	r5, [r4, #8]
 80048c6:	42be      	cmp	r6, r7
 80048c8:	d900      	bls.n	80048cc <__ssputs_r+0x70>
 80048ca:	463e      	mov	r6, r7
 80048cc:	4632      	mov	r2, r6
 80048ce:	4641      	mov	r1, r8
 80048d0:	6820      	ldr	r0, [r4, #0]
 80048d2:	f000 faaf 	bl	8004e34 <memmove>
 80048d6:	2000      	movs	r0, #0
 80048d8:	68a3      	ldr	r3, [r4, #8]
 80048da:	1b9b      	subs	r3, r3, r6
 80048dc:	60a3      	str	r3, [r4, #8]
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	4433      	add	r3, r6
 80048e2:	6023      	str	r3, [r4, #0]
 80048e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e8:	462a      	mov	r2, r5
 80048ea:	f000 fae9 	bl	8004ec0 <_realloc_r>
 80048ee:	4606      	mov	r6, r0
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d1e0      	bne.n	80048b6 <__ssputs_r+0x5a>
 80048f4:	4650      	mov	r0, sl
 80048f6:	6921      	ldr	r1, [r4, #16]
 80048f8:	f7ff febc 	bl	8004674 <_free_r>
 80048fc:	230c      	movs	r3, #12
 80048fe:	f8ca 3000 	str.w	r3, [sl]
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800490c:	81a3      	strh	r3, [r4, #12]
 800490e:	e7e9      	b.n	80048e4 <__ssputs_r+0x88>

08004910 <_svfiprintf_r>:
 8004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	4698      	mov	r8, r3
 8004916:	898b      	ldrh	r3, [r1, #12]
 8004918:	4607      	mov	r7, r0
 800491a:	061b      	lsls	r3, r3, #24
 800491c:	460d      	mov	r5, r1
 800491e:	4614      	mov	r4, r2
 8004920:	b09d      	sub	sp, #116	; 0x74
 8004922:	d50e      	bpl.n	8004942 <_svfiprintf_r+0x32>
 8004924:	690b      	ldr	r3, [r1, #16]
 8004926:	b963      	cbnz	r3, 8004942 <_svfiprintf_r+0x32>
 8004928:	2140      	movs	r1, #64	; 0x40
 800492a:	f7ff ff0b 	bl	8004744 <_malloc_r>
 800492e:	6028      	str	r0, [r5, #0]
 8004930:	6128      	str	r0, [r5, #16]
 8004932:	b920      	cbnz	r0, 800493e <_svfiprintf_r+0x2e>
 8004934:	230c      	movs	r3, #12
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	f04f 30ff 	mov.w	r0, #4294967295
 800493c:	e0d0      	b.n	8004ae0 <_svfiprintf_r+0x1d0>
 800493e:	2340      	movs	r3, #64	; 0x40
 8004940:	616b      	str	r3, [r5, #20]
 8004942:	2300      	movs	r3, #0
 8004944:	9309      	str	r3, [sp, #36]	; 0x24
 8004946:	2320      	movs	r3, #32
 8004948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800494c:	2330      	movs	r3, #48	; 0x30
 800494e:	f04f 0901 	mov.w	r9, #1
 8004952:	f8cd 800c 	str.w	r8, [sp, #12]
 8004956:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004af8 <_svfiprintf_r+0x1e8>
 800495a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800495e:	4623      	mov	r3, r4
 8004960:	469a      	mov	sl, r3
 8004962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004966:	b10a      	cbz	r2, 800496c <_svfiprintf_r+0x5c>
 8004968:	2a25      	cmp	r2, #37	; 0x25
 800496a:	d1f9      	bne.n	8004960 <_svfiprintf_r+0x50>
 800496c:	ebba 0b04 	subs.w	fp, sl, r4
 8004970:	d00b      	beq.n	800498a <_svfiprintf_r+0x7a>
 8004972:	465b      	mov	r3, fp
 8004974:	4622      	mov	r2, r4
 8004976:	4629      	mov	r1, r5
 8004978:	4638      	mov	r0, r7
 800497a:	f7ff ff6f 	bl	800485c <__ssputs_r>
 800497e:	3001      	adds	r0, #1
 8004980:	f000 80a9 	beq.w	8004ad6 <_svfiprintf_r+0x1c6>
 8004984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004986:	445a      	add	r2, fp
 8004988:	9209      	str	r2, [sp, #36]	; 0x24
 800498a:	f89a 3000 	ldrb.w	r3, [sl]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 80a1 	beq.w	8004ad6 <_svfiprintf_r+0x1c6>
 8004994:	2300      	movs	r3, #0
 8004996:	f04f 32ff 	mov.w	r2, #4294967295
 800499a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800499e:	f10a 0a01 	add.w	sl, sl, #1
 80049a2:	9304      	str	r3, [sp, #16]
 80049a4:	9307      	str	r3, [sp, #28]
 80049a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049aa:	931a      	str	r3, [sp, #104]	; 0x68
 80049ac:	4654      	mov	r4, sl
 80049ae:	2205      	movs	r2, #5
 80049b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b4:	4850      	ldr	r0, [pc, #320]	; (8004af8 <_svfiprintf_r+0x1e8>)
 80049b6:	f000 fa67 	bl	8004e88 <memchr>
 80049ba:	9a04      	ldr	r2, [sp, #16]
 80049bc:	b9d8      	cbnz	r0, 80049f6 <_svfiprintf_r+0xe6>
 80049be:	06d0      	lsls	r0, r2, #27
 80049c0:	bf44      	itt	mi
 80049c2:	2320      	movmi	r3, #32
 80049c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c8:	0711      	lsls	r1, r2, #28
 80049ca:	bf44      	itt	mi
 80049cc:	232b      	movmi	r3, #43	; 0x2b
 80049ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049d2:	f89a 3000 	ldrb.w	r3, [sl]
 80049d6:	2b2a      	cmp	r3, #42	; 0x2a
 80049d8:	d015      	beq.n	8004a06 <_svfiprintf_r+0xf6>
 80049da:	4654      	mov	r4, sl
 80049dc:	2000      	movs	r0, #0
 80049de:	f04f 0c0a 	mov.w	ip, #10
 80049e2:	9a07      	ldr	r2, [sp, #28]
 80049e4:	4621      	mov	r1, r4
 80049e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049ea:	3b30      	subs	r3, #48	; 0x30
 80049ec:	2b09      	cmp	r3, #9
 80049ee:	d94d      	bls.n	8004a8c <_svfiprintf_r+0x17c>
 80049f0:	b1b0      	cbz	r0, 8004a20 <_svfiprintf_r+0x110>
 80049f2:	9207      	str	r2, [sp, #28]
 80049f4:	e014      	b.n	8004a20 <_svfiprintf_r+0x110>
 80049f6:	eba0 0308 	sub.w	r3, r0, r8
 80049fa:	fa09 f303 	lsl.w	r3, r9, r3
 80049fe:	4313      	orrs	r3, r2
 8004a00:	46a2      	mov	sl, r4
 8004a02:	9304      	str	r3, [sp, #16]
 8004a04:	e7d2      	b.n	80049ac <_svfiprintf_r+0x9c>
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	1d19      	adds	r1, r3, #4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	9103      	str	r1, [sp, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bfbb      	ittet	lt
 8004a12:	425b      	neglt	r3, r3
 8004a14:	f042 0202 	orrlt.w	r2, r2, #2
 8004a18:	9307      	strge	r3, [sp, #28]
 8004a1a:	9307      	strlt	r3, [sp, #28]
 8004a1c:	bfb8      	it	lt
 8004a1e:	9204      	strlt	r2, [sp, #16]
 8004a20:	7823      	ldrb	r3, [r4, #0]
 8004a22:	2b2e      	cmp	r3, #46	; 0x2e
 8004a24:	d10c      	bne.n	8004a40 <_svfiprintf_r+0x130>
 8004a26:	7863      	ldrb	r3, [r4, #1]
 8004a28:	2b2a      	cmp	r3, #42	; 0x2a
 8004a2a:	d134      	bne.n	8004a96 <_svfiprintf_r+0x186>
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	3402      	adds	r4, #2
 8004a30:	1d1a      	adds	r2, r3, #4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	9203      	str	r2, [sp, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bfb8      	it	lt
 8004a3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a3e:	9305      	str	r3, [sp, #20]
 8004a40:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004afc <_svfiprintf_r+0x1ec>
 8004a44:	2203      	movs	r2, #3
 8004a46:	4650      	mov	r0, sl
 8004a48:	7821      	ldrb	r1, [r4, #0]
 8004a4a:	f000 fa1d 	bl	8004e88 <memchr>
 8004a4e:	b138      	cbz	r0, 8004a60 <_svfiprintf_r+0x150>
 8004a50:	2240      	movs	r2, #64	; 0x40
 8004a52:	9b04      	ldr	r3, [sp, #16]
 8004a54:	eba0 000a 	sub.w	r0, r0, sl
 8004a58:	4082      	lsls	r2, r0
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	3401      	adds	r4, #1
 8004a5e:	9304      	str	r3, [sp, #16]
 8004a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a64:	2206      	movs	r2, #6
 8004a66:	4826      	ldr	r0, [pc, #152]	; (8004b00 <_svfiprintf_r+0x1f0>)
 8004a68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a6c:	f000 fa0c 	bl	8004e88 <memchr>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d038      	beq.n	8004ae6 <_svfiprintf_r+0x1d6>
 8004a74:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <_svfiprintf_r+0x1f4>)
 8004a76:	bb1b      	cbnz	r3, 8004ac0 <_svfiprintf_r+0x1b0>
 8004a78:	9b03      	ldr	r3, [sp, #12]
 8004a7a:	3307      	adds	r3, #7
 8004a7c:	f023 0307 	bic.w	r3, r3, #7
 8004a80:	3308      	adds	r3, #8
 8004a82:	9303      	str	r3, [sp, #12]
 8004a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a86:	4433      	add	r3, r6
 8004a88:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8a:	e768      	b.n	800495e <_svfiprintf_r+0x4e>
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	2001      	movs	r0, #1
 8004a90:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a94:	e7a6      	b.n	80049e4 <_svfiprintf_r+0xd4>
 8004a96:	2300      	movs	r3, #0
 8004a98:	f04f 0c0a 	mov.w	ip, #10
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	3401      	adds	r4, #1
 8004aa0:	9305      	str	r3, [sp, #20]
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aa8:	3a30      	subs	r2, #48	; 0x30
 8004aaa:	2a09      	cmp	r2, #9
 8004aac:	d903      	bls.n	8004ab6 <_svfiprintf_r+0x1a6>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0c6      	beq.n	8004a40 <_svfiprintf_r+0x130>
 8004ab2:	9105      	str	r1, [sp, #20]
 8004ab4:	e7c4      	b.n	8004a40 <_svfiprintf_r+0x130>
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	2301      	movs	r3, #1
 8004aba:	fb0c 2101 	mla	r1, ip, r1, r2
 8004abe:	e7f0      	b.n	8004aa2 <_svfiprintf_r+0x192>
 8004ac0:	ab03      	add	r3, sp, #12
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	462a      	mov	r2, r5
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <_svfiprintf_r+0x1f8>)
 8004aca:	a904      	add	r1, sp, #16
 8004acc:	f3af 8000 	nop.w
 8004ad0:	1c42      	adds	r2, r0, #1
 8004ad2:	4606      	mov	r6, r0
 8004ad4:	d1d6      	bne.n	8004a84 <_svfiprintf_r+0x174>
 8004ad6:	89ab      	ldrh	r3, [r5, #12]
 8004ad8:	065b      	lsls	r3, r3, #25
 8004ada:	f53f af2d 	bmi.w	8004938 <_svfiprintf_r+0x28>
 8004ade:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ae0:	b01d      	add	sp, #116	; 0x74
 8004ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae6:	ab03      	add	r3, sp, #12
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	462a      	mov	r2, r5
 8004aec:	4638      	mov	r0, r7
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <_svfiprintf_r+0x1f8>)
 8004af0:	a904      	add	r1, sp, #16
 8004af2:	f000 f87d 	bl	8004bf0 <_printf_i>
 8004af6:	e7eb      	b.n	8004ad0 <_svfiprintf_r+0x1c0>
 8004af8:	08005036 	.word	0x08005036
 8004afc:	0800503c 	.word	0x0800503c
 8004b00:	08005040 	.word	0x08005040
 8004b04:	00000000 	.word	0x00000000
 8004b08:	0800485d 	.word	0x0800485d

08004b0c <_printf_common>:
 8004b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	4616      	mov	r6, r2
 8004b12:	4699      	mov	r9, r3
 8004b14:	688a      	ldr	r2, [r1, #8]
 8004b16:	690b      	ldr	r3, [r1, #16]
 8004b18:	4607      	mov	r7, r0
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	bfb8      	it	lt
 8004b1e:	4613      	movlt	r3, r2
 8004b20:	6033      	str	r3, [r6, #0]
 8004b22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b26:	460c      	mov	r4, r1
 8004b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b2c:	b10a      	cbz	r2, 8004b32 <_printf_common+0x26>
 8004b2e:	3301      	adds	r3, #1
 8004b30:	6033      	str	r3, [r6, #0]
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	0699      	lsls	r1, r3, #26
 8004b36:	bf42      	ittt	mi
 8004b38:	6833      	ldrmi	r3, [r6, #0]
 8004b3a:	3302      	addmi	r3, #2
 8004b3c:	6033      	strmi	r3, [r6, #0]
 8004b3e:	6825      	ldr	r5, [r4, #0]
 8004b40:	f015 0506 	ands.w	r5, r5, #6
 8004b44:	d106      	bne.n	8004b54 <_printf_common+0x48>
 8004b46:	f104 0a19 	add.w	sl, r4, #25
 8004b4a:	68e3      	ldr	r3, [r4, #12]
 8004b4c:	6832      	ldr	r2, [r6, #0]
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	42ab      	cmp	r3, r5
 8004b52:	dc2b      	bgt.n	8004bac <_printf_common+0xa0>
 8004b54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b58:	1e13      	subs	r3, r2, #0
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	bf18      	it	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	0692      	lsls	r2, r2, #26
 8004b62:	d430      	bmi.n	8004bc6 <_printf_common+0xba>
 8004b64:	4649      	mov	r1, r9
 8004b66:	4638      	mov	r0, r7
 8004b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b6c:	47c0      	blx	r8
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d023      	beq.n	8004bba <_printf_common+0xae>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	6922      	ldr	r2, [r4, #16]
 8004b76:	f003 0306 	and.w	r3, r3, #6
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	bf14      	ite	ne
 8004b7e:	2500      	movne	r5, #0
 8004b80:	6833      	ldreq	r3, [r6, #0]
 8004b82:	f04f 0600 	mov.w	r6, #0
 8004b86:	bf08      	it	eq
 8004b88:	68e5      	ldreq	r5, [r4, #12]
 8004b8a:	f104 041a 	add.w	r4, r4, #26
 8004b8e:	bf08      	it	eq
 8004b90:	1aed      	subeq	r5, r5, r3
 8004b92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b96:	bf08      	it	eq
 8004b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	bfc4      	itt	gt
 8004ba0:	1a9b      	subgt	r3, r3, r2
 8004ba2:	18ed      	addgt	r5, r5, r3
 8004ba4:	42b5      	cmp	r5, r6
 8004ba6:	d11a      	bne.n	8004bde <_printf_common+0xd2>
 8004ba8:	2000      	movs	r0, #0
 8004baa:	e008      	b.n	8004bbe <_printf_common+0xb2>
 8004bac:	2301      	movs	r3, #1
 8004bae:	4652      	mov	r2, sl
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	47c0      	blx	r8
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	d103      	bne.n	8004bc2 <_printf_common+0xb6>
 8004bba:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc2:	3501      	adds	r5, #1
 8004bc4:	e7c1      	b.n	8004b4a <_printf_common+0x3e>
 8004bc6:	2030      	movs	r0, #48	; 0x30
 8004bc8:	18e1      	adds	r1, r4, r3
 8004bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bd4:	4422      	add	r2, r4
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bdc:	e7c2      	b.n	8004b64 <_printf_common+0x58>
 8004bde:	2301      	movs	r3, #1
 8004be0:	4622      	mov	r2, r4
 8004be2:	4649      	mov	r1, r9
 8004be4:	4638      	mov	r0, r7
 8004be6:	47c0      	blx	r8
 8004be8:	3001      	adds	r0, #1
 8004bea:	d0e6      	beq.n	8004bba <_printf_common+0xae>
 8004bec:	3601      	adds	r6, #1
 8004bee:	e7d9      	b.n	8004ba4 <_printf_common+0x98>

08004bf0 <_printf_i>:
 8004bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf4:	7e0f      	ldrb	r7, [r1, #24]
 8004bf6:	4691      	mov	r9, r2
 8004bf8:	2f78      	cmp	r7, #120	; 0x78
 8004bfa:	4680      	mov	r8, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	469a      	mov	sl, r3
 8004c00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c06:	d807      	bhi.n	8004c18 <_printf_i+0x28>
 8004c08:	2f62      	cmp	r7, #98	; 0x62
 8004c0a:	d80a      	bhi.n	8004c22 <_printf_i+0x32>
 8004c0c:	2f00      	cmp	r7, #0
 8004c0e:	f000 80d5 	beq.w	8004dbc <_printf_i+0x1cc>
 8004c12:	2f58      	cmp	r7, #88	; 0x58
 8004c14:	f000 80c1 	beq.w	8004d9a <_printf_i+0x1aa>
 8004c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c20:	e03a      	b.n	8004c98 <_printf_i+0xa8>
 8004c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c26:	2b15      	cmp	r3, #21
 8004c28:	d8f6      	bhi.n	8004c18 <_printf_i+0x28>
 8004c2a:	a101      	add	r1, pc, #4	; (adr r1, 8004c30 <_printf_i+0x40>)
 8004c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c9d 	.word	0x08004c9d
 8004c38:	08004c19 	.word	0x08004c19
 8004c3c:	08004c19 	.word	0x08004c19
 8004c40:	08004c19 	.word	0x08004c19
 8004c44:	08004c19 	.word	0x08004c19
 8004c48:	08004c9d 	.word	0x08004c9d
 8004c4c:	08004c19 	.word	0x08004c19
 8004c50:	08004c19 	.word	0x08004c19
 8004c54:	08004c19 	.word	0x08004c19
 8004c58:	08004c19 	.word	0x08004c19
 8004c5c:	08004da3 	.word	0x08004da3
 8004c60:	08004cc9 	.word	0x08004cc9
 8004c64:	08004d5d 	.word	0x08004d5d
 8004c68:	08004c19 	.word	0x08004c19
 8004c6c:	08004c19 	.word	0x08004c19
 8004c70:	08004dc5 	.word	0x08004dc5
 8004c74:	08004c19 	.word	0x08004c19
 8004c78:	08004cc9 	.word	0x08004cc9
 8004c7c:	08004c19 	.word	0x08004c19
 8004c80:	08004c19 	.word	0x08004c19
 8004c84:	08004d65 	.word	0x08004d65
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	1d1a      	adds	r2, r3, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	602a      	str	r2, [r5, #0]
 8004c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0a0      	b.n	8004dde <_printf_i+0x1ee>
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	682b      	ldr	r3, [r5, #0]
 8004ca0:	0607      	lsls	r7, r0, #24
 8004ca2:	f103 0104 	add.w	r1, r3, #4
 8004ca6:	6029      	str	r1, [r5, #0]
 8004ca8:	d501      	bpl.n	8004cae <_printf_i+0xbe>
 8004caa:	681e      	ldr	r6, [r3, #0]
 8004cac:	e003      	b.n	8004cb6 <_printf_i+0xc6>
 8004cae:	0646      	lsls	r6, r0, #25
 8004cb0:	d5fb      	bpl.n	8004caa <_printf_i+0xba>
 8004cb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004cb6:	2e00      	cmp	r6, #0
 8004cb8:	da03      	bge.n	8004cc2 <_printf_i+0xd2>
 8004cba:	232d      	movs	r3, #45	; 0x2d
 8004cbc:	4276      	negs	r6, r6
 8004cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc2:	230a      	movs	r3, #10
 8004cc4:	4859      	ldr	r0, [pc, #356]	; (8004e2c <_printf_i+0x23c>)
 8004cc6:	e012      	b.n	8004cee <_printf_i+0xfe>
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	6820      	ldr	r0, [r4, #0]
 8004ccc:	1d19      	adds	r1, r3, #4
 8004cce:	6029      	str	r1, [r5, #0]
 8004cd0:	0605      	lsls	r5, r0, #24
 8004cd2:	d501      	bpl.n	8004cd8 <_printf_i+0xe8>
 8004cd4:	681e      	ldr	r6, [r3, #0]
 8004cd6:	e002      	b.n	8004cde <_printf_i+0xee>
 8004cd8:	0641      	lsls	r1, r0, #25
 8004cda:	d5fb      	bpl.n	8004cd4 <_printf_i+0xe4>
 8004cdc:	881e      	ldrh	r6, [r3, #0]
 8004cde:	2f6f      	cmp	r7, #111	; 0x6f
 8004ce0:	bf0c      	ite	eq
 8004ce2:	2308      	moveq	r3, #8
 8004ce4:	230a      	movne	r3, #10
 8004ce6:	4851      	ldr	r0, [pc, #324]	; (8004e2c <_printf_i+0x23c>)
 8004ce8:	2100      	movs	r1, #0
 8004cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cee:	6865      	ldr	r5, [r4, #4]
 8004cf0:	2d00      	cmp	r5, #0
 8004cf2:	bfa8      	it	ge
 8004cf4:	6821      	ldrge	r1, [r4, #0]
 8004cf6:	60a5      	str	r5, [r4, #8]
 8004cf8:	bfa4      	itt	ge
 8004cfa:	f021 0104 	bicge.w	r1, r1, #4
 8004cfe:	6021      	strge	r1, [r4, #0]
 8004d00:	b90e      	cbnz	r6, 8004d06 <_printf_i+0x116>
 8004d02:	2d00      	cmp	r5, #0
 8004d04:	d04b      	beq.n	8004d9e <_printf_i+0x1ae>
 8004d06:	4615      	mov	r5, r2
 8004d08:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d0c:	fb03 6711 	mls	r7, r3, r1, r6
 8004d10:	5dc7      	ldrb	r7, [r0, r7]
 8004d12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d16:	4637      	mov	r7, r6
 8004d18:	42bb      	cmp	r3, r7
 8004d1a:	460e      	mov	r6, r1
 8004d1c:	d9f4      	bls.n	8004d08 <_printf_i+0x118>
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d10b      	bne.n	8004d3a <_printf_i+0x14a>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	07de      	lsls	r6, r3, #31
 8004d26:	d508      	bpl.n	8004d3a <_printf_i+0x14a>
 8004d28:	6923      	ldr	r3, [r4, #16]
 8004d2a:	6861      	ldr	r1, [r4, #4]
 8004d2c:	4299      	cmp	r1, r3
 8004d2e:	bfde      	ittt	le
 8004d30:	2330      	movle	r3, #48	; 0x30
 8004d32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d3a:	1b52      	subs	r2, r2, r5
 8004d3c:	6122      	str	r2, [r4, #16]
 8004d3e:	464b      	mov	r3, r9
 8004d40:	4621      	mov	r1, r4
 8004d42:	4640      	mov	r0, r8
 8004d44:	f8cd a000 	str.w	sl, [sp]
 8004d48:	aa03      	add	r2, sp, #12
 8004d4a:	f7ff fedf 	bl	8004b0c <_printf_common>
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d14a      	bne.n	8004de8 <_printf_i+0x1f8>
 8004d52:	f04f 30ff 	mov.w	r0, #4294967295
 8004d56:	b004      	add	sp, #16
 8004d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	f043 0320 	orr.w	r3, r3, #32
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	2778      	movs	r7, #120	; 0x78
 8004d66:	4832      	ldr	r0, [pc, #200]	; (8004e30 <_printf_i+0x240>)
 8004d68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	6829      	ldr	r1, [r5, #0]
 8004d70:	061f      	lsls	r7, r3, #24
 8004d72:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d76:	d402      	bmi.n	8004d7e <_printf_i+0x18e>
 8004d78:	065f      	lsls	r7, r3, #25
 8004d7a:	bf48      	it	mi
 8004d7c:	b2b6      	uxthmi	r6, r6
 8004d7e:	07df      	lsls	r7, r3, #31
 8004d80:	bf48      	it	mi
 8004d82:	f043 0320 	orrmi.w	r3, r3, #32
 8004d86:	6029      	str	r1, [r5, #0]
 8004d88:	bf48      	it	mi
 8004d8a:	6023      	strmi	r3, [r4, #0]
 8004d8c:	b91e      	cbnz	r6, 8004d96 <_printf_i+0x1a6>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	f023 0320 	bic.w	r3, r3, #32
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	2310      	movs	r3, #16
 8004d98:	e7a6      	b.n	8004ce8 <_printf_i+0xf8>
 8004d9a:	4824      	ldr	r0, [pc, #144]	; (8004e2c <_printf_i+0x23c>)
 8004d9c:	e7e4      	b.n	8004d68 <_printf_i+0x178>
 8004d9e:	4615      	mov	r5, r2
 8004da0:	e7bd      	b.n	8004d1e <_printf_i+0x12e>
 8004da2:	682b      	ldr	r3, [r5, #0]
 8004da4:	6826      	ldr	r6, [r4, #0]
 8004da6:	1d18      	adds	r0, r3, #4
 8004da8:	6961      	ldr	r1, [r4, #20]
 8004daa:	6028      	str	r0, [r5, #0]
 8004dac:	0635      	lsls	r5, r6, #24
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	d501      	bpl.n	8004db6 <_printf_i+0x1c6>
 8004db2:	6019      	str	r1, [r3, #0]
 8004db4:	e002      	b.n	8004dbc <_printf_i+0x1cc>
 8004db6:	0670      	lsls	r0, r6, #25
 8004db8:	d5fb      	bpl.n	8004db2 <_printf_i+0x1c2>
 8004dba:	8019      	strh	r1, [r3, #0]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	4615      	mov	r5, r2
 8004dc0:	6123      	str	r3, [r4, #16]
 8004dc2:	e7bc      	b.n	8004d3e <_printf_i+0x14e>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	1d1a      	adds	r2, r3, #4
 8004dca:	602a      	str	r2, [r5, #0]
 8004dcc:	681d      	ldr	r5, [r3, #0]
 8004dce:	6862      	ldr	r2, [r4, #4]
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f000 f859 	bl	8004e88 <memchr>
 8004dd6:	b108      	cbz	r0, 8004ddc <_printf_i+0x1ec>
 8004dd8:	1b40      	subs	r0, r0, r5
 8004dda:	6060      	str	r0, [r4, #4]
 8004ddc:	6863      	ldr	r3, [r4, #4]
 8004dde:	6123      	str	r3, [r4, #16]
 8004de0:	2300      	movs	r3, #0
 8004de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004de6:	e7aa      	b.n	8004d3e <_printf_i+0x14e>
 8004de8:	462a      	mov	r2, r5
 8004dea:	4649      	mov	r1, r9
 8004dec:	4640      	mov	r0, r8
 8004dee:	6923      	ldr	r3, [r4, #16]
 8004df0:	47d0      	blx	sl
 8004df2:	3001      	adds	r0, #1
 8004df4:	d0ad      	beq.n	8004d52 <_printf_i+0x162>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	079b      	lsls	r3, r3, #30
 8004dfa:	d413      	bmi.n	8004e24 <_printf_i+0x234>
 8004dfc:	68e0      	ldr	r0, [r4, #12]
 8004dfe:	9b03      	ldr	r3, [sp, #12]
 8004e00:	4298      	cmp	r0, r3
 8004e02:	bfb8      	it	lt
 8004e04:	4618      	movlt	r0, r3
 8004e06:	e7a6      	b.n	8004d56 <_printf_i+0x166>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4632      	mov	r2, r6
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	4640      	mov	r0, r8
 8004e10:	47d0      	blx	sl
 8004e12:	3001      	adds	r0, #1
 8004e14:	d09d      	beq.n	8004d52 <_printf_i+0x162>
 8004e16:	3501      	adds	r5, #1
 8004e18:	68e3      	ldr	r3, [r4, #12]
 8004e1a:	9903      	ldr	r1, [sp, #12]
 8004e1c:	1a5b      	subs	r3, r3, r1
 8004e1e:	42ab      	cmp	r3, r5
 8004e20:	dcf2      	bgt.n	8004e08 <_printf_i+0x218>
 8004e22:	e7eb      	b.n	8004dfc <_printf_i+0x20c>
 8004e24:	2500      	movs	r5, #0
 8004e26:	f104 0619 	add.w	r6, r4, #25
 8004e2a:	e7f5      	b.n	8004e18 <_printf_i+0x228>
 8004e2c:	08005047 	.word	0x08005047
 8004e30:	08005058 	.word	0x08005058

08004e34 <memmove>:
 8004e34:	4288      	cmp	r0, r1
 8004e36:	b510      	push	{r4, lr}
 8004e38:	eb01 0402 	add.w	r4, r1, r2
 8004e3c:	d902      	bls.n	8004e44 <memmove+0x10>
 8004e3e:	4284      	cmp	r4, r0
 8004e40:	4623      	mov	r3, r4
 8004e42:	d807      	bhi.n	8004e54 <memmove+0x20>
 8004e44:	1e43      	subs	r3, r0, #1
 8004e46:	42a1      	cmp	r1, r4
 8004e48:	d008      	beq.n	8004e5c <memmove+0x28>
 8004e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e52:	e7f8      	b.n	8004e46 <memmove+0x12>
 8004e54:	4601      	mov	r1, r0
 8004e56:	4402      	add	r2, r0
 8004e58:	428a      	cmp	r2, r1
 8004e5a:	d100      	bne.n	8004e5e <memmove+0x2a>
 8004e5c:	bd10      	pop	{r4, pc}
 8004e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e66:	e7f7      	b.n	8004e58 <memmove+0x24>

08004e68 <_sbrk_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	4d05      	ldr	r5, [pc, #20]	; (8004e84 <_sbrk_r+0x1c>)
 8004e6e:	4604      	mov	r4, r0
 8004e70:	4608      	mov	r0, r1
 8004e72:	602b      	str	r3, [r5, #0]
 8004e74:	f7fc fccc 	bl	8001810 <_sbrk>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_sbrk_r+0x1a>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_sbrk_r+0x1a>
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	20000470 	.word	0x20000470

08004e88 <memchr>:
 8004e88:	4603      	mov	r3, r0
 8004e8a:	b510      	push	{r4, lr}
 8004e8c:	b2c9      	uxtb	r1, r1
 8004e8e:	4402      	add	r2, r0
 8004e90:	4293      	cmp	r3, r2
 8004e92:	4618      	mov	r0, r3
 8004e94:	d101      	bne.n	8004e9a <memchr+0x12>
 8004e96:	2000      	movs	r0, #0
 8004e98:	e003      	b.n	8004ea2 <memchr+0x1a>
 8004e9a:	7804      	ldrb	r4, [r0, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	428c      	cmp	r4, r1
 8004ea0:	d1f6      	bne.n	8004e90 <memchr+0x8>
 8004ea2:	bd10      	pop	{r4, pc}

08004ea4 <memcpy>:
 8004ea4:	440a      	add	r2, r1
 8004ea6:	4291      	cmp	r1, r2
 8004ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eac:	d100      	bne.n	8004eb0 <memcpy+0xc>
 8004eae:	4770      	bx	lr
 8004eb0:	b510      	push	{r4, lr}
 8004eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eb6:	4291      	cmp	r1, r2
 8004eb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ebc:	d1f9      	bne.n	8004eb2 <memcpy+0xe>
 8004ebe:	bd10      	pop	{r4, pc}

08004ec0 <_realloc_r>:
 8004ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec4:	4680      	mov	r8, r0
 8004ec6:	4614      	mov	r4, r2
 8004ec8:	460e      	mov	r6, r1
 8004eca:	b921      	cbnz	r1, 8004ed6 <_realloc_r+0x16>
 8004ecc:	4611      	mov	r1, r2
 8004ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed2:	f7ff bc37 	b.w	8004744 <_malloc_r>
 8004ed6:	b92a      	cbnz	r2, 8004ee4 <_realloc_r+0x24>
 8004ed8:	f7ff fbcc 	bl	8004674 <_free_r>
 8004edc:	4625      	mov	r5, r4
 8004ede:	4628      	mov	r0, r5
 8004ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee4:	f000 f81b 	bl	8004f1e <_malloc_usable_size_r>
 8004ee8:	4284      	cmp	r4, r0
 8004eea:	4607      	mov	r7, r0
 8004eec:	d802      	bhi.n	8004ef4 <_realloc_r+0x34>
 8004eee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ef2:	d812      	bhi.n	8004f1a <_realloc_r+0x5a>
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	f7ff fc24 	bl	8004744 <_malloc_r>
 8004efc:	4605      	mov	r5, r0
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d0ed      	beq.n	8004ede <_realloc_r+0x1e>
 8004f02:	42bc      	cmp	r4, r7
 8004f04:	4622      	mov	r2, r4
 8004f06:	4631      	mov	r1, r6
 8004f08:	bf28      	it	cs
 8004f0a:	463a      	movcs	r2, r7
 8004f0c:	f7ff ffca 	bl	8004ea4 <memcpy>
 8004f10:	4631      	mov	r1, r6
 8004f12:	4640      	mov	r0, r8
 8004f14:	f7ff fbae 	bl	8004674 <_free_r>
 8004f18:	e7e1      	b.n	8004ede <_realloc_r+0x1e>
 8004f1a:	4635      	mov	r5, r6
 8004f1c:	e7df      	b.n	8004ede <_realloc_r+0x1e>

08004f1e <_malloc_usable_size_r>:
 8004f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f22:	1f18      	subs	r0, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bfbc      	itt	lt
 8004f28:	580b      	ldrlt	r3, [r1, r0]
 8004f2a:	18c0      	addlt	r0, r0, r3
 8004f2c:	4770      	bx	lr
	...

08004f30 <_init>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	bf00      	nop
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr

08004f3c <_fini>:
 8004f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3e:	bf00      	nop
 8004f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f42:	bc08      	pop	{r3}
 8004f44:	469e      	mov	lr, r3
 8004f46:	4770      	bx	lr
