
BTL_HTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005928  08005928  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005928  08005928  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005928  08005928  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000080  080059b0  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  080059b0  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd80  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c14  00000000  00000000  0002be6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  0002da80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a1a  00000000  00000000  0002e760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a58  00000000  00000000  0002f17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f034  00000000  00000000  00046bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a9df  00000000  00000000  00055c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b74  00000000  00000000  000e05e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e415c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080057b8 	.word	0x080057b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080057b8 	.word	0x080057b8

0800014c <decToBcd>:
bool flag_cho_phep_nhan_nut =1;
#define DS3231_ADDRESS 0xD0

// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a0e      	ldr	r2, [pc, #56]	; (8000190 <decToBcd+0x44>)
 8000158:	fb82 1203 	smull	r1, r2, r2, r3
 800015c:	1092      	asrs	r2, r2, #2
 800015e:	17db      	asrs	r3, r3, #31
 8000160:	1ad3      	subs	r3, r2, r3
 8000162:	b2db      	uxtb	r3, r3
 8000164:	011b      	lsls	r3, r3, #4
 8000166:	b2d8      	uxtb	r0, r3
 8000168:	687a      	ldr	r2, [r7, #4]
 800016a:	4b09      	ldr	r3, [pc, #36]	; (8000190 <decToBcd+0x44>)
 800016c:	fb83 1302 	smull	r1, r3, r3, r2
 8000170:	1099      	asrs	r1, r3, #2
 8000172:	17d3      	asrs	r3, r2, #31
 8000174:	1ac9      	subs	r1, r1, r3
 8000176:	460b      	mov	r3, r1
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	440b      	add	r3, r1
 800017c:	005b      	lsls	r3, r3, #1
 800017e:	1ad1      	subs	r1, r2, r3
 8000180:	b2cb      	uxtb	r3, r1
 8000182:	4403      	add	r3, r0
 8000184:	b2db      	uxtb	r3, r3
}
 8000186:	4618      	mov	r0, r3
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	66666667 	.word	0x66666667

08000194 <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	091b      	lsrs	r3, r3, #4
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	4613      	mov	r3, r2
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	4413      	add	r3, r2
 80001ac:	005b      	lsls	r3, r3, #1
 80001ae:	461a      	mov	r2, r3
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	f003 030f 	and.w	r3, r3, #15
 80001b6:	4413      	add	r3, r2
}
 80001b8:	4618      	mov	r0, r3
 80001ba:	370c      	adds	r7, #12
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
	...

080001c4 <Set_Time>:
TIME time;

// function to set time

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 80001c4:	b590      	push	{r4, r7, lr}
 80001c6:	b089      	sub	sp, #36	; 0x24
 80001c8:	af04      	add	r7, sp, #16
 80001ca:	4604      	mov	r4, r0
 80001cc:	4608      	mov	r0, r1
 80001ce:	4611      	mov	r1, r2
 80001d0:	461a      	mov	r2, r3
 80001d2:	4623      	mov	r3, r4
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	4603      	mov	r3, r0
 80001d8:	71bb      	strb	r3, [r7, #6]
 80001da:	460b      	mov	r3, r1
 80001dc:	717b      	strb	r3, [r7, #5]
 80001de:	4613      	mov	r3, r2
 80001e0:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f7ff ffb1 	bl	800014c <decToBcd>
 80001ea:	4603      	mov	r3, r0
 80001ec:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f7ff ffab 	bl	800014c <decToBcd>
 80001f6:	4603      	mov	r3, r0
 80001f8:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 80001fa:	797b      	ldrb	r3, [r7, #5]
 80001fc:	4618      	mov	r0, r3
 80001fe:	f7ff ffa5 	bl	800014c <decToBcd>
 8000202:	4603      	mov	r3, r0
 8000204:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 8000206:	793b      	ldrb	r3, [r7, #4]
 8000208:	4618      	mov	r0, r3
 800020a:	f7ff ff9f 	bl	800014c <decToBcd>
 800020e:	4603      	mov	r3, r0
 8000210:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 8000212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000216:	4618      	mov	r0, r3
 8000218:	f7ff ff98 	bl	800014c <decToBcd>
 800021c:	4603      	mov	r3, r0
 800021e:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8000220:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000224:	4618      	mov	r0, r3
 8000226:	f7ff ff91 	bl	800014c <decToBcd>
 800022a:	4603      	mov	r3, r0
 800022c:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 800022e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000232:	4618      	mov	r0, r3
 8000234:	f7ff ff8a 	bl	800014c <decToBcd>
 8000238:	4603      	mov	r3, r0
 800023a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 800023c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000240:	9302      	str	r3, [sp, #8]
 8000242:	2307      	movs	r3, #7
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2301      	movs	r3, #1
 800024e:	2200      	movs	r2, #0
 8000250:	21d0      	movs	r1, #208	; 0xd0
 8000252:	4803      	ldr	r0, [pc, #12]	; (8000260 <Set_Time+0x9c>)
 8000254:	f002 fd56 	bl	8002d04 <HAL_I2C_Mem_Write>
}
 8000258:	bf00      	nop
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	bd90      	pop	{r4, r7, pc}
 8000260:	2000009c 	.word	0x2000009c

08000264 <Get_Time>:

void Get_Time (void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	9302      	str	r3, [sp, #8]
 8000270:	2307      	movs	r3, #7
 8000272:	9301      	str	r3, [sp, #4]
 8000274:	463b      	mov	r3, r7
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2301      	movs	r3, #1
 800027a:	2200      	movs	r2, #0
 800027c:	21d0      	movs	r1, #208	; 0xd0
 800027e:	481f      	ldr	r0, [pc, #124]	; (80002fc <Get_Time+0x98>)
 8000280:	f002 fe3a 	bl	8002ef8 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000284:	783b      	ldrb	r3, [r7, #0]
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ff84 	bl	8000194 <bcdToDec>
 800028c:	4603      	mov	r3, r0
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <Get_Time+0x9c>)
 8000292:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000294:	787b      	ldrb	r3, [r7, #1]
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff7c 	bl	8000194 <bcdToDec>
 800029c:	4603      	mov	r3, r0
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b17      	ldr	r3, [pc, #92]	; (8000300 <Get_Time+0x9c>)
 80002a2:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 80002a4:	78bb      	ldrb	r3, [r7, #2]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ff74 	bl	8000194 <bcdToDec>
 80002ac:	4603      	mov	r3, r0
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <Get_Time+0x9c>)
 80002b2:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80002b4:	78fb      	ldrb	r3, [r7, #3]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ff6c 	bl	8000194 <bcdToDec>
 80002bc:	4603      	mov	r3, r0
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <Get_Time+0x9c>)
 80002c2:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80002c4:	793b      	ldrb	r3, [r7, #4]
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff64 	bl	8000194 <bcdToDec>
 80002cc:	4603      	mov	r3, r0
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <Get_Time+0x9c>)
 80002d2:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80002d4:	797b      	ldrb	r3, [r7, #5]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff5c 	bl	8000194 <bcdToDec>
 80002dc:	4603      	mov	r3, r0
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <Get_Time+0x9c>)
 80002e2:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff54 	bl	8000194 <bcdToDec>
 80002ec:	4603      	mov	r3, r0
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b03      	ldr	r3, [pc, #12]	; (8000300 <Get_Time+0x9c>)
 80002f2:	719a      	strb	r2, [r3, #6]
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	2000009c 	.word	0x2000009c
 8000300:	20000354 	.word	0x20000354

08000304 <lay_data_tu_lcd>:

void lay_data_tu_lcd(uint8_t *value_set_ngay,uint8_t* ngay,uint8_t *thang, int* nam,uint8_t *gio,uint8_t *phut,uint8_t *giay)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
 8000310:	603b      	str	r3, [r7, #0]
	*ngay = value_set_ngay[0]*10 + value_set_ngay[1];
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	0092      	lsls	r2, r2, #2
 800031a:	4413      	add	r3, r2
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	b2da      	uxtb	r2, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3301      	adds	r3, #1
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	4413      	add	r3, r2
 8000328:	b2da      	uxtb	r2, r3
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	701a      	strb	r2, [r3, #0]
	*thang = value_set_ngay[2]*10 + value_set_ngay[3];
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3302      	adds	r3, #2
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	461a      	mov	r2, r3
 8000336:	0092      	lsls	r2, r2, #2
 8000338:	4413      	add	r3, r2
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	b2da      	uxtb	r2, r3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3303      	adds	r3, #3
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4413      	add	r3, r2
 8000346:	b2da      	uxtb	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	701a      	strb	r2, [r3, #0]
	*nam = value_set_ngay[4]*1000 + value_set_ngay[5]*100 + value_set_ngay[6]*10 + value_set_ngay[7] ;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3304      	adds	r3, #4
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	461a      	mov	r2, r3
 8000354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000358:	fb03 f202 	mul.w	r2, r3, r2
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	3305      	adds	r3, #5
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4619      	mov	r1, r3
 8000364:	2364      	movs	r3, #100	; 0x64
 8000366:	fb01 f303 	mul.w	r3, r1, r3
 800036a:	441a      	add	r2, r3
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	3306      	adds	r3, #6
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	4619      	mov	r1, r3
 8000374:	460b      	mov	r3, r1
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	440b      	add	r3, r1
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	4413      	add	r3, r2
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	3207      	adds	r2, #7
 8000382:	7812      	ldrb	r2, [r2, #0]
 8000384:	441a      	add	r2, r3
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	601a      	str	r2, [r3, #0]
	*gio = value_set_ngay[8]*10 + value_set_ngay[9];
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	3308      	adds	r3, #8
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	461a      	mov	r2, r3
 8000392:	0092      	lsls	r2, r2, #2
 8000394:	4413      	add	r3, r2
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	b2da      	uxtb	r2, r3
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	3309      	adds	r3, #9
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	4413      	add	r3, r2
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	701a      	strb	r2, [r3, #0]
	*phut = value_set_ngay[10]*10 + value_set_ngay[11];
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	330a      	adds	r3, #10
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	461a      	mov	r2, r3
 80003b0:	0092      	lsls	r2, r2, #2
 80003b2:	4413      	add	r3, r2
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	330b      	adds	r3, #11
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	4413      	add	r3, r2
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	701a      	strb	r2, [r3, #0]
	*giay = value_set_ngay[12]*10 + value_set_ngay[13];
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	330c      	adds	r3, #12
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	461a      	mov	r2, r3
 80003ce:	0092      	lsls	r2, r2, #2
 80003d0:	4413      	add	r3, r2
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	330d      	adds	r3, #13
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4413      	add	r3, r2
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	6a3b      	ldr	r3, [r7, #32]
 80003e2:	701a      	strb	r2, [r3, #0]
}
 80003e4:	bf00      	nop
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
	...

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b5b0      	push	{r4, r5, r7, lr}
 80003f2:	b08e      	sub	sp, #56	; 0x38
 80003f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f6:	f001 feb1 	bl	800215c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fa:	f000 fdc9 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fe:	f000 ff23 	bl	8001248 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000402:	f000 fe39 	bl	8001078 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000406:	f000 fe83 	bl	8001110 <MX_TIM3_Init>
  MX_I2C1_Init();
 800040a:	f000 fe07 	bl	800101c <MX_I2C1_Init>
  MX_TIM4_Init();
 800040e:	f000 fecd 	bl	80011ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000412:	f004 fccd 	bl	8004db0 <lcd_init>
  HAL_Delay(100);
 8000416:	2064      	movs	r0, #100	; 0x64
 8000418:	f001 ff02 	bl	8002220 <HAL_Delay>
  lcd_clear();
 800041c:	f004 fc92 	bl	8004d44 <lcd_clear>
  HAL_TIM_Base_Stop_IT(&htim2);
 8000420:	48a2      	ldr	r0, [pc, #648]	; (80006ac <main+0x2bc>)
 8000422:	f004 f8a5 	bl	8004570 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000426:	48a2      	ldr	r0, [pc, #648]	; (80006b0 <main+0x2c0>)
 8000428:	f004 f850 	bl	80044cc <HAL_TIM_Base_Start_IT>
  Set_Time(20, 30, 20, 5, 26, 4, 24);
 800042c:	2318      	movs	r3, #24
 800042e:	9302      	str	r3, [sp, #8]
 8000430:	2304      	movs	r3, #4
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	231a      	movs	r3, #26
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2305      	movs	r3, #5
 800043a:	2214      	movs	r2, #20
 800043c:	211e      	movs	r1, #30
 800043e:	2014      	movs	r0, #20
 8000440:	f7ff fec0 	bl	80001c4 <Set_Time>
  HAL_Delay(300);
 8000444:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000448:	f001 feea 	bl	8002220 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // lưu ý khi cách đ�?c dht11 là dùng ngắt ngoài nên sử dụng ngắt ưu tiên cao nhất
	  // trước khi đ�?c dht11 thì g�?i hàm doc_dht11() sau đó delay 10ms và g�?i hàm xy_ly_tick_dht11
	  HAL_Delay(500);
 800044c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000450:	f001 fee6 	bl	8002220 <HAL_Delay>
		doc_dht11();
 8000454:	f001 fbc2 	bl	8001bdc <doc_dht11>
		HAL_Delay(10);
 8000458:	200a      	movs	r0, #10
 800045a:	f001 fee1 	bl	8002220 <HAL_Delay>
		xu_ly_tick_dht11(tick,data_dht11); // hàm này lấy pointer cho ra data_dht11 là 1 mảng với
 800045e:	4995      	ldr	r1, [pc, #596]	; (80006b4 <main+0x2c4>)
 8000460:	4895      	ldr	r0, [pc, #596]	; (80006b8 <main+0x2c8>)
 8000462:	f001 fc19 	bl	8001c98 <xu_ly_tick_dht11>
						data_dht11[0] là phần thập phân độ ẩm
						data_dht11[0] là phần nguyên nhiệt độ
						data_dht11[0] là phần thập phân nhiệt độ
						*/

		bool a = (time.year == value_nam_bao_thuc)? 1:0 ;
 8000466:	4b95      	ldr	r3, [pc, #596]	; (80006bc <main+0x2cc>)
 8000468:	799b      	ldrb	r3, [r3, #6]
 800046a:	461a      	mov	r2, r3
 800046c:	4b94      	ldr	r3, [pc, #592]	; (80006c0 <main+0x2d0>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	429a      	cmp	r2, r3
 8000472:	bf0c      	ite	eq
 8000474:	2301      	moveq	r3, #1
 8000476:	2300      	movne	r3, #0
 8000478:	77fb      	strb	r3, [r7, #31]
		bool b = (time.month == value_thang_bao_thuc)? 1:0 ;
 800047a:	4b90      	ldr	r3, [pc, #576]	; (80006bc <main+0x2cc>)
 800047c:	795a      	ldrb	r2, [r3, #5]
 800047e:	4b91      	ldr	r3, [pc, #580]	; (80006c4 <main+0x2d4>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	429a      	cmp	r2, r3
 8000484:	bf0c      	ite	eq
 8000486:	2301      	moveq	r3, #1
 8000488:	2300      	movne	r3, #0
 800048a:	77bb      	strb	r3, [r7, #30]
		bool c = (time.dayofmonth == value_ngay_bao_thuc)? 1:0 ;
 800048c:	4b8b      	ldr	r3, [pc, #556]	; (80006bc <main+0x2cc>)
 800048e:	791a      	ldrb	r2, [r3, #4]
 8000490:	4b8d      	ldr	r3, [pc, #564]	; (80006c8 <main+0x2d8>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	429a      	cmp	r2, r3
 8000496:	bf0c      	ite	eq
 8000498:	2301      	moveq	r3, #1
 800049a:	2300      	movne	r3, #0
 800049c:	777b      	strb	r3, [r7, #29]
		bool d = (time.hour == value_gio_bao_thuc)? 1:0 ;
 800049e:	4b87      	ldr	r3, [pc, #540]	; (80006bc <main+0x2cc>)
 80004a0:	789a      	ldrb	r2, [r3, #2]
 80004a2:	4b8a      	ldr	r3, [pc, #552]	; (80006cc <main+0x2dc>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	bf0c      	ite	eq
 80004aa:	2301      	moveq	r3, #1
 80004ac:	2300      	movne	r3, #0
 80004ae:	773b      	strb	r3, [r7, #28]
		bool e = (time.minutes == value_phut_bao_thuc)? 1:0 ;
 80004b0:	4b82      	ldr	r3, [pc, #520]	; (80006bc <main+0x2cc>)
 80004b2:	785a      	ldrb	r2, [r3, #1]
 80004b4:	4b86      	ldr	r3, [pc, #536]	; (80006d0 <main+0x2e0>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	bf0c      	ite	eq
 80004bc:	2301      	moveq	r3, #1
 80004be:	2300      	movne	r3, #0
 80004c0:	76fb      	strb	r3, [r7, #27]
		bool f = (time.seconds >= value_giay_bao_thuc)? 1:0 ;
 80004c2:	4b7e      	ldr	r3, [pc, #504]	; (80006bc <main+0x2cc>)
 80004c4:	781a      	ldrb	r2, [r3, #0]
 80004c6:	4b83      	ldr	r3, [pc, #524]	; (80006d4 <main+0x2e4>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	bf2c      	ite	cs
 80004ce:	2301      	movcs	r3, #1
 80004d0:	2300      	movcc	r3, #0
 80004d2:	76bb      	strb	r3, [r7, #26]
		bool flag_bat_bao_thuc = a&b&c&d&e&f;
 80004d4:	7ffa      	ldrb	r2, [r7, #31]
 80004d6:	7fbb      	ldrb	r3, [r7, #30]
 80004d8:	401a      	ands	r2, r3
 80004da:	7f7b      	ldrb	r3, [r7, #29]
 80004dc:	401a      	ands	r2, r3
 80004de:	7f3b      	ldrb	r3, [r7, #28]
 80004e0:	401a      	ands	r2, r3
 80004e2:	7efb      	ldrb	r3, [r7, #27]
 80004e4:	401a      	ands	r2, r3
 80004e6:	7ebb      	ldrb	r3, [r7, #26]
 80004e8:	4013      	ands	r3, r2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	bf14      	ite	ne
 80004ee:	2301      	movne	r3, #1
 80004f0:	2300      	moveq	r3, #0
 80004f2:	767b      	strb	r3, [r7, #25]
		if(flag_bat_bao_thuc)
 80004f4:	7e7b      	ldrb	r3, [r7, #25]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d006      	beq.n	8000508 <main+0x118>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000500:	4875      	ldr	r0, [pc, #468]	; (80006d8 <main+0x2e8>)
 8000502:	f002 f98c 	bl	800281e <HAL_GPIO_WritePin>
 8000506:	e005      	b.n	8000514 <main+0x124>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050e:	4872      	ldr	r0, [pc, #456]	; (80006d8 <main+0x2e8>)
 8000510:	f002 f985 	bl	800281e <HAL_GPIO_WritePin>
		}



		if(flag_ngat_timer3)
 8000514:	4b71      	ldr	r3, [pc, #452]	; (80006dc <main+0x2ec>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d097      	beq.n	800044c <main+0x5c>
		{
			flag_ngat_timer3=0;
 800051c:	4b6f      	ldr	r3, [pc, #444]	; (80006dc <main+0x2ec>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
			switch(state_lcd%6) {
 8000522:	4b6f      	ldr	r3, [pc, #444]	; (80006e0 <main+0x2f0>)
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	4b6f      	ldr	r3, [pc, #444]	; (80006e4 <main+0x2f4>)
 8000528:	fb83 3201 	smull	r3, r2, r3, r1
 800052c:	17cb      	asrs	r3, r1, #31
 800052e:	1ad2      	subs	r2, r2, r3
 8000530:	4613      	mov	r3, r2
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	4413      	add	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	1aca      	subs	r2, r1, r3
 800053a:	2a05      	cmp	r2, #5
 800053c:	d886      	bhi.n	800044c <main+0x5c>
 800053e:	a301      	add	r3, pc, #4	; (adr r3, 8000544 <main+0x154>)
 8000540:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000544:	0800055d 	.word	0x0800055d
 8000548:	080005a7 	.word	0x080005a7
 800054c:	0800044d 	.word	0x0800044d
 8000550:	08000779 	.word	0x08000779
 8000554:	08000f23 	.word	0x08000f23
 8000558:	08000b1b 	.word	0x08000b1b
				case 0:
				{

					  sprintf(nhiet_do,"Nhiet do:%d.%doC", data_dht11[2], data_dht11[3]); // hàm này ghép chuỗi thành chuỗi nhiet_do để tiện hiển thị LCD
 800055c:	4b55      	ldr	r3, [pc, #340]	; (80006b4 <main+0x2c4>)
 800055e:	789b      	ldrb	r3, [r3, #2]
 8000560:	461a      	mov	r2, r3
 8000562:	4b54      	ldr	r3, [pc, #336]	; (80006b4 <main+0x2c4>)
 8000564:	78db      	ldrb	r3, [r3, #3]
 8000566:	4960      	ldr	r1, [pc, #384]	; (80006e8 <main+0x2f8>)
 8000568:	4860      	ldr	r0, [pc, #384]	; (80006ec <main+0x2fc>)
 800056a:	f004 fc73 	bl	8004e54 <siprintf>
					  sprintf(do_am, "Do am:  %d.%d ", data_dht11[0],data_dht11[1]);		// hàm ghép chuỗi độ ẩm để hiển thị LCD
 800056e:	4b51      	ldr	r3, [pc, #324]	; (80006b4 <main+0x2c4>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	461a      	mov	r2, r3
 8000574:	4b4f      	ldr	r3, [pc, #316]	; (80006b4 <main+0x2c4>)
 8000576:	785b      	ldrb	r3, [r3, #1]
 8000578:	495d      	ldr	r1, [pc, #372]	; (80006f0 <main+0x300>)
 800057a:	485e      	ldr	r0, [pc, #376]	; (80006f4 <main+0x304>)
 800057c:	f004 fc6a 	bl	8004e54 <siprintf>
					  lcd_send_cmd (0x0C);
 8000580:	200c      	movs	r0, #12
 8000582:	f004 fb7f 	bl	8004c84 <lcd_send_cmd>
					  lcd_put_cur(0,1);
 8000586:	2101      	movs	r1, #1
 8000588:	2000      	movs	r0, #0
 800058a:	f004 fbf2 	bl	8004d72 <lcd_put_cur>
					  lcd_send_string(nhiet_do);
 800058e:	4857      	ldr	r0, [pc, #348]	; (80006ec <main+0x2fc>)
 8000590:	f004 fc4b 	bl	8004e2a <lcd_send_string>
					  lcd_put_cur(1,1);
 8000594:	2101      	movs	r1, #1
 8000596:	2001      	movs	r0, #1
 8000598:	f004 fbeb 	bl	8004d72 <lcd_put_cur>
					  lcd_send_string(do_am);
 800059c:	4855      	ldr	r0, [pc, #340]	; (80006f4 <main+0x304>)
 800059e:	f004 fc44 	bl	8004e2a <lcd_send_string>
					  break;
 80005a2:	f000 bcd1 	b.w	8000f48 <main+0xb58>
				}
				case 1:
				{

					if(flag_chuyen_lcd)
 80005a6:	4b54      	ldr	r3, [pc, #336]	; (80006f8 <main+0x308>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d019      	beq.n	80005e2 <main+0x1f2>
					{
						count_mat_khau=-2;
 80005ae:	4b53      	ldr	r3, [pc, #332]	; (80006fc <main+0x30c>)
 80005b0:	f06f 0201 	mvn.w	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
						count_may_chu_nhap_vao=0;
 80005b6:	4b52      	ldr	r3, [pc, #328]	; (8000700 <main+0x310>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
						flag_lan_dau_nhap_mat_khau =1;
 80005bc:	4b51      	ldr	r3, [pc, #324]	; (8000704 <main+0x314>)
 80005be:	2201      	movs	r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
						flag_chuyen_lcd=0;
 80005c2:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <main+0x308>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
						lcd_clear();
 80005c8:	f004 fbbc 	bl	8004d44 <lcd_clear>
						lcd_put_cur(0,1);
 80005cc:	2101      	movs	r1, #1
 80005ce:	2000      	movs	r0, #0
 80005d0:	f004 fbcf 	bl	8004d72 <lcd_put_cur>
						lcd_send_string("Nhap mat khau:");
 80005d4:	484c      	ldr	r0, [pc, #304]	; (8000708 <main+0x318>)
 80005d6:	f004 fc28 	bl	8004e2a <lcd_send_string>
						lcd_put_cur(1,0);
 80005da:	2100      	movs	r1, #0
 80005dc:	2001      	movs	r0, #1
 80005de:	f004 fbc8 	bl	8004d72 <lcd_put_cur>
					}
						count_mat_khau++;
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <main+0x30c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	4a44      	ldr	r2, [pc, #272]	; (80006fc <main+0x30c>)
 80005ea:	6013      	str	r3, [r2, #0]
						count_may_chu_nhap_vao++;
 80005ec:	4b44      	ldr	r3, [pc, #272]	; (8000700 <main+0x310>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	4a43      	ldr	r2, [pc, #268]	; (8000700 <main+0x310>)
 80005f4:	6013      	str	r3, [r2, #0]
						if((flag_number <= 9) && (flag_number >=0))
 80005f6:	4b45      	ldr	r3, [pc, #276]	; (800070c <main+0x31c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b09      	cmp	r3, #9
 80005fc:	dc0a      	bgt.n	8000614 <main+0x224>
 80005fe:	4b43      	ldr	r3, [pc, #268]	; (800070c <main+0x31c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	db06      	blt.n	8000614 <main+0x224>
						{
							mat_khau_user[count_mat_khau] = flag_number;
 8000606:	4b41      	ldr	r3, [pc, #260]	; (800070c <main+0x31c>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b3c      	ldr	r3, [pc, #240]	; (80006fc <main+0x30c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	b2d1      	uxtb	r1, r2
 8000610:	4a3f      	ldr	r2, [pc, #252]	; (8000710 <main+0x320>)
 8000612:	54d1      	strb	r1, [r2, r3]
						}
						  switch(flag_number) {
 8000614:	4b3d      	ldr	r3, [pc, #244]	; (800070c <main+0x31c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b0b      	cmp	r3, #11
 800061a:	f040 80a4 	bne.w	8000766 <main+0x376>
							  case 11:
							  {
								  for(int i=0 ;i < 6 ; i++)
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
 8000622:	e013      	b.n	800064c <main+0x25c>
									{
										if(mat_khau_user[i] != mat_khau_dung[i])
 8000624:	4a3a      	ldr	r2, [pc, #232]	; (8000710 <main+0x320>)
 8000626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000628:	4413      	add	r3, r2
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	4939      	ldr	r1, [pc, #228]	; (8000714 <main+0x324>)
 800062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000630:	440b      	add	r3, r1
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	429a      	cmp	r2, r3
 8000636:	d003      	beq.n	8000640 <main+0x250>
										{
											check_pass_LCD=0;
 8000638:	4b37      	ldr	r3, [pc, #220]	; (8000718 <main+0x328>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
											break;
 800063e:	e008      	b.n	8000652 <main+0x262>
										}
										check_pass_LCD=1;
 8000640:	4b35      	ldr	r3, [pc, #212]	; (8000718 <main+0x328>)
 8000642:	2201      	movs	r2, #1
 8000644:	601a      	str	r2, [r3, #0]
								  for(int i=0 ;i < 6 ; i++)
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	3301      	adds	r3, #1
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
 800064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064e:	2b05      	cmp	r3, #5
 8000650:	dde8      	ble.n	8000624 <main+0x234>
									}
									for(int i=0;i<6;i++)
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]
 8000656:	e007      	b.n	8000668 <main+0x278>
									{
										mat_khau_user[i] =0;
 8000658:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <main+0x320>)
 800065a:	6a3b      	ldr	r3, [r7, #32]
 800065c:	4413      	add	r3, r2
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
									for(int i=0;i<6;i++)
 8000662:	6a3b      	ldr	r3, [r7, #32]
 8000664:	3301      	adds	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	2b05      	cmp	r3, #5
 800066c:	ddf4      	ble.n	8000658 <main+0x268>
									}
									if(check_pass_LCD) {
 800066e:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <main+0x328>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d056      	beq.n	8000724 <main+0x334>
										state_lcd =2;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <main+0x2f0>)
 8000678:	2202      	movs	r2, #2
 800067a:	601a      	str	r2, [r3, #0]
										flag_ngat_timer3=1;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <main+0x2ec>)
 800067e:	2201      	movs	r2, #1
 8000680:	601a      	str	r2, [r3, #0]
										lcd_clear();
 8000682:	f004 fb5f 	bl	8004d44 <lcd_clear>
										lcd_put_cur(0,1);
 8000686:	2101      	movs	r1, #1
 8000688:	2000      	movs	r0, #0
 800068a:	f004 fb72 	bl	8004d72 <lcd_put_cur>
										lcd_send_string("Mat khau dung ->>");
 800068e:	4823      	ldr	r0, [pc, #140]	; (800071c <main+0x32c>)
 8000690:	f004 fbcb 	bl	8004e2a <lcd_send_string>
										flag_di_qua_nhap_mat_khau=1;
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <main+0x330>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
										HAL_Delay(2000);
 800069a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800069e:	f001 fdbf 	bl	8002220 <HAL_Delay>
										flag_number=0;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <main+0x31c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
										lcd_put_cur(1,1);
										lcd_send_string("Moi nhap lai  ");
										HAL_Delay(2000);
										flag_number=0;
									}
								  break;
 80006a8:	e065      	b.n	8000776 <main+0x386>
 80006aa:	bf00      	nop
 80006ac:	200000f0 	.word	0x200000f0
 80006b0:	20000180 	.word	0x20000180
 80006b4:	2000022c 	.word	0x2000022c
 80006b8:	200001c8 	.word	0x200001c8
 80006bc:	20000354 	.word	0x20000354
 80006c0:	2000001c 	.word	0x2000001c
 80006c4:	2000034f 	.word	0x2000034f
 80006c8:	2000034e 	.word	0x2000034e
 80006cc:	20000352 	.word	0x20000352
 80006d0:	20000351 	.word	0x20000351
 80006d4:	20000350 	.word	0x20000350
 80006d8:	40011000 	.word	0x40011000
 80006dc:	20000004 	.word	0x20000004
 80006e0:	200002a8 	.word	0x200002a8
 80006e4:	2aaaaaab 	.word	0x2aaaaaab
 80006e8:	080057d0 	.word	0x080057d0
 80006ec:	20000280 	.word	0x20000280
 80006f0:	080057e4 	.word	0x080057e4
 80006f4:	20000294 	.word	0x20000294
 80006f8:	200002c4 	.word	0x200002c4
 80006fc:	200002b8 	.word	0x200002b8
 8000700:	200002bc 	.word	0x200002bc
 8000704:	200002c8 	.word	0x200002c8
 8000708:	080057f4 	.word	0x080057f4
 800070c:	20000248 	.word	0x20000248
 8000710:	200002ac 	.word	0x200002ac
 8000714:	20000008 	.word	0x20000008
 8000718:	200002b4 	.word	0x200002b4
 800071c:	08005804 	.word	0x08005804
 8000720:	200002c0 	.word	0x200002c0
										state_lcd =1;
 8000724:	4b9a      	ldr	r3, [pc, #616]	; (8000990 <main+0x5a0>)
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
										flag_chuyen_lcd=1;
 800072a:	4b9a      	ldr	r3, [pc, #616]	; (8000994 <main+0x5a4>)
 800072c:	2201      	movs	r2, #1
 800072e:	601a      	str	r2, [r3, #0]
										flag_ngat_timer3=1;
 8000730:	4b99      	ldr	r3, [pc, #612]	; (8000998 <main+0x5a8>)
 8000732:	2201      	movs	r2, #1
 8000734:	601a      	str	r2, [r3, #0]
										lcd_clear();
 8000736:	f004 fb05 	bl	8004d44 <lcd_clear>
										lcd_put_cur(0,1);
 800073a:	2101      	movs	r1, #1
 800073c:	2000      	movs	r0, #0
 800073e:	f004 fb18 	bl	8004d72 <lcd_put_cur>
										lcd_send_string("Mat khau sai ");
 8000742:	4896      	ldr	r0, [pc, #600]	; (800099c <main+0x5ac>)
 8000744:	f004 fb71 	bl	8004e2a <lcd_send_string>
										lcd_put_cur(1,1);
 8000748:	2101      	movs	r1, #1
 800074a:	2001      	movs	r0, #1
 800074c:	f004 fb11 	bl	8004d72 <lcd_put_cur>
										lcd_send_string("Moi nhap lai  ");
 8000750:	4893      	ldr	r0, [pc, #588]	; (80009a0 <main+0x5b0>)
 8000752:	f004 fb6a 	bl	8004e2a <lcd_send_string>
										HAL_Delay(2000);
 8000756:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800075a:	f001 fd61 	bl	8002220 <HAL_Delay>
										flag_number=0;
 800075e:	4b91      	ldr	r3, [pc, #580]	; (80009a4 <main+0x5b4>)
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
								  break;
 8000764:	e007      	b.n	8000776 <main+0x386>
							  }
							  default :
							  {
								  if(count_mat_khau <0)
 8000766:	4b90      	ldr	r3, [pc, #576]	; (80009a8 <main+0x5b8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db02      	blt.n	8000774 <main+0x384>
								  {

								  } else {

								  lcd_send_string("*");
 800076e:	488f      	ldr	r0, [pc, #572]	; (80009ac <main+0x5bc>)
 8000770:	f004 fb5b 	bl	8004e2a <lcd_send_string>
								  }
								  break;
 8000774:	bf00      	nop
							  }
						  }
					  break;
 8000776:	e3e7      	b.n	8000f48 <main+0xb58>
				}


				case 3:
				{
					if(flag_chuyen_lcd)
 8000778:	4b86      	ldr	r3, [pc, #536]	; (8000994 <main+0x5a4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d03b      	beq.n	80007f8 <main+0x408>
					{
						flag_chuyen_lcd=0;
 8000780:	4b84      	ldr	r3, [pc, #528]	; (8000994 <main+0x5a4>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
						lcd_clear();
 8000786:	f004 fadd 	bl	8004d44 <lcd_clear>
						lcd_put_cur(0,1);
 800078a:	2101      	movs	r1, #1
 800078c:	2000      	movs	r0, #0
 800078e:	f004 faf0 	bl	8004d72 <lcd_put_cur>
						sprintf(ngay_string,"%02d / %02d / 20%02d",time.dayofmonth,time.month,time.year);
 8000792:	4b87      	ldr	r3, [pc, #540]	; (80009b0 <main+0x5c0>)
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	461a      	mov	r2, r3
 8000798:	4b85      	ldr	r3, [pc, #532]	; (80009b0 <main+0x5c0>)
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	4619      	mov	r1, r3
 800079e:	4b84      	ldr	r3, [pc, #528]	; (80009b0 <main+0x5c0>)
 80007a0:	799b      	ldrb	r3, [r3, #6]
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	460b      	mov	r3, r1
 80007a6:	4983      	ldr	r1, [pc, #524]	; (80009b4 <main+0x5c4>)
 80007a8:	4883      	ldr	r0, [pc, #524]	; (80009b8 <main+0x5c8>)
 80007aa:	f004 fb53 	bl	8004e54 <siprintf>
						lcd_send_string(ngay_string);
 80007ae:	4882      	ldr	r0, [pc, #520]	; (80009b8 <main+0x5c8>)
 80007b0:	f004 fb3b 	bl	8004e2a <lcd_send_string>
						sprintf(gio_string,"%02d : %02d : %02d ",time.hour,time.minutes,time.seconds);
 80007b4:	4b7e      	ldr	r3, [pc, #504]	; (80009b0 <main+0x5c0>)
 80007b6:	789b      	ldrb	r3, [r3, #2]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b7d      	ldr	r3, [pc, #500]	; (80009b0 <main+0x5c0>)
 80007bc:	785b      	ldrb	r3, [r3, #1]
 80007be:	4619      	mov	r1, r3
 80007c0:	4b7b      	ldr	r3, [pc, #492]	; (80009b0 <main+0x5c0>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	460b      	mov	r3, r1
 80007c8:	497c      	ldr	r1, [pc, #496]	; (80009bc <main+0x5cc>)
 80007ca:	487d      	ldr	r0, [pc, #500]	; (80009c0 <main+0x5d0>)
 80007cc:	f004 fb42 	bl	8004e54 <siprintf>
						lcd_put_cur(1,1);
 80007d0:	2101      	movs	r1, #1
 80007d2:	2001      	movs	r0, #1
 80007d4:	f004 facd 	bl	8004d72 <lcd_put_cur>
						lcd_send_string(gio_string);
 80007d8:	4879      	ldr	r0, [pc, #484]	; (80009c0 <main+0x5d0>)
 80007da:	f004 fb26 	bl	8004e2a <lcd_send_string>
						lcd_put_cur(0,1);
 80007de:	2101      	movs	r1, #1
 80007e0:	2000      	movs	r0, #0
 80007e2:	f004 fac6 	bl	8004d72 <lcd_put_cur>
						lcd_send_cmd (0x0F);
 80007e6:	200f      	movs	r0, #15
 80007e8:	f004 fa4c 	bl	8004c84 <lcd_send_cmd>
						count_set_ngay=0;
 80007ec:	4b75      	ldr	r3, [pc, #468]	; (80009c4 <main+0x5d4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
						count_set_ngay1=0;
 80007f2:	4b75      	ldr	r3, [pc, #468]	; (80009c8 <main+0x5d8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
					}
					count_set_ngay++;
 80007f8:	4b72      	ldr	r3, [pc, #456]	; (80009c4 <main+0x5d4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a71      	ldr	r2, [pc, #452]	; (80009c4 <main+0x5d4>)
 8000800:	6013      	str	r3, [r2, #0]
					if(count_set_ngay>=2)
 8000802:	4b70      	ldr	r3, [pc, #448]	; (80009c4 <main+0x5d4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	f340 8398 	ble.w	8000f3c <main+0xb4c>

					{
					 	 count_set_ngay1 = count_set_ngay - 2;
 800080c:	4b6d      	ldr	r3, [pc, #436]	; (80009c4 <main+0x5d4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3b02      	subs	r3, #2
 8000812:	4a6d      	ldr	r2, [pc, #436]	; (80009c8 <main+0x5d8>)
 8000814:	6013      	str	r3, [r2, #0]
					 	 val_set_ngay[count_set_ngay1] = flag_number;
 8000816:	4b63      	ldr	r3, [pc, #396]	; (80009a4 <main+0x5b4>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	4b6b      	ldr	r3, [pc, #428]	; (80009c8 <main+0x5d8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	b2d1      	uxtb	r1, r2
 8000820:	4a6a      	ldr	r2, [pc, #424]	; (80009cc <main+0x5dc>)
 8000822:	54d1      	strb	r1, [r2, r3]
						 switch(flag_number)
 8000824:	4b5f      	ldr	r3, [pc, #380]	; (80009a4 <main+0x5b4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b0b      	cmp	r3, #11
 800082a:	f200 8145 	bhi.w	8000ab8 <main+0x6c8>
 800082e:	a201      	add	r2, pc, #4	; (adr r2, 8000834 <main+0x444>)
 8000830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000834:	08000865 	.word	0x08000865
 8000838:	0800086d 	.word	0x0800086d
 800083c:	08000875 	.word	0x08000875
 8000840:	0800087d 	.word	0x0800087d
 8000844:	08000885 	.word	0x08000885
 8000848:	0800088d 	.word	0x0800088d
 800084c:	08000895 	.word	0x08000895
 8000850:	0800089d 	.word	0x0800089d
 8000854:	080008a5 	.word	0x080008a5
 8000858:	080008ad 	.word	0x080008ad
 800085c:	08000ab9 	.word	0x08000ab9
 8000860:	080008b5 	.word	0x080008b5
						 {
							 case 0:
							 {
								 lcd_send_string("0");
 8000864:	485a      	ldr	r0, [pc, #360]	; (80009d0 <main+0x5e0>)
 8000866:	f004 fae0 	bl	8004e2a <lcd_send_string>
								 break;
 800086a:	e125      	b.n	8000ab8 <main+0x6c8>
							 }
							 case 1:
							 {
								 lcd_send_string("1");
 800086c:	4859      	ldr	r0, [pc, #356]	; (80009d4 <main+0x5e4>)
 800086e:	f004 fadc 	bl	8004e2a <lcd_send_string>
								 break;
 8000872:	e121      	b.n	8000ab8 <main+0x6c8>
							 }
							 case 2:
							 {
								 lcd_send_string("2");
 8000874:	4858      	ldr	r0, [pc, #352]	; (80009d8 <main+0x5e8>)
 8000876:	f004 fad8 	bl	8004e2a <lcd_send_string>
								 break;
 800087a:	e11d      	b.n	8000ab8 <main+0x6c8>
							 }
							 case 3:
							 {
								 lcd_send_string("3");
 800087c:	4857      	ldr	r0, [pc, #348]	; (80009dc <main+0x5ec>)
 800087e:	f004 fad4 	bl	8004e2a <lcd_send_string>
								 break;
 8000882:	e119      	b.n	8000ab8 <main+0x6c8>
							 }
							 case 4:
							 {
								 lcd_send_string("4");
 8000884:	4856      	ldr	r0, [pc, #344]	; (80009e0 <main+0x5f0>)
 8000886:	f004 fad0 	bl	8004e2a <lcd_send_string>
								 break;
 800088a:	e115      	b.n	8000ab8 <main+0x6c8>
							 }
							 case 5:
							 {
								 lcd_send_string("5");
 800088c:	4855      	ldr	r0, [pc, #340]	; (80009e4 <main+0x5f4>)
 800088e:	f004 facc 	bl	8004e2a <lcd_send_string>
								 break;
 8000892:	e111      	b.n	8000ab8 <main+0x6c8>
							 }
							 case 6:
							 {
								 lcd_send_string("6");
 8000894:	4854      	ldr	r0, [pc, #336]	; (80009e8 <main+0x5f8>)
 8000896:	f004 fac8 	bl	8004e2a <lcd_send_string>
								 break;
 800089a:	e10d      	b.n	8000ab8 <main+0x6c8>
							 }
							 case 7:
							 {
								 lcd_send_string("7");
 800089c:	4853      	ldr	r0, [pc, #332]	; (80009ec <main+0x5fc>)
 800089e:	f004 fac4 	bl	8004e2a <lcd_send_string>
								 break;
 80008a2:	e109      	b.n	8000ab8 <main+0x6c8>
							 }
							 case 8:
							 {
								 lcd_send_string("8");
 80008a4:	4852      	ldr	r0, [pc, #328]	; (80009f0 <main+0x600>)
 80008a6:	f004 fac0 	bl	8004e2a <lcd_send_string>
								 break;
 80008aa:	e105      	b.n	8000ab8 <main+0x6c8>
							 }
							 case 9:
							 {
								 lcd_send_string("9");
 80008ac:	4851      	ldr	r0, [pc, #324]	; (80009f4 <main+0x604>)
 80008ae:	f004 fabc 	bl	8004e2a <lcd_send_string>
								 break;
 80008b2:	e101      	b.n	8000ab8 <main+0x6c8>
							 }
							 case 11:
							 {
								 uint8_t value_ngay=0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	72bb      	strb	r3, [r7, #10]
								 uint8_t value_thang=0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	727b      	strb	r3, [r7, #9]
								 int value_nam =0;
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
								 uint8_t value_giay=0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	70fb      	strb	r3, [r7, #3]
								 uint8_t value_phut=0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	70bb      	strb	r3, [r7, #2]
								 uint8_t value_gio=0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	707b      	strb	r3, [r7, #1]
								 lay_data_tu_lcd(val_set_ngay,&value_ngay,&value_thang,&value_nam,&value_gio,&value_phut,&value_giay);
 80008cc:	1d38      	adds	r0, r7, #4
 80008ce:	f107 0209 	add.w	r2, r7, #9
 80008d2:	f107 010a 	add.w	r1, r7, #10
 80008d6:	1cfb      	adds	r3, r7, #3
 80008d8:	9302      	str	r3, [sp, #8]
 80008da:	1cbb      	adds	r3, r7, #2
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	1c7b      	adds	r3, r7, #1
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	4603      	mov	r3, r0
 80008e4:	4839      	ldr	r0, [pc, #228]	; (80009cc <main+0x5dc>)
 80008e6:	f7ff fd0d 	bl	8000304 <lay_data_tu_lcd>
								 bool check1 = value_ngay >0 && value_ngay<=31;
 80008ea:	7abb      	ldrb	r3, [r7, #10]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d004      	beq.n	80008fa <main+0x50a>
 80008f0:	7abb      	ldrb	r3, [r7, #10]
 80008f2:	2b1f      	cmp	r3, #31
 80008f4:	d801      	bhi.n	80008fa <main+0x50a>
 80008f6:	2301      	movs	r3, #1
 80008f8:	e000      	b.n	80008fc <main+0x50c>
 80008fa:	2300      	movs	r3, #0
 80008fc:	747b      	strb	r3, [r7, #17]
 80008fe:	7c7b      	ldrb	r3, [r7, #17]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	747b      	strb	r3, [r7, #17]
								 bool check2 = value_thang >0 && value_thang <= 12;
 8000906:	7a7b      	ldrb	r3, [r7, #9]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d004      	beq.n	8000916 <main+0x526>
 800090c:	7a7b      	ldrb	r3, [r7, #9]
 800090e:	2b0c      	cmp	r3, #12
 8000910:	d801      	bhi.n	8000916 <main+0x526>
 8000912:	2301      	movs	r3, #1
 8000914:	e000      	b.n	8000918 <main+0x528>
 8000916:	2300      	movs	r3, #0
 8000918:	743b      	strb	r3, [r7, #16]
 800091a:	7c3b      	ldrb	r3, [r7, #16]
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	743b      	strb	r3, [r7, #16]
								 bool check3 = value_nam >2000 && value_nam <=3000;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000928:	dd06      	ble.n	8000938 <main+0x548>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000930:	4293      	cmp	r3, r2
 8000932:	dc01      	bgt.n	8000938 <main+0x548>
 8000934:	2301      	movs	r3, #1
 8000936:	e000      	b.n	800093a <main+0x54a>
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
								 bool check4 = value_gio>=0 && value_gio <=23;
 8000944:	787b      	ldrb	r3, [r7, #1]
 8000946:	2b17      	cmp	r3, #23
 8000948:	bf94      	ite	ls
 800094a:	2301      	movls	r3, #1
 800094c:	2300      	movhi	r3, #0
 800094e:	73bb      	strb	r3, [r7, #14]
								 bool check5 = value_phut>=0 && value_phut <=59;
 8000950:	78bb      	ldrb	r3, [r7, #2]
 8000952:	2b3b      	cmp	r3, #59	; 0x3b
 8000954:	bf94      	ite	ls
 8000956:	2301      	movls	r3, #1
 8000958:	2300      	movhi	r3, #0
 800095a:	737b      	strb	r3, [r7, #13]
								 bool check6 = value_giay>=0 && value_giay <=59;
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	2b3b      	cmp	r3, #59	; 0x3b
 8000960:	bf94      	ite	ls
 8000962:	2301      	movls	r3, #1
 8000964:	2300      	movhi	r3, #0
 8000966:	733b      	strb	r3, [r7, #12]
								 bool check = check1 && check2 && check3 && check4 && check5 &&check6;
 8000968:	7c7b      	ldrb	r3, [r7, #17]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d044      	beq.n	80009f8 <main+0x608>
 800096e:	7c3b      	ldrb	r3, [r7, #16]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d041      	beq.n	80009f8 <main+0x608>
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d03e      	beq.n	80009f8 <main+0x608>
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d03b      	beq.n	80009f8 <main+0x608>
 8000980:	7b7b      	ldrb	r3, [r7, #13]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d038      	beq.n	80009f8 <main+0x608>
 8000986:	7b3b      	ldrb	r3, [r7, #12]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d035      	beq.n	80009f8 <main+0x608>
 800098c:	2301      	movs	r3, #1
 800098e:	e034      	b.n	80009fa <main+0x60a>
 8000990:	200002a8 	.word	0x200002a8
 8000994:	200002c4 	.word	0x200002c4
 8000998:	20000004 	.word	0x20000004
 800099c:	08005818 	.word	0x08005818
 80009a0:	08005828 	.word	0x08005828
 80009a4:	20000248 	.word	0x20000248
 80009a8:	200002b8 	.word	0x200002b8
 80009ac:	08005838 	.word	0x08005838
 80009b0:	20000354 	.word	0x20000354
 80009b4:	0800583c 	.word	0x0800583c
 80009b8:	200002d4 	.word	0x200002d4
 80009bc:	08005854 	.word	0x08005854
 80009c0:	200002e8 	.word	0x200002e8
 80009c4:	200002cc 	.word	0x200002cc
 80009c8:	20000324 	.word	0x20000324
 80009cc:	20000330 	.word	0x20000330
 80009d0:	08005868 	.word	0x08005868
 80009d4:	0800586c 	.word	0x0800586c
 80009d8:	08005870 	.word	0x08005870
 80009dc:	08005874 	.word	0x08005874
 80009e0:	08005878 	.word	0x08005878
 80009e4:	0800587c 	.word	0x0800587c
 80009e8:	08005880 	.word	0x08005880
 80009ec:	08005884 	.word	0x08005884
 80009f0:	08005888 	.word	0x08005888
 80009f4:	0800588c 	.word	0x0800588c
 80009f8:	2300      	movs	r3, #0
 80009fa:	72fb      	strb	r3, [r7, #11]
 80009fc:	7afb      	ldrb	r3, [r7, #11]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	72fb      	strb	r3, [r7, #11]
								 value_nam = value_nam - 2000;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000a0a:	607b      	str	r3, [r7, #4]
								 if(check){
 8000a0c:	7afb      	ldrb	r3, [r7, #11]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d02b      	beq.n	8000a6a <main+0x67a>
										state_lcd =4;
 8000a12:	4baa      	ldr	r3, [pc, #680]	; (8000cbc <main+0x8cc>)
 8000a14:	2204      	movs	r2, #4
 8000a16:	601a      	str	r2, [r3, #0]
										flag_ngat_timer3=1;
 8000a18:	4ba9      	ldr	r3, [pc, #676]	; (8000cc0 <main+0x8d0>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]
										lcd_clear();
 8000a1e:	f004 f991 	bl	8004d44 <lcd_clear>
										lcd_put_cur(0,1);
 8000a22:	2101      	movs	r1, #1
 8000a24:	2000      	movs	r0, #0
 8000a26:	f004 f9a4 	bl	8004d72 <lcd_put_cur>
										lcd_send_string("OK ->>");
 8000a2a:	48a6      	ldr	r0, [pc, #664]	; (8000cc4 <main+0x8d4>)
 8000a2c:	f004 f9fd 	bl	8004e2a <lcd_send_string>
										flag_number=0;
 8000a30:	4ba5      	ldr	r3, [pc, #660]	; (8000cc8 <main+0x8d8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
										flag_cho_phep_chuyen_lcd =1;
 8000a36:	4ba5      	ldr	r3, [pc, #660]	; (8000ccc <main+0x8dc>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
										lcd_send_cmd (0x0C);
 8000a3c:	200c      	movs	r0, #12
 8000a3e:	f004 f921 	bl	8004c84 <lcd_send_cmd>
										Set_Time(value_giay, value_phut, value_gio, 0, value_ngay, value_thang, value_nam);
 8000a42:	78f8      	ldrb	r0, [r7, #3]
 8000a44:	78bc      	ldrb	r4, [r7, #2]
 8000a46:	787d      	ldrb	r5, [r7, #1]
 8000a48:	7abb      	ldrb	r3, [r7, #10]
 8000a4a:	7a7a      	ldrb	r2, [r7, #9]
 8000a4c:	6879      	ldr	r1, [r7, #4]
 8000a4e:	b2c9      	uxtb	r1, r1
 8000a50:	9102      	str	r1, [sp, #8]
 8000a52:	9201      	str	r2, [sp, #4]
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2300      	movs	r3, #0
 8000a58:	462a      	mov	r2, r5
 8000a5a:	4621      	mov	r1, r4
 8000a5c:	f7ff fbb2 	bl	80001c4 <Set_Time>
										HAL_Delay(2000);
 8000a60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a64:	f001 fbdc 	bl	8002220 <HAL_Delay>
									flag_chuyen_lcd =1;
									flag_cho_phep_chuyen_lcd =1;
									lcd_send_cmd (0x0C);
									HAL_Delay(2000);
								 }
								 break;
 8000a68:	e025      	b.n	8000ab6 <main+0x6c6>
									 state_lcd =3;
 8000a6a:	4b94      	ldr	r3, [pc, #592]	; (8000cbc <main+0x8cc>)
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	601a      	str	r2, [r3, #0]
									flag_ngat_timer3=1;
 8000a70:	4b93      	ldr	r3, [pc, #588]	; (8000cc0 <main+0x8d0>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
									lcd_clear();
 8000a76:	f004 f965 	bl	8004d44 <lcd_clear>
									lcd_put_cur(0,1);
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f004 f978 	bl	8004d72 <lcd_put_cur>
									lcd_send_string("Nhap sai ");
 8000a82:	4893      	ldr	r0, [pc, #588]	; (8000cd0 <main+0x8e0>)
 8000a84:	f004 f9d1 	bl	8004e2a <lcd_send_string>
									lcd_put_cur(1,1);
 8000a88:	2101      	movs	r1, #1
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f004 f971 	bl	8004d72 <lcd_put_cur>
									lcd_send_string("Moi nhap lai ->> ");
 8000a90:	4890      	ldr	r0, [pc, #576]	; (8000cd4 <main+0x8e4>)
 8000a92:	f004 f9ca 	bl	8004e2a <lcd_send_string>
									flag_number=0;
 8000a96:	4b8c      	ldr	r3, [pc, #560]	; (8000cc8 <main+0x8d8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
									flag_chuyen_lcd =1;
 8000a9c:	4b8e      	ldr	r3, [pc, #568]	; (8000cd8 <main+0x8e8>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]
									flag_cho_phep_chuyen_lcd =1;
 8000aa2:	4b8a      	ldr	r3, [pc, #552]	; (8000ccc <main+0x8dc>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]
									lcd_send_cmd (0x0C);
 8000aa8:	200c      	movs	r0, #12
 8000aaa:	f004 f8eb 	bl	8004c84 <lcd_send_cmd>
									HAL_Delay(2000);
 8000aae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ab2:	f001 fbb5 	bl	8002220 <HAL_Delay>
								 break;
 8000ab6:	bf00      	nop
							 }

						 }
					if(count_set_ngay ==3)
 8000ab8:	4b88      	ldr	r3, [pc, #544]	; (8000cdc <main+0x8ec>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d103      	bne.n	8000ac8 <main+0x6d8>
					{
						lcd_put_cur(0,6);
 8000ac0:	2106      	movs	r1, #6
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f004 f955 	bl	8004d72 <lcd_put_cur>
					}
					if(count_set_ngay ==5)
 8000ac8:	4b84      	ldr	r3, [pc, #528]	; (8000cdc <main+0x8ec>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b05      	cmp	r3, #5
 8000ace:	d103      	bne.n	8000ad8 <main+0x6e8>
					{
						lcd_put_cur(0,11);
 8000ad0:	210b      	movs	r1, #11
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f004 f94d 	bl	8004d72 <lcd_put_cur>
					}
					if(count_set_ngay ==9)
 8000ad8:	4b80      	ldr	r3, [pc, #512]	; (8000cdc <main+0x8ec>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b09      	cmp	r3, #9
 8000ade:	d103      	bne.n	8000ae8 <main+0x6f8>
					{
						lcd_put_cur(1,1);
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f004 f945 	bl	8004d72 <lcd_put_cur>
					}
					if(count_set_ngay ==11)
 8000ae8:	4b7c      	ldr	r3, [pc, #496]	; (8000cdc <main+0x8ec>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b0b      	cmp	r3, #11
 8000aee:	d103      	bne.n	8000af8 <main+0x708>
					{
						lcd_put_cur(1,6);
 8000af0:	2106      	movs	r1, #6
 8000af2:	2001      	movs	r0, #1
 8000af4:	f004 f93d 	bl	8004d72 <lcd_put_cur>
					}
					if(count_set_ngay ==13)
 8000af8:	4b78      	ldr	r3, [pc, #480]	; (8000cdc <main+0x8ec>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b0d      	cmp	r3, #13
 8000afe:	d103      	bne.n	8000b08 <main+0x718>
					{
						lcd_put_cur(1,11);
 8000b00:	210b      	movs	r1, #11
 8000b02:	2001      	movs	r0, #1
 8000b04:	f004 f935 	bl	8004d72 <lcd_put_cur>
					}
					if(count_set_ngay ==15 )
 8000b08:	4b74      	ldr	r3, [pc, #464]	; (8000cdc <main+0x8ec>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	f040 8215 	bne.w	8000f3c <main+0xb4c>
					{
						lcd_send_cmd (0x0C);
 8000b12:	200c      	movs	r0, #12
 8000b14:	f004 f8b6 	bl	8004c84 <lcd_send_cmd>
					}
					}
					  break;
 8000b18:	e210      	b.n	8000f3c <main+0xb4c>
				}
				case 5:
				{
					if(flag_chuyen_lcd)
 8000b1a:	4b6f      	ldr	r3, [pc, #444]	; (8000cd8 <main+0x8e8>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d06d      	beq.n	8000bfe <main+0x80e>
					{
						flag_chuyen_lcd=0;
 8000b22:	4b6d      	ldr	r3, [pc, #436]	; (8000cd8 <main+0x8e8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
						lcd_clear();
 8000b28:	f004 f90c 	bl	8004d44 <lcd_clear>

						if(flag_lan_dau_cai_bao_thuc ==1)
 8000b2c:	4b6c      	ldr	r3, [pc, #432]	; (8000ce0 <main+0x8f0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d12d      	bne.n	8000b90 <main+0x7a0>
						{
							lcd_put_cur(0,1);
 8000b34:	2101      	movs	r1, #1
 8000b36:	2000      	movs	r0, #0
 8000b38:	f004 f91b 	bl	8004d72 <lcd_put_cur>
							sprintf(ngay_string,"%02d / %02d / 20%02d",time.dayofmonth,time.month,time.year);
 8000b3c:	4b69      	ldr	r3, [pc, #420]	; (8000ce4 <main+0x8f4>)
 8000b3e:	791b      	ldrb	r3, [r3, #4]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b68      	ldr	r3, [pc, #416]	; (8000ce4 <main+0x8f4>)
 8000b44:	795b      	ldrb	r3, [r3, #5]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4b66      	ldr	r3, [pc, #408]	; (8000ce4 <main+0x8f4>)
 8000b4a:	799b      	ldrb	r3, [r3, #6]
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	4965      	ldr	r1, [pc, #404]	; (8000ce8 <main+0x8f8>)
 8000b52:	4866      	ldr	r0, [pc, #408]	; (8000cec <main+0x8fc>)
 8000b54:	f004 f97e 	bl	8004e54 <siprintf>
							lcd_send_string(ngay_string);
 8000b58:	4864      	ldr	r0, [pc, #400]	; (8000cec <main+0x8fc>)
 8000b5a:	f004 f966 	bl	8004e2a <lcd_send_string>
							sprintf(gio_string,"%02d : %02d : %02d ",time.hour,time.minutes,time.seconds);
 8000b5e:	4b61      	ldr	r3, [pc, #388]	; (8000ce4 <main+0x8f4>)
 8000b60:	789b      	ldrb	r3, [r3, #2]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b5f      	ldr	r3, [pc, #380]	; (8000ce4 <main+0x8f4>)
 8000b66:	785b      	ldrb	r3, [r3, #1]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4b5e      	ldr	r3, [pc, #376]	; (8000ce4 <main+0x8f4>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	460b      	mov	r3, r1
 8000b72:	495f      	ldr	r1, [pc, #380]	; (8000cf0 <main+0x900>)
 8000b74:	485f      	ldr	r0, [pc, #380]	; (8000cf4 <main+0x904>)
 8000b76:	f004 f96d 	bl	8004e54 <siprintf>
							lcd_put_cur(1,1);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f004 f8f8 	bl	8004d72 <lcd_put_cur>
							lcd_send_string(gio_string);
 8000b82:	485c      	ldr	r0, [pc, #368]	; (8000cf4 <main+0x904>)
 8000b84:	f004 f951 	bl	8004e2a <lcd_send_string>
							flag_lan_dau_cai_bao_thuc=0;
 8000b88:	4b55      	ldr	r3, [pc, #340]	; (8000ce0 <main+0x8f0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	e029      	b.n	8000be4 <main+0x7f4>
						} else {
							lcd_put_cur(0,1);
 8000b90:	2101      	movs	r1, #1
 8000b92:	2000      	movs	r0, #0
 8000b94:	f004 f8ed 	bl	8004d72 <lcd_put_cur>
							sprintf(ngay_bao_thuc_string,"%02d / %02d / 20%02d",value_ngay_bao_thuc,value_thang_bao_thuc,value_nam_bao_thuc);
 8000b98:	4b57      	ldr	r3, [pc, #348]	; (8000cf8 <main+0x908>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b57      	ldr	r3, [pc, #348]	; (8000cfc <main+0x90c>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4b56      	ldr	r3, [pc, #344]	; (8000d00 <main+0x910>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	460b      	mov	r3, r1
 8000bac:	494e      	ldr	r1, [pc, #312]	; (8000ce8 <main+0x8f8>)
 8000bae:	4855      	ldr	r0, [pc, #340]	; (8000d04 <main+0x914>)
 8000bb0:	f004 f950 	bl	8004e54 <siprintf>
							lcd_send_string(ngay_bao_thuc_string);
 8000bb4:	4853      	ldr	r0, [pc, #332]	; (8000d04 <main+0x914>)
 8000bb6:	f004 f938 	bl	8004e2a <lcd_send_string>
							sprintf(gio_bao_thuc_string,"%02d : %02d : %02d ",value_gio_bao_thuc,value_phut_bao_thuc,value_giay_bao_thuc);
 8000bba:	4b53      	ldr	r3, [pc, #332]	; (8000d08 <main+0x918>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b52      	ldr	r3, [pc, #328]	; (8000d0c <main+0x91c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4b52      	ldr	r3, [pc, #328]	; (8000d10 <main+0x920>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4948      	ldr	r1, [pc, #288]	; (8000cf0 <main+0x900>)
 8000bd0:	4850      	ldr	r0, [pc, #320]	; (8000d14 <main+0x924>)
 8000bd2:	f004 f93f 	bl	8004e54 <siprintf>
							lcd_put_cur(1,1);
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f004 f8ca 	bl	8004d72 <lcd_put_cur>
							lcd_send_string(gio_bao_thuc_string);
 8000bde:	484d      	ldr	r0, [pc, #308]	; (8000d14 <main+0x924>)
 8000be0:	f004 f923 	bl	8004e2a <lcd_send_string>
						}

						lcd_put_cur(0,1);
 8000be4:	2101      	movs	r1, #1
 8000be6:	2000      	movs	r0, #0
 8000be8:	f004 f8c3 	bl	8004d72 <lcd_put_cur>
						lcd_send_cmd (0x0F);
 8000bec:	200f      	movs	r0, #15
 8000bee:	f004 f849 	bl	8004c84 <lcd_send_cmd>
						count_set_bao_thuc=0;
 8000bf2:	4b49      	ldr	r3, [pc, #292]	; (8000d18 <main+0x928>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
						count_set_bao_thuc1=0;
 8000bf8:	4b48      	ldr	r3, [pc, #288]	; (8000d1c <main+0x92c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
					}
					count_set_bao_thuc++;
 8000bfe:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <main+0x928>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	4a44      	ldr	r2, [pc, #272]	; (8000d18 <main+0x928>)
 8000c06:	6013      	str	r3, [r2, #0]
					if(count_set_bao_thuc>=2)
 8000c08:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <main+0x928>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	f340 8198 	ble.w	8000f42 <main+0xb52>

					{
					 	 count_set_bao_thuc1 = count_set_bao_thuc - 2;
 8000c12:	4b41      	ldr	r3, [pc, #260]	; (8000d18 <main+0x928>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3b02      	subs	r3, #2
 8000c18:	4a40      	ldr	r2, [pc, #256]	; (8000d1c <main+0x92c>)
 8000c1a:	6013      	str	r3, [r2, #0]
					 	 val_set_ngay_bao_thuc[count_set_bao_thuc1] = flag_number;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <main+0x8d8>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <main+0x92c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	b2d1      	uxtb	r1, r2
 8000c26:	4a3e      	ldr	r2, [pc, #248]	; (8000d20 <main+0x930>)
 8000c28:	54d1      	strb	r1, [r2, r3]
						 switch(flag_number)
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <main+0x8d8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b0b      	cmp	r3, #11
 8000c30:	f200 8147 	bhi.w	8000ec2 <main+0xad2>
 8000c34:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <main+0x84c>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c6d 	.word	0x08000c6d
 8000c40:	08000c75 	.word	0x08000c75
 8000c44:	08000c7d 	.word	0x08000c7d
 8000c48:	08000c85 	.word	0x08000c85
 8000c4c:	08000c8d 	.word	0x08000c8d
 8000c50:	08000c95 	.word	0x08000c95
 8000c54:	08000c9d 	.word	0x08000c9d
 8000c58:	08000ca5 	.word	0x08000ca5
 8000c5c:	08000cad 	.word	0x08000cad
 8000c60:	08000cb5 	.word	0x08000cb5
 8000c64:	08000ec3 	.word	0x08000ec3
 8000c68:	08000d4d 	.word	0x08000d4d
						 {
							 case 0:
							 {
								 lcd_send_string("0");
 8000c6c:	482d      	ldr	r0, [pc, #180]	; (8000d24 <main+0x934>)
 8000c6e:	f004 f8dc 	bl	8004e2a <lcd_send_string>
								 break;
 8000c72:	e126      	b.n	8000ec2 <main+0xad2>
							 }
							 case 1:
							 {
								 lcd_send_string("1");
 8000c74:	482c      	ldr	r0, [pc, #176]	; (8000d28 <main+0x938>)
 8000c76:	f004 f8d8 	bl	8004e2a <lcd_send_string>
								 break;
 8000c7a:	e122      	b.n	8000ec2 <main+0xad2>
							 }
							 case 2:
							 {
								 lcd_send_string("2");
 8000c7c:	482b      	ldr	r0, [pc, #172]	; (8000d2c <main+0x93c>)
 8000c7e:	f004 f8d4 	bl	8004e2a <lcd_send_string>
								 break;
 8000c82:	e11e      	b.n	8000ec2 <main+0xad2>
							 }
							 case 3:
							 {
								 lcd_send_string("3");
 8000c84:	482a      	ldr	r0, [pc, #168]	; (8000d30 <main+0x940>)
 8000c86:	f004 f8d0 	bl	8004e2a <lcd_send_string>
								 break;
 8000c8a:	e11a      	b.n	8000ec2 <main+0xad2>
							 }
							 case 4:
							 {
								 lcd_send_string("4");
 8000c8c:	4829      	ldr	r0, [pc, #164]	; (8000d34 <main+0x944>)
 8000c8e:	f004 f8cc 	bl	8004e2a <lcd_send_string>
								 break;
 8000c92:	e116      	b.n	8000ec2 <main+0xad2>
							 }
							 case 5:
							 {
								 lcd_send_string("5");
 8000c94:	4828      	ldr	r0, [pc, #160]	; (8000d38 <main+0x948>)
 8000c96:	f004 f8c8 	bl	8004e2a <lcd_send_string>
								 break;
 8000c9a:	e112      	b.n	8000ec2 <main+0xad2>
							 }
							 case 6:
							 {
								 lcd_send_string("6");
 8000c9c:	4827      	ldr	r0, [pc, #156]	; (8000d3c <main+0x94c>)
 8000c9e:	f004 f8c4 	bl	8004e2a <lcd_send_string>
								 break;
 8000ca2:	e10e      	b.n	8000ec2 <main+0xad2>
							 }
							 case 7:
							 {
								 lcd_send_string("7");
 8000ca4:	4826      	ldr	r0, [pc, #152]	; (8000d40 <main+0x950>)
 8000ca6:	f004 f8c0 	bl	8004e2a <lcd_send_string>
								 break;
 8000caa:	e10a      	b.n	8000ec2 <main+0xad2>
							 }
							 case 8:
							 {
								 lcd_send_string("8");
 8000cac:	4825      	ldr	r0, [pc, #148]	; (8000d44 <main+0x954>)
 8000cae:	f004 f8bc 	bl	8004e2a <lcd_send_string>
								 break;
 8000cb2:	e106      	b.n	8000ec2 <main+0xad2>
							 }
							 case 9:
							 {
								 lcd_send_string("9");
 8000cb4:	4824      	ldr	r0, [pc, #144]	; (8000d48 <main+0x958>)
 8000cb6:	f004 f8b8 	bl	8004e2a <lcd_send_string>
								 break;
 8000cba:	e102      	b.n	8000ec2 <main+0xad2>
 8000cbc:	200002a8 	.word	0x200002a8
 8000cc0:	20000004 	.word	0x20000004
 8000cc4:	08005890 	.word	0x08005890
 8000cc8:	20000248 	.word	0x20000248
 8000ccc:	20000018 	.word	0x20000018
 8000cd0:	08005898 	.word	0x08005898
 8000cd4:	080058a4 	.word	0x080058a4
 8000cd8:	200002c4 	.word	0x200002c4
 8000cdc:	200002cc 	.word	0x200002cc
 8000ce0:	20000010 	.word	0x20000010
 8000ce4:	20000354 	.word	0x20000354
 8000ce8:	0800583c 	.word	0x0800583c
 8000cec:	200002d4 	.word	0x200002d4
 8000cf0:	08005854 	.word	0x08005854
 8000cf4:	200002e8 	.word	0x200002e8
 8000cf8:	2000034e 	.word	0x2000034e
 8000cfc:	2000034f 	.word	0x2000034f
 8000d00:	2000001c 	.word	0x2000001c
 8000d04:	200002fc 	.word	0x200002fc
 8000d08:	20000352 	.word	0x20000352
 8000d0c:	20000351 	.word	0x20000351
 8000d10:	20000350 	.word	0x20000350
 8000d14:	20000310 	.word	0x20000310
 8000d18:	2000032c 	.word	0x2000032c
 8000d1c:	20000328 	.word	0x20000328
 8000d20:	20000340 	.word	0x20000340
 8000d24:	08005868 	.word	0x08005868
 8000d28:	0800586c 	.word	0x0800586c
 8000d2c:	08005870 	.word	0x08005870
 8000d30:	08005874 	.word	0x08005874
 8000d34:	08005878 	.word	0x08005878
 8000d38:	0800587c 	.word	0x0800587c
 8000d3c:	08005880 	.word	0x08005880
 8000d40:	08005884 	.word	0x08005884
 8000d44:	08005888 	.word	0x08005888
 8000d48:	0800588c 	.word	0x0800588c
							 }
							 case 11:
							 {
								 lay_data_tu_lcd(val_set_ngay_bao_thuc,&value_ngay_bao_thuc,&value_thang_bao_thuc,&value_nam_bao_thuc,&value_gio_bao_thuc,&value_phut_bao_thuc,&value_giay_bao_thuc);
 8000d4c:	4b7f      	ldr	r3, [pc, #508]	; (8000f4c <main+0xb5c>)
 8000d4e:	9302      	str	r3, [sp, #8]
 8000d50:	4b7f      	ldr	r3, [pc, #508]	; (8000f50 <main+0xb60>)
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	4b7f      	ldr	r3, [pc, #508]	; (8000f54 <main+0xb64>)
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	4b7f      	ldr	r3, [pc, #508]	; (8000f58 <main+0xb68>)
 8000d5a:	4a80      	ldr	r2, [pc, #512]	; (8000f5c <main+0xb6c>)
 8000d5c:	4980      	ldr	r1, [pc, #512]	; (8000f60 <main+0xb70>)
 8000d5e:	4881      	ldr	r0, [pc, #516]	; (8000f64 <main+0xb74>)
 8000d60:	f7ff fad0 	bl	8000304 <lay_data_tu_lcd>
								 bool check1 = value_ngay_bao_thuc >0 && value_ngay_bao_thuc<=31;
 8000d64:	4b7e      	ldr	r3, [pc, #504]	; (8000f60 <main+0xb70>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d005      	beq.n	8000d78 <main+0x988>
 8000d6c:	4b7c      	ldr	r3, [pc, #496]	; (8000f60 <main+0xb70>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b1f      	cmp	r3, #31
 8000d72:	d801      	bhi.n	8000d78 <main+0x988>
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <main+0x98a>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	763b      	strb	r3, [r7, #24]
 8000d7c:	7e3b      	ldrb	r3, [r7, #24]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	763b      	strb	r3, [r7, #24]
								 bool check2 = value_thang_bao_thuc >0 && value_thang_bao_thuc <= 12;
 8000d84:	4b75      	ldr	r3, [pc, #468]	; (8000f5c <main+0xb6c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d005      	beq.n	8000d98 <main+0x9a8>
 8000d8c:	4b73      	ldr	r3, [pc, #460]	; (8000f5c <main+0xb6c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b0c      	cmp	r3, #12
 8000d92:	d801      	bhi.n	8000d98 <main+0x9a8>
 8000d94:	2301      	movs	r3, #1
 8000d96:	e000      	b.n	8000d9a <main+0x9aa>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	75fb      	strb	r3, [r7, #23]
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	75fb      	strb	r3, [r7, #23]
								 bool check3 = value_nam_bao_thuc >2000 && value_nam_bao_thuc <=3000;
 8000da4:	4b6c      	ldr	r3, [pc, #432]	; (8000f58 <main+0xb68>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000dac:	dd07      	ble.n	8000dbe <main+0x9ce>
 8000dae:	4b6a      	ldr	r3, [pc, #424]	; (8000f58 <main+0xb68>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000db6:	4293      	cmp	r3, r2
 8000db8:	dc01      	bgt.n	8000dbe <main+0x9ce>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <main+0x9d0>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75bb      	strb	r3, [r7, #22]
 8000dc2:	7dbb      	ldrb	r3, [r7, #22]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	75bb      	strb	r3, [r7, #22]
								 bool check4 = value_gio_bao_thuc>=0 && value_gio_bao_thuc <=23;
 8000dca:	4b62      	ldr	r3, [pc, #392]	; (8000f54 <main+0xb64>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b17      	cmp	r3, #23
 8000dd0:	bf94      	ite	ls
 8000dd2:	2301      	movls	r3, #1
 8000dd4:	2300      	movhi	r3, #0
 8000dd6:	757b      	strb	r3, [r7, #21]
								 bool check5 = value_phut_bao_thuc>=0 && value_phut_bao_thuc <=59;
 8000dd8:	4b5d      	ldr	r3, [pc, #372]	; (8000f50 <main+0xb60>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b3b      	cmp	r3, #59	; 0x3b
 8000dde:	bf94      	ite	ls
 8000de0:	2301      	movls	r3, #1
 8000de2:	2300      	movhi	r3, #0
 8000de4:	753b      	strb	r3, [r7, #20]
								 bool check6 = value_giay_bao_thuc>=0 && value_giay_bao_thuc <=59;
 8000de6:	4b59      	ldr	r3, [pc, #356]	; (8000f4c <main+0xb5c>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b3b      	cmp	r3, #59	; 0x3b
 8000dec:	bf94      	ite	ls
 8000dee:	2301      	movls	r3, #1
 8000df0:	2300      	movhi	r3, #0
 8000df2:	74fb      	strb	r3, [r7, #19]
								 bool check = check1 && check2 && check3 && check4 && check5 &&check6;
 8000df4:	7e3b      	ldrb	r3, [r7, #24]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d010      	beq.n	8000e1c <main+0xa2c>
 8000dfa:	7dfb      	ldrb	r3, [r7, #23]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00d      	beq.n	8000e1c <main+0xa2c>
 8000e00:	7dbb      	ldrb	r3, [r7, #22]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00a      	beq.n	8000e1c <main+0xa2c>
 8000e06:	7d7b      	ldrb	r3, [r7, #21]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d007      	beq.n	8000e1c <main+0xa2c>
 8000e0c:	7d3b      	ldrb	r3, [r7, #20]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d004      	beq.n	8000e1c <main+0xa2c>
 8000e12:	7cfb      	ldrb	r3, [r7, #19]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <main+0xa2c>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <main+0xa2e>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	74bb      	strb	r3, [r7, #18]
 8000e20:	7cbb      	ldrb	r3, [r7, #18]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	74bb      	strb	r3, [r7, #18]
								 value_nam_bao_thuc = value_nam_bao_thuc - 2000;
 8000e28:	4b4b      	ldr	r3, [pc, #300]	; (8000f58 <main+0xb68>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000e30:	4a49      	ldr	r2, [pc, #292]	; (8000f58 <main+0xb68>)
 8000e32:	6013      	str	r3, [r2, #0]
								 if(check){
 8000e34:	7cbb      	ldrb	r3, [r7, #18]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d01c      	beq.n	8000e74 <main+0xa84>
										state_lcd =0;
 8000e3a:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <main+0xb78>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
										flag_ngat_timer3=1;
 8000e40:	4b4a      	ldr	r3, [pc, #296]	; (8000f6c <main+0xb7c>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
										lcd_clear();
 8000e46:	f003 ff7d 	bl	8004d44 <lcd_clear>
										lcd_put_cur(0,1);
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f003 ff90 	bl	8004d72 <lcd_put_cur>
										lcd_send_string("OK ->>");
 8000e52:	4847      	ldr	r0, [pc, #284]	; (8000f70 <main+0xb80>)
 8000e54:	f003 ffe9 	bl	8004e2a <lcd_send_string>
										flag_number=0;
 8000e58:	4b46      	ldr	r3, [pc, #280]	; (8000f74 <main+0xb84>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
										flag_cho_phep_chuyen_lcd =1;
 8000e5e:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <main+0xb88>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
										lcd_send_cmd (0x0C);
 8000e64:	200c      	movs	r0, #12
 8000e66:	f003 ff0d 	bl	8004c84 <lcd_send_cmd>
										HAL_Delay(1500);
 8000e6a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e6e:	f001 f9d7 	bl	8002220 <HAL_Delay>
									flag_chuyen_lcd =1;
									flag_cho_phep_chuyen_lcd =1;
									lcd_send_cmd (0x0C);
									HAL_Delay(1500);
								 }
								 break;
 8000e72:	e025      	b.n	8000ec0 <main+0xad0>
									 state_lcd =5;
 8000e74:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <main+0xb78>)
 8000e76:	2205      	movs	r2, #5
 8000e78:	601a      	str	r2, [r3, #0]
									flag_ngat_timer3=1;
 8000e7a:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <main+0xb7c>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
									lcd_clear();
 8000e80:	f003 ff60 	bl	8004d44 <lcd_clear>
									lcd_put_cur(0,1);
 8000e84:	2101      	movs	r1, #1
 8000e86:	2000      	movs	r0, #0
 8000e88:	f003 ff73 	bl	8004d72 <lcd_put_cur>
									lcd_send_string("Nhap sai ");
 8000e8c:	483b      	ldr	r0, [pc, #236]	; (8000f7c <main+0xb8c>)
 8000e8e:	f003 ffcc 	bl	8004e2a <lcd_send_string>
									lcd_put_cur(1,1);
 8000e92:	2101      	movs	r1, #1
 8000e94:	2001      	movs	r0, #1
 8000e96:	f003 ff6c 	bl	8004d72 <lcd_put_cur>
									lcd_send_string("Moi nhap lai ->> ");
 8000e9a:	4839      	ldr	r0, [pc, #228]	; (8000f80 <main+0xb90>)
 8000e9c:	f003 ffc5 	bl	8004e2a <lcd_send_string>
									flag_number=0;
 8000ea0:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <main+0xb84>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
									flag_chuyen_lcd =1;
 8000ea6:	4b37      	ldr	r3, [pc, #220]	; (8000f84 <main+0xb94>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
									flag_cho_phep_chuyen_lcd =1;
 8000eac:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <main+0xb88>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
									lcd_send_cmd (0x0C);
 8000eb2:	200c      	movs	r0, #12
 8000eb4:	f003 fee6 	bl	8004c84 <lcd_send_cmd>
									HAL_Delay(1500);
 8000eb8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ebc:	f001 f9b0 	bl	8002220 <HAL_Delay>
								 break;
 8000ec0:	bf00      	nop
							 }

						 }
					if(count_set_bao_thuc ==3)
 8000ec2:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <main+0xb98>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d103      	bne.n	8000ed2 <main+0xae2>
					{
						lcd_put_cur(0,6);
 8000eca:	2106      	movs	r1, #6
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f003 ff50 	bl	8004d72 <lcd_put_cur>
					}
					if(count_set_bao_thuc ==5)
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <main+0xb98>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	d103      	bne.n	8000ee2 <main+0xaf2>
					{
						lcd_put_cur(0,11);
 8000eda:	210b      	movs	r1, #11
 8000edc:	2000      	movs	r0, #0
 8000ede:	f003 ff48 	bl	8004d72 <lcd_put_cur>
					}
					if(count_set_bao_thuc ==9)
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <main+0xb98>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b09      	cmp	r3, #9
 8000ee8:	d103      	bne.n	8000ef2 <main+0xb02>
					{
						lcd_put_cur(1,1);
 8000eea:	2101      	movs	r1, #1
 8000eec:	2001      	movs	r0, #1
 8000eee:	f003 ff40 	bl	8004d72 <lcd_put_cur>
					}
					if(count_set_bao_thuc ==11)
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <main+0xb98>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b0b      	cmp	r3, #11
 8000ef8:	d103      	bne.n	8000f02 <main+0xb12>
					{
						lcd_put_cur(1,6);
 8000efa:	2106      	movs	r1, #6
 8000efc:	2001      	movs	r0, #1
 8000efe:	f003 ff38 	bl	8004d72 <lcd_put_cur>
					}
					if(count_set_bao_thuc ==13)
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <main+0xb98>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b0d      	cmp	r3, #13
 8000f08:	d103      	bne.n	8000f12 <main+0xb22>
					{
						lcd_put_cur(1,11);
 8000f0a:	210b      	movs	r1, #11
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f003 ff30 	bl	8004d72 <lcd_put_cur>
					}
					if(count_set_bao_thuc ==15 )
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <main+0xb98>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	d113      	bne.n	8000f42 <main+0xb52>
					{
						lcd_send_cmd (0x0C);
 8000f1a:	200c      	movs	r0, #12
 8000f1c:	f003 feb2 	bl	8004c84 <lcd_send_cmd>
					}
					}
					  break;
 8000f20:	e00f      	b.n	8000f42 <main+0xb52>
				}
				case 4:
				{

					lcd_clear();
 8000f22:	f003 ff0f 	bl	8004d44 <lcd_clear>
					lcd_send_cmd (0x0C);
 8000f26:	200c      	movs	r0, #12
 8000f28:	f003 feac 	bl	8004c84 <lcd_send_cmd>
					lcd_put_cur(0,1);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f003 ff1f 	bl	8004d72 <lcd_put_cur>
					lcd_send_string("cai bao thuc");
 8000f34:	4815      	ldr	r0, [pc, #84]	; (8000f8c <main+0xb9c>)
 8000f36:	f003 ff78 	bl	8004e2a <lcd_send_string>
					break;
 8000f3a:	e005      	b.n	8000f48 <main+0xb58>
					  break;
 8000f3c:	bf00      	nop
 8000f3e:	f7ff ba85 	b.w	800044c <main+0x5c>
					  break;
 8000f42:	bf00      	nop
 8000f44:	f7ff ba82 	b.w	800044c <main+0x5c>
  {
 8000f48:	f7ff ba80 	b.w	800044c <main+0x5c>
 8000f4c:	20000350 	.word	0x20000350
 8000f50:	20000351 	.word	0x20000351
 8000f54:	20000352 	.word	0x20000352
 8000f58:	2000001c 	.word	0x2000001c
 8000f5c:	2000034f 	.word	0x2000034f
 8000f60:	2000034e 	.word	0x2000034e
 8000f64:	20000340 	.word	0x20000340
 8000f68:	200002a8 	.word	0x200002a8
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	08005890 	.word	0x08005890
 8000f74:	20000248 	.word	0x20000248
 8000f78:	20000018 	.word	0x20000018
 8000f7c:	08005898 	.word	0x08005898
 8000f80:	080058a4 	.word	0x080058a4
 8000f84:	200002c4 	.word	0x200002c4
 8000f88:	2000032c 	.word	0x2000032c
 8000f8c:	080058b8 	.word	0x080058b8

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b090      	sub	sp, #64	; 0x40
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	2228      	movs	r2, #40	; 0x28
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 ff78 	bl	8004e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000fce:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fe2b 	bl	8003c34 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fe4:	f000 ff2e 	bl	8001e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	230f      	movs	r3, #15
 8000fea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2302      	movs	r3, #2
 8000fee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2102      	movs	r1, #2
 8001002:	4618      	mov	r0, r3
 8001004:	f003 f898 	bl	8004138 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800100e:	f000 ff19 	bl	8001e44 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3740      	adds	r7, #64	; 0x40
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_I2C1_Init+0x50>)
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <MX_I2C1_Init+0x54>)
 8001024:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_I2C1_Init+0x50>)
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <MX_I2C1_Init+0x58>)
 800102a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_I2C1_Init+0x50>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_I2C1_Init+0x50>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_I2C1_Init+0x50>)
 800103a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800103e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <MX_I2C1_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_I2C1_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_I2C1_Init+0x50>)
 800105a:	f001 fc11 	bl	8002880 <HAL_I2C_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001064:	f000 feee 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000009c 	.word	0x2000009c
 8001070:	40005400 	.word	0x40005400
 8001074:	000186a0 	.word	0x000186a0

08001078 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_TIM2_Init+0x94>)
 8001096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_TIM2_Init+0x94>)
 800109e:	223f      	movs	r2, #63	; 0x3f
 80010a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_TIM2_Init+0x94>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_TIM2_Init+0x94>)
 80010aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <MX_TIM2_Init+0x94>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_TIM2_Init+0x94>)
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010bc:	4813      	ldr	r0, [pc, #76]	; (800110c <MX_TIM2_Init+0x94>)
 80010be:	f003 f9b5 	bl	800442c <HAL_TIM_Base_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010c8:	f000 febc 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	4619      	mov	r1, r3
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <MX_TIM2_Init+0x94>)
 80010da:	f003 fb7f 	bl	80047dc <HAL_TIM_ConfigClockSource>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010e4:	f000 feae 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_TIM2_Init+0x94>)
 80010f6:	f003 fd55 	bl	8004ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001100:	f000 fea0 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200000f0 	.word	0x200000f0

08001110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM3_Init+0x94>)
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <MX_TIM3_Init+0x98>)
 8001130:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63000;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001134:	f24f 6218 	movw	r2, #63000	; 0xf618
 8001138:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM3_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001142:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001146:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_TIM3_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001156:	f003 f969 	bl	800442c <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001160:	f000 fe70 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001172:	f003 fb33 	bl	80047dc <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800117c:	f000 fe62 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_TIM3_Init+0x94>)
 800118e:	f003 fd09 	bl	8004ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001198:	f000 fe54 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000138 	.word	0x20000138
 80011a8:	40000400 	.word	0x40000400

080011ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <MX_TIM4_Init+0x94>)
 80011ca:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <MX_TIM4_Init+0x98>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63000;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_TIM4_Init+0x94>)
 80011d0:	f24f 6218 	movw	r2, #63000	; 0xf618
 80011d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_TIM4_Init+0x94>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_TIM4_Init+0x94>)
 80011de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_TIM4_Init+0x94>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_TIM4_Init+0x94>)
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f0:	4813      	ldr	r0, [pc, #76]	; (8001240 <MX_TIM4_Init+0x94>)
 80011f2:	f003 f91b 	bl	800442c <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80011fc:	f000 fe22 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4619      	mov	r1, r3
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <MX_TIM4_Init+0x94>)
 800120e:	f003 fae5 	bl	80047dc <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001218:	f000 fe14 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_TIM4_Init+0x94>)
 800122a:	f003 fcbb 	bl	8004ba4 <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001234:	f000 fe06 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000180 	.word	0x20000180
 8001244:	40000800 	.word	0x40000800

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125c:	4b59      	ldr	r3, [pc, #356]	; (80013c4 <MX_GPIO_Init+0x17c>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a58      	ldr	r2, [pc, #352]	; (80013c4 <MX_GPIO_Init+0x17c>)
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b56      	ldr	r3, [pc, #344]	; (80013c4 <MX_GPIO_Init+0x17c>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	4b53      	ldr	r3, [pc, #332]	; (80013c4 <MX_GPIO_Init+0x17c>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a52      	ldr	r2, [pc, #328]	; (80013c4 <MX_GPIO_Init+0x17c>)
 800127a:	f043 0320 	orr.w	r3, r3, #32
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <MX_GPIO_Init+0x17c>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <MX_GPIO_Init+0x17c>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <MX_GPIO_Init+0x17c>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <MX_GPIO_Init+0x17c>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <MX_GPIO_Init+0x17c>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a46      	ldr	r2, [pc, #280]	; (80013c4 <MX_GPIO_Init+0x17c>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <MX_GPIO_Init+0x17c>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c2:	4841      	ldr	r0, [pc, #260]	; (80013c8 <MX_GPIO_Init+0x180>)
 80012c4:	f001 faab 	bl	800281e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f240 7101 	movw	r1, #1793	; 0x701
 80012ce:	483f      	ldr	r0, [pc, #252]	; (80013cc <MX_GPIO_Init+0x184>)
 80012d0:	f001 faa5 	bl	800281e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012da:	483d      	ldr	r0, [pc, #244]	; (80013d0 <MX_GPIO_Init+0x188>)
 80012dc:	f001 fa9f 	bl	800281e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	4619      	mov	r1, r3
 80012f8:	4833      	ldr	r0, [pc, #204]	; (80013c8 <MX_GPIO_Init+0x180>)
 80012fa:	f001 f8f5 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001304:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <MX_GPIO_Init+0x18c>)
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	482d      	ldr	r0, [pc, #180]	; (80013c8 <MX_GPIO_Init+0x180>)
 8001314:	f001 f8e8 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001318:	233e      	movs	r3, #62	; 0x3e
 800131a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800131c:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <MX_GPIO_Init+0x190>)
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4619      	mov	r1, r3
 800132a:	4829      	ldr	r0, [pc, #164]	; (80013d0 <MX_GPIO_Init+0x188>)
 800132c:	f001 f8dc 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
 8001330:	f240 7301 	movw	r3, #1793	; 0x701
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800133a:	2302      	movs	r3, #2
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2302      	movs	r3, #2
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4619      	mov	r1, r3
 8001348:	4820      	ldr	r0, [pc, #128]	; (80013cc <MX_GPIO_Init+0x184>)
 800134a:	f001 f8cd 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2302      	movs	r3, #2
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	481a      	ldr	r0, [pc, #104]	; (80013d0 <MX_GPIO_Init+0x188>)
 8001368:	f001 f8be 	bl	80024e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 4, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2104      	movs	r1, #4
 8001370:	2007      	movs	r0, #7
 8001372:	f001 f874 	bl	800245e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001376:	2007      	movs	r0, #7
 8001378:	f001 f88d 	bl	8002496 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 11, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	210b      	movs	r1, #11
 8001380:	2008      	movs	r0, #8
 8001382:	f001 f86c 	bl	800245e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001386:	2008      	movs	r0, #8
 8001388:	f001 f885 	bl	8002496 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 11, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	210b      	movs	r1, #11
 8001390:	2009      	movs	r0, #9
 8001392:	f001 f864 	bl	800245e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001396:	2009      	movs	r0, #9
 8001398:	f001 f87d 	bl	8002496 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 11, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	210b      	movs	r1, #11
 80013a0:	200a      	movs	r0, #10
 80013a2:	f001 f85c 	bl	800245e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f001 f875 	bl	8002496 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 11, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	210b      	movs	r1, #11
 80013b0:	2017      	movs	r0, #23
 80013b2:	f001 f854 	bl	800245e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013b6:	2017      	movs	r0, #23
 80013b8:	f001 f86d 	bl	8002496 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40011000 	.word	0x40011000
 80013cc:	40010c00 	.word	0x40010c00
 80013d0:	40010800 	.word	0x40010800
 80013d4:	10110000 	.word	0x10110000
 80013d8:	10310000 	.word	0x10310000

080013dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	f040 80b8 	bne.w	800155e <HAL_GPIO_EXTI_Callback+0x182>
	{
		currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 80013ee:	f000 ff0d 	bl	800220c <HAL_GetTick>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a94      	ldr	r2, [pc, #592]	; (8001648 <HAL_GPIO_EXTI_Callback+0x26c>)
 80013f6:	6013      	str	r3, [r2, #0]
		if ((currentTime - lastDebounceTime) > debounceDelay)
 80013f8:	4b93      	ldr	r3, [pc, #588]	; (8001648 <HAL_GPIO_EXTI_Callback+0x26c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b93      	ldr	r3, [pc, #588]	; (800164c <HAL_GPIO_EXTI_Callback+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	1ad2      	subs	r2, r2, r3
 8001402:	4b93      	ldr	r3, [pc, #588]	; (8001650 <HAL_GPIO_EXTI_Callback+0x274>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	f240 80a9 	bls.w	800155e <HAL_GPIO_EXTI_Callback+0x182>
		{
			// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 800140c:	2104      	movs	r1, #4
 800140e:	4891      	ldr	r0, [pc, #580]	; (8001654 <HAL_GPIO_EXTI_Callback+0x278>)
 8001410:	f001 f9ee 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 809d 	bne.w	8001556 <HAL_GPIO_EXTI_Callback+0x17a>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001422:	488d      	ldr	r0, [pc, #564]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001424:	f001 f9fb 	bl	800281e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800142e:	488a      	ldr	r0, [pc, #552]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001430:	f001 f9f5 	bl	800281e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143a:	4887      	ldr	r0, [pc, #540]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 800143c:	f001 f9ef 	bl	800281e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001440:	2201      	movs	r2, #1
 8001442:	2101      	movs	r1, #1
 8001444:	4884      	ldr	r0, [pc, #528]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001446:	f001 f9ea 	bl	800281e <HAL_GPIO_WritePin>
				if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0) )
 800144a:	2104      	movs	r1, #4
 800144c:	4881      	ldr	r0, [pc, #516]	; (8001654 <HAL_GPIO_EXTI_Callback+0x278>)
 800144e:	f001 f9cf 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10e      	bne.n	8001476 <HAL_GPIO_EXTI_Callback+0x9a>
				{
					HAL_TIM_Base_Start_IT(&htim3);
 8001458:	4880      	ldr	r0, [pc, #512]	; (800165c <HAL_GPIO_EXTI_Callback+0x280>)
 800145a:	f003 f837 	bl	80044cc <HAL_TIM_Base_Start_IT>
					num1++;
 800145e:	4b80      	ldr	r3, [pc, #512]	; (8001660 <HAL_GPIO_EXTI_Callback+0x284>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	4a7e      	ldr	r2, [pc, #504]	; (8001660 <HAL_GPIO_EXTI_Callback+0x284>)
 8001466:	6013      	str	r3, [r2, #0]
					flag_number=1;
 8001468:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <HAL_GPIO_EXTI_Callback+0x288>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]
					flag_ngat_timer3=1;
 800146e:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e058      	b.n	8001528 <HAL_GPIO_EXTI_Callback+0x14c>
				} else {
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147c:	4876      	ldr	r0, [pc, #472]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 800147e:	f001 f9ce 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001488:	4873      	ldr	r0, [pc, #460]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 800148a:	f001 f9c8 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001494:	4870      	ldr	r0, [pc, #448]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001496:	f001 f9c2 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 800149a:	2201      	movs	r2, #1
 800149c:	2101      	movs	r1, #1
 800149e:	486e      	ldr	r0, [pc, #440]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 80014a0:	f001 f9bd 	bl	800281e <HAL_GPIO_WritePin>
					if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0))
 80014a4:	2104      	movs	r1, #4
 80014a6:	486b      	ldr	r0, [pc, #428]	; (8001654 <HAL_GPIO_EXTI_Callback+0x278>)
 80014a8:	f001 f9a2 	bl	80027f0 <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10e      	bne.n	80014d0 <HAL_GPIO_EXTI_Callback+0xf4>
					{
						HAL_TIM_Base_Start_IT(&htim3);
 80014b2:	486a      	ldr	r0, [pc, #424]	; (800165c <HAL_GPIO_EXTI_Callback+0x280>)
 80014b4:	f003 f80a 	bl	80044cc <HAL_TIM_Base_Start_IT>
						num2++;
 80014b8:	4b6c      	ldr	r3, [pc, #432]	; (800166c <HAL_GPIO_EXTI_Callback+0x290>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a6b      	ldr	r2, [pc, #428]	; (800166c <HAL_GPIO_EXTI_Callback+0x290>)
 80014c0:	6013      	str	r3, [r2, #0]
						flag_number=2;
 80014c2:	4b68      	ldr	r3, [pc, #416]	; (8001664 <HAL_GPIO_EXTI_Callback+0x288>)
 80014c4:	2202      	movs	r2, #2
 80014c6:	601a      	str	r2, [r3, #0]
						flag_ngat_timer3=1;
 80014c8:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_GPIO_EXTI_Callback+0x28c>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	e02b      	b.n	8001528 <HAL_GPIO_EXTI_Callback+0x14c>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d6:	4860      	ldr	r0, [pc, #384]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 80014d8:	f001 f9a1 	bl	800281e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e2:	485d      	ldr	r0, [pc, #372]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 80014e4:	f001 f99b 	bl	800281e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ee:	485a      	ldr	r0, [pc, #360]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 80014f0:	f001 f995 	bl	800281e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2101      	movs	r1, #1
 80014f8:	4857      	ldr	r0, [pc, #348]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 80014fa:	f001 f990 	bl	800281e <HAL_GPIO_WritePin>
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0))
 80014fe:	2104      	movs	r1, #4
 8001500:	4854      	ldr	r0, [pc, #336]	; (8001654 <HAL_GPIO_EXTI_Callback+0x278>)
 8001502:	f001 f975 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10d      	bne.n	8001528 <HAL_GPIO_EXTI_Callback+0x14c>
						{
							HAL_TIM_Base_Start_IT(&htim3);
 800150c:	4853      	ldr	r0, [pc, #332]	; (800165c <HAL_GPIO_EXTI_Callback+0x280>)
 800150e:	f002 ffdd 	bl	80044cc <HAL_TIM_Base_Start_IT>
							num3++;
 8001512:	4b57      	ldr	r3, [pc, #348]	; (8001670 <HAL_GPIO_EXTI_Callback+0x294>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a55      	ldr	r2, [pc, #340]	; (8001670 <HAL_GPIO_EXTI_Callback+0x294>)
 800151a:	6013      	str	r3, [r2, #0]
							flag_number=3;
 800151c:	4b51      	ldr	r3, [pc, #324]	; (8001664 <HAL_GPIO_EXTI_Callback+0x288>)
 800151e:	2203      	movs	r2, #3
 8001520:	601a      	str	r2, [r3, #0]
							flag_ngat_timer3=1;
 8001522:	4b51      	ldr	r3, [pc, #324]	; (8001668 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]
						}
					}
				}

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152e:	484a      	ldr	r0, [pc, #296]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001530:	f001 f975 	bl	800281e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800153a:	4847      	ldr	r0, [pc, #284]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 800153c:	f001 f96f 	bl	800281e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001546:	4844      	ldr	r0, [pc, #272]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001548:	f001 f969 	bl	800281e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 800154c:	2200      	movs	r2, #0
 800154e:	2101      	movs	r1, #1
 8001550:	4841      	ldr	r0, [pc, #260]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001552:	f001 f964 	bl	800281e <HAL_GPIO_WritePin>
			}

			lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8001556:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a3c      	ldr	r2, [pc, #240]	; (800164c <HAL_GPIO_EXTI_Callback+0x270>)
 800155c:	6013      	str	r3, [r2, #0]
		}
	}


	if(GPIO_Pin == GPIO_PIN_3)
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	2b08      	cmp	r3, #8
 8001562:	f040 80d9 	bne.w	8001718 <HAL_GPIO_EXTI_Callback+0x33c>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8001566:	f000 fe51 	bl	800220c <HAL_GetTick>
 800156a:	4603      	mov	r3, r0
 800156c:	4a36      	ldr	r2, [pc, #216]	; (8001648 <HAL_GPIO_EXTI_Callback+0x26c>)
 800156e:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 8001570:	4b35      	ldr	r3, [pc, #212]	; (8001648 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b35      	ldr	r3, [pc, #212]	; (800164c <HAL_GPIO_EXTI_Callback+0x270>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	1ad2      	subs	r2, r2, r3
 800157a:	4b35      	ldr	r3, [pc, #212]	; (8001650 <HAL_GPIO_EXTI_Callback+0x274>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	f240 80ca 	bls.w	8001718 <HAL_GPIO_EXTI_Callback+0x33c>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 8001584:	2108      	movs	r1, #8
 8001586:	4833      	ldr	r0, [pc, #204]	; (8001654 <HAL_GPIO_EXTI_Callback+0x278>)
 8001588:	f001 f932 	bl	80027f0 <HAL_GPIO_ReadPin>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 80be 	bne.w	8001710 <HAL_GPIO_EXTI_Callback+0x334>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159a:	482f      	ldr	r0, [pc, #188]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 800159c:	f001 f93f 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a6:	482c      	ldr	r0, [pc, #176]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 80015a8:	f001 f939 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b2:	4829      	ldr	r0, [pc, #164]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 80015b4:	f001 f933 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2101      	movs	r1, #1
 80015bc:	4826      	ldr	r0, [pc, #152]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 80015be:	f001 f92e 	bl	800281e <HAL_GPIO_WritePin>
					if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) )
 80015c2:	2108      	movs	r1, #8
 80015c4:	4823      	ldr	r0, [pc, #140]	; (8001654 <HAL_GPIO_EXTI_Callback+0x278>)
 80015c6:	f001 f913 	bl	80027f0 <HAL_GPIO_ReadPin>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10e      	bne.n	80015ee <HAL_GPIO_EXTI_Callback+0x212>
					{
						HAL_TIM_Base_Start_IT(&htim3);
 80015d0:	4822      	ldr	r0, [pc, #136]	; (800165c <HAL_GPIO_EXTI_Callback+0x280>)
 80015d2:	f002 ff7b 	bl	80044cc <HAL_TIM_Base_Start_IT>
						num4++;
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <HAL_GPIO_EXTI_Callback+0x298>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a25      	ldr	r2, [pc, #148]	; (8001674 <HAL_GPIO_EXTI_Callback+0x298>)
 80015de:	6013      	str	r3, [r2, #0]
						flag_number=4;
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_GPIO_EXTI_Callback+0x288>)
 80015e2:	2204      	movs	r2, #4
 80015e4:	601a      	str	r2, [r3, #0]
						flag_ngat_timer3=1;
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_GPIO_EXTI_Callback+0x28c>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e079      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x306>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f4:	4818      	ldr	r0, [pc, #96]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 80015f6:	f001 f912 	bl	800281e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001600:	4815      	ldr	r0, [pc, #84]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001602:	f001 f90c 	bl	800281e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800160c:	4812      	ldr	r0, [pc, #72]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 800160e:	f001 f906 	bl	800281e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001612:	2201      	movs	r2, #1
 8001614:	2101      	movs	r1, #1
 8001616:	4810      	ldr	r0, [pc, #64]	; (8001658 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001618:	f001 f901 	bl	800281e <HAL_GPIO_WritePin>
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) )
 800161c:	2108      	movs	r1, #8
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <HAL_GPIO_EXTI_Callback+0x278>)
 8001620:	f001 f8e6 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d128      	bne.n	800167c <HAL_GPIO_EXTI_Callback+0x2a0>
						{
							HAL_TIM_Base_Start_IT(&htim3);
 800162a:	480c      	ldr	r0, [pc, #48]	; (800165c <HAL_GPIO_EXTI_Callback+0x280>)
 800162c:	f002 ff4e 	bl	80044cc <HAL_TIM_Base_Start_IT>
							num5++;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001638:	6013      	str	r3, [r2, #0]
							flag_number=5;
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_GPIO_EXTI_Callback+0x288>)
 800163c:	2205      	movs	r2, #5
 800163e:	601a      	str	r2, [r3, #0]
							flag_ngat_timer3=1;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e04c      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x306>
 8001648:	20000244 	.word	0x20000244
 800164c:	20000240 	.word	0x20000240
 8001650:	20000000 	.word	0x20000000
 8001654:	40010800 	.word	0x40010800
 8001658:	40010c00 	.word	0x40010c00
 800165c:	20000138 	.word	0x20000138
 8001660:	2000024c 	.word	0x2000024c
 8001664:	20000248 	.word	0x20000248
 8001668:	20000004 	.word	0x20000004
 800166c:	20000250 	.word	0x20000250
 8001670:	20000254 	.word	0x20000254
 8001674:	20000258 	.word	0x20000258
 8001678:	2000025c 	.word	0x2000025c
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001682:	48b1      	ldr	r0, [pc, #708]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 8001684:	f001 f8cb 	bl	800281e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168e:	48ae      	ldr	r0, [pc, #696]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 8001690:	f001 f8c5 	bl	800281e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169a:	48ab      	ldr	r0, [pc, #684]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 800169c:	f001 f8bf 	bl	800281e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2101      	movs	r1, #1
 80016a4:	48a8      	ldr	r0, [pc, #672]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 80016a6:	f001 f8ba 	bl	800281e <HAL_GPIO_WritePin>
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) && (flag_cho_phep_nhan_nut == 1))
 80016aa:	2108      	movs	r1, #8
 80016ac:	48a7      	ldr	r0, [pc, #668]	; (800194c <HAL_GPIO_EXTI_Callback+0x570>)
 80016ae:	f001 f89f 	bl	80027f0 <HAL_GPIO_ReadPin>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d114      	bne.n	80016e2 <HAL_GPIO_EXTI_Callback+0x306>
 80016b8:	4ba5      	ldr	r3, [pc, #660]	; (8001950 <HAL_GPIO_EXTI_Callback+0x574>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d010      	beq.n	80016e2 <HAL_GPIO_EXTI_Callback+0x306>
							{
								flag_cho_phep_nhan_nut = 0;
 80016c0:	4ba3      	ldr	r3, [pc, #652]	; (8001950 <HAL_GPIO_EXTI_Callback+0x574>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 80016c6:	48a3      	ldr	r0, [pc, #652]	; (8001954 <HAL_GPIO_EXTI_Callback+0x578>)
 80016c8:	f002 ff00 	bl	80044cc <HAL_TIM_Base_Start_IT>
								num6++;
 80016cc:	4ba2      	ldr	r3, [pc, #648]	; (8001958 <HAL_GPIO_EXTI_Callback+0x57c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	4aa1      	ldr	r2, [pc, #644]	; (8001958 <HAL_GPIO_EXTI_Callback+0x57c>)
 80016d4:	6013      	str	r3, [r2, #0]
								flag_number=6;
 80016d6:	4ba1      	ldr	r3, [pc, #644]	; (800195c <HAL_GPIO_EXTI_Callback+0x580>)
 80016d8:	2206      	movs	r2, #6
 80016da:	601a      	str	r2, [r3, #0]
								flag_ngat_timer3=1;
 80016dc:	4ba0      	ldr	r3, [pc, #640]	; (8001960 <HAL_GPIO_EXTI_Callback+0x584>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e8:	4897      	ldr	r0, [pc, #604]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 80016ea:	f001 f898 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f4:	4894      	ldr	r0, [pc, #592]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 80016f6:	f001 f892 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001700:	4891      	ldr	r0, [pc, #580]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 8001702:	f001 f88c 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001706:	2200      	movs	r2, #0
 8001708:	2101      	movs	r1, #1
 800170a:	488f      	ldr	r0, [pc, #572]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 800170c:	f001 f887 	bl	800281e <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8001710:	4b94      	ldr	r3, [pc, #592]	; (8001964 <HAL_GPIO_EXTI_Callback+0x588>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a94      	ldr	r2, [pc, #592]	; (8001968 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001716:	6013      	str	r3, [r2, #0]
			}
		}


	if(GPIO_Pin == GPIO_PIN_4)
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	2b10      	cmp	r3, #16
 800171c:	f040 80af 	bne.w	800187e <HAL_GPIO_EXTI_Callback+0x4a2>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8001720:	f000 fd74 	bl	800220c <HAL_GetTick>
 8001724:	4603      	mov	r3, r0
 8001726:	4a8f      	ldr	r2, [pc, #572]	; (8001964 <HAL_GPIO_EXTI_Callback+0x588>)
 8001728:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 800172a:	4b8e      	ldr	r3, [pc, #568]	; (8001964 <HAL_GPIO_EXTI_Callback+0x588>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b8e      	ldr	r3, [pc, #568]	; (8001968 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	1ad2      	subs	r2, r2, r3
 8001734:	4b8d      	ldr	r3, [pc, #564]	; (800196c <HAL_GPIO_EXTI_Callback+0x590>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	f240 80a0 	bls.w	800187e <HAL_GPIO_EXTI_Callback+0x4a2>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 800173e:	2110      	movs	r1, #16
 8001740:	4882      	ldr	r0, [pc, #520]	; (800194c <HAL_GPIO_EXTI_Callback+0x570>)
 8001742:	f001 f855 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	f040 8094 	bne.w	8001876 <HAL_GPIO_EXTI_Callback+0x49a>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001754:	487c      	ldr	r0, [pc, #496]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 8001756:	f001 f862 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001760:	4879      	ldr	r0, [pc, #484]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 8001762:	f001 f85c 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800176c:	4876      	ldr	r0, [pc, #472]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 800176e:	f001 f856 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001772:	2201      	movs	r2, #1
 8001774:	2101      	movs	r1, #1
 8001776:	4874      	ldr	r0, [pc, #464]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 8001778:	f001 f851 	bl	800281e <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 800177c:	2110      	movs	r1, #16
 800177e:	4873      	ldr	r0, [pc, #460]	; (800194c <HAL_GPIO_EXTI_Callback+0x570>)
 8001780:	f001 f836 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10b      	bne.n	80017a2 <HAL_GPIO_EXTI_Callback+0x3c6>
					{
						num7++;
 800178a:	4b79      	ldr	r3, [pc, #484]	; (8001970 <HAL_GPIO_EXTI_Callback+0x594>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	4a77      	ldr	r2, [pc, #476]	; (8001970 <HAL_GPIO_EXTI_Callback+0x594>)
 8001792:	6013      	str	r3, [r2, #0]
						flag_number=7;
 8001794:	4b71      	ldr	r3, [pc, #452]	; (800195c <HAL_GPIO_EXTI_Callback+0x580>)
 8001796:	2207      	movs	r2, #7
 8001798:	601a      	str	r2, [r3, #0]
						flag_ngat_timer3=1;
 800179a:	4b71      	ldr	r3, [pc, #452]	; (8001960 <HAL_GPIO_EXTI_Callback+0x584>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	e052      	b.n	8001848 <HAL_GPIO_EXTI_Callback+0x46c>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a8:	4867      	ldr	r0, [pc, #412]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 80017aa:	f001 f838 	bl	800281e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b4:	4864      	ldr	r0, [pc, #400]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 80017b6:	f001 f832 	bl	800281e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c0:	4861      	ldr	r0, [pc, #388]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 80017c2:	f001 f82c 	bl	800281e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2101      	movs	r1, #1
 80017ca:	485f      	ldr	r0, [pc, #380]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 80017cc:	f001 f827 	bl	800281e <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 80017d0:	2110      	movs	r1, #16
 80017d2:	485e      	ldr	r0, [pc, #376]	; (800194c <HAL_GPIO_EXTI_Callback+0x570>)
 80017d4:	f001 f80c 	bl	80027f0 <HAL_GPIO_ReadPin>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10b      	bne.n	80017f6 <HAL_GPIO_EXTI_Callback+0x41a>
						{
							num8++;
 80017de:	4b65      	ldr	r3, [pc, #404]	; (8001974 <HAL_GPIO_EXTI_Callback+0x598>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	4a63      	ldr	r2, [pc, #396]	; (8001974 <HAL_GPIO_EXTI_Callback+0x598>)
 80017e6:	6013      	str	r3, [r2, #0]
							flag_number=8;
 80017e8:	4b5c      	ldr	r3, [pc, #368]	; (800195c <HAL_GPIO_EXTI_Callback+0x580>)
 80017ea:	2208      	movs	r2, #8
 80017ec:	601a      	str	r2, [r3, #0]
							flag_ngat_timer3=1;
 80017ee:	4b5c      	ldr	r3, [pc, #368]	; (8001960 <HAL_GPIO_EXTI_Callback+0x584>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	e028      	b.n	8001848 <HAL_GPIO_EXTI_Callback+0x46c>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80017f6:	2201      	movs	r2, #1
 80017f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fc:	4852      	ldr	r0, [pc, #328]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 80017fe:	f001 f80e 	bl	800281e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001802:	2201      	movs	r2, #1
 8001804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001808:	484f      	ldr	r0, [pc, #316]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 800180a:	f001 f808 	bl	800281e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001814:	484c      	ldr	r0, [pc, #304]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 8001816:	f001 f802 	bl	800281e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 800181a:	2201      	movs	r2, #1
 800181c:	2101      	movs	r1, #1
 800181e:	484a      	ldr	r0, [pc, #296]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 8001820:	f000 fffd 	bl	800281e <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8001824:	2110      	movs	r1, #16
 8001826:	4849      	ldr	r0, [pc, #292]	; (800194c <HAL_GPIO_EXTI_Callback+0x570>)
 8001828:	f000 ffe2 	bl	80027f0 <HAL_GPIO_ReadPin>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10a      	bne.n	8001848 <HAL_GPIO_EXTI_Callback+0x46c>
							{
								num9++;
 8001832:	4b51      	ldr	r3, [pc, #324]	; (8001978 <HAL_GPIO_EXTI_Callback+0x59c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	4a4f      	ldr	r2, [pc, #316]	; (8001978 <HAL_GPIO_EXTI_Callback+0x59c>)
 800183a:	6013      	str	r3, [r2, #0]
								flag_number=9;
 800183c:	4b47      	ldr	r3, [pc, #284]	; (800195c <HAL_GPIO_EXTI_Callback+0x580>)
 800183e:	2209      	movs	r2, #9
 8001840:	601a      	str	r2, [r3, #0]
								flag_ngat_timer3=1;
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_GPIO_EXTI_Callback+0x584>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184e:	483e      	ldr	r0, [pc, #248]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 8001850:	f000 ffe5 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800185a:	483b      	ldr	r0, [pc, #236]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 800185c:	f000 ffdf 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001866:	4838      	ldr	r0, [pc, #224]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 8001868:	f000 ffd9 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 800186c:	2200      	movs	r2, #0
 800186e:	2101      	movs	r1, #1
 8001870:	4835      	ldr	r0, [pc, #212]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 8001872:	f000 ffd4 	bl	800281e <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HAL_GPIO_EXTI_Callback+0x588>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a3b      	ldr	r2, [pc, #236]	; (8001968 <HAL_GPIO_EXTI_Callback+0x58c>)
 800187c:	6013      	str	r3, [r2, #0]
			}
		}



	if(GPIO_Pin == GPIO_PIN_5)
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	2b20      	cmp	r3, #32
 8001882:	f040 80fa 	bne.w	8001a7a <HAL_GPIO_EXTI_Callback+0x69e>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8001886:	f000 fcc1 	bl	800220c <HAL_GetTick>
 800188a:	4603      	mov	r3, r0
 800188c:	4a35      	ldr	r2, [pc, #212]	; (8001964 <HAL_GPIO_EXTI_Callback+0x588>)
 800188e:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_GPIO_EXTI_Callback+0x588>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b34      	ldr	r3, [pc, #208]	; (8001968 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	1ad2      	subs	r2, r2, r3
 800189a:	4b34      	ldr	r3, [pc, #208]	; (800196c <HAL_GPIO_EXTI_Callback+0x590>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	f240 80eb 	bls.w	8001a7a <HAL_GPIO_EXTI_Callback+0x69e>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 80018a4:	2120      	movs	r1, #32
 80018a6:	4829      	ldr	r0, [pc, #164]	; (800194c <HAL_GPIO_EXTI_Callback+0x570>)
 80018a8:	f000 ffa2 	bl	80027f0 <HAL_GPIO_ReadPin>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 80df 	bne.w	8001a72 <HAL_GPIO_EXTI_Callback+0x696>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ba:	4823      	ldr	r0, [pc, #140]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 80018bc:	f000 ffaf 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c6:	4820      	ldr	r0, [pc, #128]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 80018c8:	f000 ffa9 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d2:	481d      	ldr	r0, [pc, #116]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 80018d4:	f000 ffa3 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80018d8:	2201      	movs	r2, #1
 80018da:	2101      	movs	r1, #1
 80018dc:	481a      	ldr	r0, [pc, #104]	; (8001948 <HAL_GPIO_EXTI_Callback+0x56c>)
 80018de:	f000 ff9e 	bl	800281e <HAL_GPIO_WritePin>
					if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0))
 80018e2:	2120      	movs	r1, #32
 80018e4:	4819      	ldr	r0, [pc, #100]	; (800194c <HAL_GPIO_EXTI_Callback+0x570>)
 80018e6:	f000 ff83 	bl	80027f0 <HAL_GPIO_ReadPin>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d158      	bne.n	80019a2 <HAL_GPIO_EXTI_Callback+0x5c6>
					{
							HAL_TIM_Base_Start_IT(&htim3);
 80018f0:	4818      	ldr	r0, [pc, #96]	; (8001954 <HAL_GPIO_EXTI_Callback+0x578>)
 80018f2:	f002 fdeb 	bl	80044cc <HAL_TIM_Base_Start_IT>
							num_sao++;
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_GPIO_EXTI_Callback+0x5a0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3301      	adds	r3, #1
 80018fc:	4a1f      	ldr	r2, [pc, #124]	; (800197c <HAL_GPIO_EXTI_Callback+0x5a0>)
 80018fe:	6013      	str	r3, [r2, #0]
//								}
//							} else {
//								flag_cho_phep_chuyen_lcd==1;
//								state_lcd ++;
//							}
							switch(state_lcd)
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <HAL_GPIO_EXTI_Callback+0x5a4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d002      	beq.n	800190e <HAL_GPIO_EXTI_Callback+0x532>
 8001908:	2b03      	cmp	r3, #3
 800190a:	d00a      	beq.n	8001922 <HAL_GPIO_EXTI_Callback+0x546>
 800190c:	e013      	b.n	8001936 <HAL_GPIO_EXTI_Callback+0x55a>
							{
								case 1:
								{
									if(flag_di_qua_nhap_mat_khau==1)
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_GPIO_EXTI_Callback+0x5a8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d115      	bne.n	8001942 <HAL_GPIO_EXTI_Callback+0x566>
									{
										state_lcd ++;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <HAL_GPIO_EXTI_Callback+0x5a4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	4a18      	ldr	r2, [pc, #96]	; (8001980 <HAL_GPIO_EXTI_Callback+0x5a4>)
 800191e:	6013      	str	r3, [r2, #0]
									} else {

									}
									break;
 8001920:	e00f      	b.n	8001942 <HAL_GPIO_EXTI_Callback+0x566>
								}
								case 3:
								{
									if(flag_cho_phep_chuyen_lcd==1)
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_GPIO_EXTI_Callback+0x5ac>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d130      	bne.n	800198c <HAL_GPIO_EXTI_Callback+0x5b0>
									{
										state_lcd++;
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_GPIO_EXTI_Callback+0x5a4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	4a13      	ldr	r2, [pc, #76]	; (8001980 <HAL_GPIO_EXTI_Callback+0x5a4>)
 8001932:	6013      	str	r3, [r2, #0]
									}
									break;
 8001934:	e02a      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x5b0>
								}
								default:
								{
									state_lcd++;
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_GPIO_EXTI_Callback+0x5a4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	4a10      	ldr	r2, [pc, #64]	; (8001980 <HAL_GPIO_EXTI_Callback+0x5a4>)
 800193e:	6013      	str	r3, [r2, #0]
									break;
 8001940:	e025      	b.n	800198e <HAL_GPIO_EXTI_Callback+0x5b2>
									break;
 8001942:	bf00      	nop
 8001944:	e023      	b.n	800198e <HAL_GPIO_EXTI_Callback+0x5b2>
 8001946:	bf00      	nop
 8001948:	40010c00 	.word	0x40010c00
 800194c:	40010800 	.word	0x40010800
 8001950:	20000020 	.word	0x20000020
 8001954:	20000138 	.word	0x20000138
 8001958:	20000260 	.word	0x20000260
 800195c:	20000248 	.word	0x20000248
 8001960:	20000004 	.word	0x20000004
 8001964:	20000244 	.word	0x20000244
 8001968:	20000240 	.word	0x20000240
 800196c:	20000000 	.word	0x20000000
 8001970:	20000264 	.word	0x20000264
 8001974:	20000268 	.word	0x20000268
 8001978:	2000026c 	.word	0x2000026c
 800197c:	20000274 	.word	0x20000274
 8001980:	200002a8 	.word	0x200002a8
 8001984:	200002c0 	.word	0x200002c0
 8001988:	20000018 	.word	0x20000018
									break;
 800198c:	bf00      	nop
								}
							}
							flag_chuyen_lcd=1;
 800198e:	4b80      	ldr	r3, [pc, #512]	; (8001b90 <HAL_GPIO_EXTI_Callback+0x7b4>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
							flag_number=10;
 8001994:	4b7f      	ldr	r3, [pc, #508]	; (8001b94 <HAL_GPIO_EXTI_Callback+0x7b8>)
 8001996:	220a      	movs	r2, #10
 8001998:	601a      	str	r2, [r3, #0]
							flag_ngat_timer3=1;
 800199a:	4b7f      	ldr	r3, [pc, #508]	; (8001b98 <HAL_GPIO_EXTI_Callback+0x7bc>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e050      	b.n	8001a44 <HAL_GPIO_EXTI_Callback+0x668>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80019a2:	2201      	movs	r2, #1
 80019a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a8:	487c      	ldr	r0, [pc, #496]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x7c0>)
 80019aa:	f000 ff38 	bl	800281e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b4:	4879      	ldr	r0, [pc, #484]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x7c0>)
 80019b6:	f000 ff32 	bl	800281e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c0:	4876      	ldr	r0, [pc, #472]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x7c0>)
 80019c2:	f000 ff2c 	bl	800281e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80019c6:	2201      	movs	r2, #1
 80019c8:	2101      	movs	r1, #1
 80019ca:	4874      	ldr	r0, [pc, #464]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x7c0>)
 80019cc:	f000 ff27 	bl	800281e <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 80019d0:	2120      	movs	r1, #32
 80019d2:	4873      	ldr	r0, [pc, #460]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x7c4>)
 80019d4:	f000 ff0c 	bl	80027f0 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10b      	bne.n	80019f6 <HAL_GPIO_EXTI_Callback+0x61a>
						{
							num0++;
 80019de:	4b71      	ldr	r3, [pc, #452]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x7c8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	4a6f      	ldr	r2, [pc, #444]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x7c8>)
 80019e6:	6013      	str	r3, [r2, #0]
							flag_number=0;
 80019e8:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_GPIO_EXTI_Callback+0x7b8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
							flag_ngat_timer3=1;
 80019ee:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_GPIO_EXTI_Callback+0x7bc>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e026      	b.n	8001a44 <HAL_GPIO_EXTI_Callback+0x668>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80019f6:	2201      	movs	r2, #1
 80019f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fc:	4867      	ldr	r0, [pc, #412]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x7c0>)
 80019fe:	f000 ff0e 	bl	800281e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a08:	4864      	ldr	r0, [pc, #400]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x7c0>)
 8001a0a:	f000 ff08 	bl	800281e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a14:	4861      	ldr	r0, [pc, #388]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x7c0>)
 8001a16:	f000 ff02 	bl	800281e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	485f      	ldr	r0, [pc, #380]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x7c0>)
 8001a20:	f000 fefd 	bl	800281e <HAL_GPIO_WritePin>
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0))
 8001a24:	2120      	movs	r1, #32
 8001a26:	485e      	ldr	r0, [pc, #376]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x7c4>)
 8001a28:	f000 fee2 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <HAL_GPIO_EXTI_Callback+0x668>
							{
								HAL_TIM_Base_Start_IT(&htim3);
 8001a32:	485d      	ldr	r0, [pc, #372]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x7cc>)
 8001a34:	f002 fd4a 	bl	80044cc <HAL_TIM_Base_Start_IT>
								flag_number=11;
 8001a38:	4b56      	ldr	r3, [pc, #344]	; (8001b94 <HAL_GPIO_EXTI_Callback+0x7b8>)
 8001a3a:	220b      	movs	r2, #11
 8001a3c:	601a      	str	r2, [r3, #0]
								flag_ngat_timer3=1;
 8001a3e:	4b56      	ldr	r3, [pc, #344]	; (8001b98 <HAL_GPIO_EXTI_Callback+0x7bc>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4a:	4854      	ldr	r0, [pc, #336]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x7c0>)
 8001a4c:	f000 fee7 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a56:	4851      	ldr	r0, [pc, #324]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x7c0>)
 8001a58:	f000 fee1 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a62:	484e      	ldr	r0, [pc, #312]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x7c0>)
 8001a64:	f000 fedb 	bl	800281e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	484b      	ldr	r0, [pc, #300]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x7c0>)
 8001a6e:	f000 fed6 	bl	800281e <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8001a72:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <HAL_GPIO_EXTI_Callback+0x7d0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a4e      	ldr	r2, [pc, #312]	; (8001bb0 <HAL_GPIO_EXTI_Callback+0x7d4>)
 8001a78:	6013      	str	r3, [r2, #0]
			}
		}
	if(GPIO_Pin == GPIO_PIN_1)
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d13a      	bne.n	8001af6 <HAL_GPIO_EXTI_Callback+0x71a>
		{

				tick_hien_tai = __HAL_TIM_GET_COUNTER(&htim2);
 8001a80:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <HAL_GPIO_EXTI_Callback+0x7d8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	4a4c      	ldr	r2, [pc, #304]	; (8001bb8 <HAL_GPIO_EXTI_Callback+0x7dc>)
 8001a88:	6013      	str	r3, [r2, #0]
				thoi_gian_tick = tick_hien_tai - tick_lan_truoc;
 8001a8a:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <HAL_GPIO_EXTI_Callback+0x7dc>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4a4a      	ldr	r2, [pc, #296]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x7e4>)
 8001a96:	6013      	str	r3, [r2, #0]
				tick_lan_truoc = tick_hien_tai;
 8001a98:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <HAL_GPIO_EXTI_Callback+0x7dc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a47      	ldr	r2, [pc, #284]	; (8001bbc <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001a9e:	6013      	str	r3, [r2, #0]
				tick[count_tick] = thoi_gian_tick;
 8001aa0:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x7e4>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	b2d1      	uxtb	r1, r2
 8001aaa:	4a47      	ldr	r2, [pc, #284]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x7ec>)
 8001aac:	54d1      	strb	r1, [r2, r3]
				count_tick++;
 8001aae:	4b45      	ldr	r3, [pc, #276]	; (8001bc4 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	4a43      	ldr	r2, [pc, #268]	; (8001bc4 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8001ab6:	6013      	str	r3, [r2, #0]
				if(count_tick >84)
 8001ab8:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b54      	cmp	r3, #84	; 0x54
 8001abe:	dd1a      	ble.n	8001af6 <HAL_GPIO_EXTI_Callback+0x71a>
				{
					  HAL_TIM_Base_Stop_IT(&htim2);
 8001ac0:	483c      	ldr	r0, [pc, #240]	; (8001bb4 <HAL_GPIO_EXTI_Callback+0x7d8>)
 8001ac2:	f002 fd55 	bl	8004570 <HAL_TIM_Base_Stop_IT>
					  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001ac6:	2007      	movs	r0, #7
 8001ac8:	f000 fcf3 	bl	80024b2 <HAL_NVIC_DisableIRQ>
					  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
					  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
					  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
					  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	60bb      	str	r3, [r7, #8]
					  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	617b      	str	r3, [r7, #20]
					  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	4619      	mov	r1, r3
 8001af0:	482b      	ldr	r0, [pc, #172]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x7c4>)
 8001af2:	f000 fcf9 	bl	80024e8 <HAL_GPIO_Init>
				}
		}
	if(GPIO_Pin == GPIO_PIN_14)
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001afc:	d11f      	bne.n	8001b3e <HAL_GPIO_EXTI_Callback+0x762>
	{
		currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8001afe:	f000 fb85 	bl	800220c <HAL_GetTick>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a29      	ldr	r2, [pc, #164]	; (8001bac <HAL_GPIO_EXTI_Callback+0x7d0>)
 8001b06:	6013      	str	r3, [r2, #0]
		if ((currentTime - lastDebounceTime) > debounceDelay)
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <HAL_GPIO_EXTI_Callback+0x7d0>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_GPIO_EXTI_Callback+0x7d4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	1ad2      	subs	r2, r2, r3
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x7f0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d911      	bls.n	8001b3e <HAL_GPIO_EXTI_Callback+0x762>
		{
			// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == 1)
 8001b1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b1e:	482c      	ldr	r0, [pc, #176]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x7f4>)
 8001b20:	f000 fe66 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d105      	bne.n	8001b36 <HAL_GPIO_EXTI_Callback+0x75a>
			{
				flag_mode_tu_dong=1;
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x7f8>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
				flag_mode_bang_tay=0;
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x7fc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
			}


			lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_GPIO_EXTI_Callback+0x7d0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <HAL_GPIO_EXTI_Callback+0x7d4>)
 8001b3c:	6013      	str	r3, [r2, #0]
		}
	}
	if(GPIO_Pin == GPIO_PIN_14)
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b44:	d11f      	bne.n	8001b86 <HAL_GPIO_EXTI_Callback+0x7aa>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8001b46:	f000 fb61 	bl	800220c <HAL_GetTick>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_GPIO_EXTI_Callback+0x7d0>)
 8001b4e:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_GPIO_EXTI_Callback+0x7d0>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <HAL_GPIO_EXTI_Callback+0x7d4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	1ad2      	subs	r2, r2, r3
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x7f0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d911      	bls.n	8001b86 <HAL_GPIO_EXTI_Callback+0x7aa>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 1)
 8001b62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b66:	481a      	ldr	r0, [pc, #104]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x7f4>)
 8001b68:	f000 fe42 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d105      	bne.n	8001b7e <HAL_GPIO_EXTI_Callback+0x7a2>
				{
					flag_mode_bang_tay=1;
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x7fc>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
					flag_mode_tu_dong=0;
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x7f8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
				}


				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_GPIO_EXTI_Callback+0x7d0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <HAL_GPIO_EXTI_Callback+0x7d4>)
 8001b84:	6013      	str	r3, [r2, #0]
			}
		}

}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200002c4 	.word	0x200002c4
 8001b94:	20000248 	.word	0x20000248
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	40010c00 	.word	0x40010c00
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	20000270 	.word	0x20000270
 8001ba8:	20000138 	.word	0x20000138
 8001bac:	20000244 	.word	0x20000244
 8001bb0:	20000240 	.word	0x20000240
 8001bb4:	200000f0 	.word	0x200000f0
 8001bb8:	20000234 	.word	0x20000234
 8001bbc:	20000230 	.word	0x20000230
 8001bc0:	20000238 	.word	0x20000238
 8001bc4:	2000023c 	.word	0x2000023c
 8001bc8:	200001c8 	.word	0x200001c8
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	20000014 	.word	0x20000014
 8001bd8:	200002d0 	.word	0x200002d0

08001bdc <doc_dht11>:
void doc_dht11(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001be2:	4828      	ldr	r0, [pc, #160]	; (8001c84 <doc_dht11+0xa8>)
 8001be4:	f002 fc72 	bl	80044cc <HAL_TIM_Base_Start_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001be8:	2007      	movs	r0, #7
 8001bea:	f000 fc62 	bl	80024b2 <HAL_NVIC_DisableIRQ>
	count_tick =0;
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <doc_dht11+0xac>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]

	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	463b      	mov	r3, r7
 8001c12:	4619      	mov	r1, r3
 8001c14:	481d      	ldr	r0, [pc, #116]	; (8001c8c <doc_dht11+0xb0>)
 8001c16:	f000 fc67 	bl	80024e8 <HAL_GPIO_Init>

	  HAL_Delay(1);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f000 fb00 	bl	8002220 <HAL_Delay>

	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 8001c24:	2301      	movs	r3, #1
 8001c26:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	463b      	mov	r3, r7
 8001c32:	4619      	mov	r1, r3
 8001c34:	4815      	ldr	r0, [pc, #84]	; (8001c8c <doc_dht11+0xb0>)
 8001c36:	f000 fc57 	bl	80024e8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	4813      	ldr	r0, [pc, #76]	; (8001c8c <doc_dht11+0xb0>)
 8001c40:	f000 fded 	bl	800281e <HAL_GPIO_WritePin>

	HAL_Delay(20);
 8001c44:	2014      	movs	r0, #20
 8001c46:	f000 faeb 	bl	8002220 <HAL_Delay>
	if(count_tick ==0)
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <doc_dht11+0xac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <doc_dht11+0x84>
	{
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <doc_dht11+0xa8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
		tick_lan_truoc=0;
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <doc_dht11+0xb4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
	}
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c60:	2302      	movs	r3, #2
 8001c62:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <doc_dht11+0xb8>)
 8001c66:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4806      	ldr	r0, [pc, #24]	; (8001c8c <doc_dht11+0xb0>)
 8001c72:	f000 fc39 	bl	80024e8 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c76:	2007      	movs	r0, #7
 8001c78:	f000 fc0d 	bl	8002496 <HAL_NVIC_EnableIRQ>

}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200000f0 	.word	0x200000f0
 8001c88:	2000023c 	.word	0x2000023c
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	20000230 	.word	0x20000230
 8001c94:	10310000 	.word	0x10310000

08001c98 <xu_ly_tick_dht11>:
void xu_ly_tick_dht11(uint8_t* tick,uint8_t* data_dht11)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001ca2:	4828      	ldr	r0, [pc, #160]	; (8001d44 <xu_ly_tick_dht11+0xac>)
 8001ca4:	f002 fc64 	bl	8004570 <HAL_TIM_Base_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001ca8:	2007      	movs	r0, #7
 8001caa:	f000 fc02 	bl	80024b2 <HAL_NVIC_DisableIRQ>
	int count_data_dht11=0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
	for(int i =4;i<= 82;i+=2)
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	e03d      	b.n	8001d34 <xu_ly_tick_dht11+0x9c>
	{
			data_dht11[count_data_dht11/8] <<= 1;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da00      	bge.n	8001cc0 <xu_ly_tick_dht11+0x28>
 8001cbe:	3307      	adds	r3, #7
 8001cc0:	10db      	asrs	r3, r3, #3
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	440b      	add	r3, r1
 8001cd0:	0052      	lsls	r2, r2, #1
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]
			if( tick[i] > tick[i+1] ) {
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d90d      	bls.n	8001d08 <xu_ly_tick_dht11+0x70>
				data_dht11[count_data_dht11/8] |= 0;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	da00      	bge.n	8001cf4 <xu_ly_tick_dht11+0x5c>
 8001cf2:	3307      	adds	r3, #7
 8001cf4:	10db      	asrs	r3, r3, #3
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	460a      	mov	r2, r1
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	441a      	add	r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	440b      	add	r3, r1
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	e00f      	b.n	8001d28 <xu_ly_tick_dht11+0x90>
			}	else {
				data_dht11[count_data_dht11/8] |= 1;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	da00      	bge.n	8001d10 <xu_ly_tick_dht11+0x78>
 8001d0e:	3307      	adds	r3, #7
 8001d10:	10db      	asrs	r3, r3, #3
 8001d12:	4619      	mov	r1, r3
 8001d14:	460a      	mov	r2, r1
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	440b      	add	r3, r1
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]
			}
		count_data_dht11++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
	for(int i =4;i<= 82;i+=2)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	3302      	adds	r3, #2
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b52      	cmp	r3, #82	; 0x52
 8001d38:	ddbe      	ble.n	8001cb8 <xu_ly_tick_dht11+0x20>
	}

}
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	200000f0 	.word	0x200000f0

08001d48 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d58:	d108      	bne.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			count++;
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	1c54      	adds	r4, r2, #1
 8001d62:	f143 0500 	adc.w	r5, r3, #0
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001d68:	e9c3 4500 	strd	r4, r5, [r3]
		}
	if(htim->Instance == TIM3)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d105      	bne.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		flag_cho_phep_nhan_nut=1;
 8001d76:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim3);
 8001d7c:	4828      	ldr	r0, [pc, #160]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001d7e:	f002 fbf7 	bl	8004570 <HAL_TIM_Base_Stop_IT>
	}
	if(htim->Instance == TIM4)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d13e      	bne.n	8001e0a <HAL_TIM_PeriodElapsedCallback+0xc2>
	{
		if(state_lcd%6 == 2){
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001d8e:	6819      	ldr	r1, [r3, #0]
 8001d90:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001d92:	fb83 3201 	smull	r3, r2, r3, r1
 8001d96:	17cb      	asrs	r3, r1, #31
 8001d98:	1ad2      	subs	r2, r2, r3
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	1aca      	subs	r2, r1, r3
 8001da4:	2a02      	cmp	r2, #2
 8001da6:	d130      	bne.n	8001e0a <HAL_TIM_PeriodElapsedCallback+0xc2>
			  Get_Time();
 8001da8:	f7fe fa5c 	bl	8000264 <Get_Time>
			  sprintf(gio_string,"%02d : %02d : %02d ",time.hour,time.minutes,time.seconds);
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001dae:	789b      	ldrb	r3, [r3, #2]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	4619      	mov	r1, r3
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	491c      	ldr	r1, [pc, #112]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001dc2:	481d      	ldr	r0, [pc, #116]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001dc4:	f003 f846 	bl	8004e54 <siprintf>
			  sprintf(ngay_string,"%02d / %02d / 20%02d",time.dayofmonth,time.month,time.year);
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001dca:	791b      	ldrb	r3, [r3, #4]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001dd0:	795b      	ldrb	r3, [r3, #5]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001dd6:	799b      	ldrb	r3, [r3, #6]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4917      	ldr	r1, [pc, #92]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001dde:	4818      	ldr	r0, [pc, #96]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001de0:	f003 f838 	bl	8004e54 <siprintf>
			  lcd_clear();
 8001de4:	f002 ffae 	bl	8004d44 <lcd_clear>
			  lcd_send_cmd (0x0C);
 8001de8:	200c      	movs	r0, #12
 8001dea:	f002 ff4b 	bl	8004c84 <lcd_send_cmd>
			  lcd_put_cur(0,1);
 8001dee:	2101      	movs	r1, #1
 8001df0:	2000      	movs	r0, #0
 8001df2:	f002 ffbe 	bl	8004d72 <lcd_put_cur>
			  lcd_send_string(ngay_string);
 8001df6:	4812      	ldr	r0, [pc, #72]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001df8:	f003 f817 	bl	8004e2a <lcd_send_string>
			  lcd_put_cur(1,1);
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f002 ffb7 	bl	8004d72 <lcd_put_cur>
			  lcd_send_string(gio_string);
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001e06:	f003 f810 	bl	8004e2a <lcd_send_string>

		}
	}

}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bdb0      	pop	{r4, r5, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000278 	.word	0x20000278
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	20000020 	.word	0x20000020
 8001e20:	20000138 	.word	0x20000138
 8001e24:	40000800 	.word	0x40000800
 8001e28:	200002a8 	.word	0x200002a8
 8001e2c:	2aaaaaab 	.word	0x2aaaaaab
 8001e30:	20000354 	.word	0x20000354
 8001e34:	08005854 	.word	0x08005854
 8001e38:	200002e8 	.word	0x200002e8
 8001e3c:	0800583c 	.word	0x0800583c
 8001e40:	200002d4 	.word	0x200002d4

08001e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
}
 8001e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <Error_Handler+0x8>
	...

08001e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_MspInit+0x40>)
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <HAL_MspInit+0x40>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6193      	str	r3, [r2, #24]
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_MspInit+0x40>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_MspInit+0x40>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <HAL_MspInit+0x40>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	61d3      	str	r3, [r2, #28]
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_MspInit+0x40>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40021000 	.word	0x40021000

08001e94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <HAL_I2C_MspInit+0x70>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d123      	bne.n	8001efc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_I2C_MspInit+0x74>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <HAL_I2C_MspInit+0x74>)
 8001eba:	f043 0308 	orr.w	r3, r3, #8
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_I2C_MspInit+0x74>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ecc:	23c0      	movs	r3, #192	; 0xc0
 8001ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed0:	2312      	movs	r3, #18
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	4619      	mov	r1, r3
 8001ede:	480b      	ldr	r0, [pc, #44]	; (8001f0c <HAL_I2C_MspInit+0x78>)
 8001ee0:	f000 fb02 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_I2C_MspInit+0x74>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_I2C_MspInit+0x74>)
 8001eea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eee:	61d3      	str	r3, [r2, #28]
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_I2C_MspInit+0x74>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40005400 	.word	0x40005400
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010c00 	.word	0x40010c00

08001f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f20:	d114      	bne.n	8001f4c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_TIM_Base_MspInit+0xac>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a25      	ldr	r2, [pc, #148]	; (8001fbc <HAL_TIM_Base_MspInit+0xac>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	61d3      	str	r3, [r2, #28]
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <HAL_TIM_Base_MspInit+0xac>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	210a      	movs	r1, #10
 8001f3e:	201c      	movs	r0, #28
 8001f40:	f000 fa8d 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f44:	201c      	movs	r0, #28
 8001f46:	f000 faa6 	bl	8002496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f4a:	e032      	b.n	8001fb2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_TIM_Base_MspInit+0xb0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d114      	bne.n	8001f80 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_TIM_Base_MspInit+0xac>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_TIM_Base_MspInit+0xac>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_TIM_Base_MspInit+0xac>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 12, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	210c      	movs	r1, #12
 8001f72:	201d      	movs	r0, #29
 8001f74:	f000 fa73 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f78:	201d      	movs	r0, #29
 8001f7a:	f000 fa8c 	bl	8002496 <HAL_NVIC_EnableIRQ>
}
 8001f7e:	e018      	b.n	8001fb2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <HAL_TIM_Base_MspInit+0xb4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d113      	bne.n	8001fb2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_TIM_Base_MspInit+0xac>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_TIM_Base_MspInit+0xac>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	61d3      	str	r3, [r2, #28]
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_TIM_Base_MspInit+0xac>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	201e      	movs	r0, #30
 8001fa8:	f000 fa59 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001fac:	201e      	movs	r0, #30
 8001fae:	f000 fa72 	bl	8002496 <HAL_NVIC_EnableIRQ>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	40000800 	.word	0x40000800

08001fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <NMI_Handler+0x4>

08001fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <HardFault_Handler+0x4>

08001fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <MemManage_Handler+0x4>

08001fda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fde:	e7fe      	b.n	8001fde <BusFault_Handler+0x4>

08001fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <UsageFault_Handler+0x4>

08001fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800200e:	f000 f8eb 	bl	80021e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}

08002016 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800201a:	2002      	movs	r0, #2
 800201c:	f000 fc18 	bl	8002850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002028:	2004      	movs	r0, #4
 800202a:	f000 fc11 	bl	8002850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}

08002032 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002036:	2008      	movs	r0, #8
 8002038:	f000 fc0a 	bl	8002850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002044:	2010      	movs	r0, #16
 8002046:	f000 fc03 	bl	8002850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}

0800204e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002052:	2020      	movs	r0, #32
 8002054:	f000 fbfc 	bl	8002850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}

0800205c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <TIM2_IRQHandler+0x10>)
 8002062:	f002 fab3 	bl	80045cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200000f0 	.word	0x200000f0

08002070 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <TIM3_IRQHandler+0x10>)
 8002076:	f002 faa9 	bl	80045cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000138 	.word	0x20000138

08002084 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <TIM4_IRQHandler+0x10>)
 800208a:	f002 fa9f 	bl	80045cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000180 	.word	0x20000180

08002098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a0:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <_sbrk+0x5c>)
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <_sbrk+0x60>)
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <_sbrk+0x64>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <_sbrk+0x68>)
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d207      	bcs.n	80020d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c8:	f002 feec 	bl	8004ea4 <__errno>
 80020cc:	4603      	mov	r3, r0
 80020ce:	220c      	movs	r2, #12
 80020d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e009      	b.n	80020ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <_sbrk+0x64>)
 80020e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20005000 	.word	0x20005000
 80020f8:	00000400 	.word	0x00000400
 80020fc:	2000035c 	.word	0x2000035c
 8002100:	200004b0 	.word	0x200004b0

08002104 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002110:	f7ff fff8 	bl	8002104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002114:	480b      	ldr	r0, [pc, #44]	; (8002144 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002116:	490c      	ldr	r1, [pc, #48]	; (8002148 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002118:	4a0c      	ldr	r2, [pc, #48]	; (800214c <LoopFillZerobss+0x16>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800211c:	e002      	b.n	8002124 <LoopCopyDataInit>

0800211e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002122:	3304      	adds	r3, #4

08002124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002128:	d3f9      	bcc.n	800211e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800212a:	4a09      	ldr	r2, [pc, #36]	; (8002150 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800212c:	4c09      	ldr	r4, [pc, #36]	; (8002154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002130:	e001      	b.n	8002136 <LoopFillZerobss>

08002132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002134:	3204      	adds	r2, #4

08002136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002138:	d3fb      	bcc.n	8002132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800213a:	f002 feb9 	bl	8004eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800213e:	f7fe f957 	bl	80003f0 <main>
  bx lr
 8002142:	4770      	bx	lr
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002148:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800214c:	08005930 	.word	0x08005930
  ldr r2, =_sbss
 8002150:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002154:	200004ac 	.word	0x200004ac

08002158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC1_2_IRQHandler>
	...

0800215c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_Init+0x28>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <HAL_Init+0x28>)
 8002166:	f043 0310 	orr.w	r3, r3, #16
 800216a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216c:	2003      	movs	r0, #3
 800216e:	f000 f96b 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002172:	200f      	movs	r0, #15
 8002174:	f000 f808 	bl	8002188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002178:	f7ff fe6a 	bl	8001e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40022000 	.word	0x40022000

08002188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_InitTick+0x54>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_InitTick+0x58>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219e:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f991 	bl	80024ce <HAL_SYSTICK_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00e      	b.n	80021d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d80a      	bhi.n	80021d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021bc:	2200      	movs	r2, #0
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f000 f94b 	bl	800245e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c8:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <HAL_InitTick+0x5c>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000024 	.word	0x20000024
 80021e0:	2000002c 	.word	0x2000002c
 80021e4:	20000028 	.word	0x20000028

080021e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_IncTick+0x1c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_IncTick+0x20>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	4a03      	ldr	r2, [pc, #12]	; (8002208 <HAL_IncTick+0x20>)
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	2000002c 	.word	0x2000002c
 8002208:	20000360 	.word	0x20000360

0800220c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b02      	ldr	r3, [pc, #8]	; (800221c <HAL_GetTick+0x10>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000360 	.word	0x20000360

08002220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff fff0 	bl	800220c <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d005      	beq.n	8002246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_Delay+0x44>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002246:	bf00      	nop
 8002248:	f7ff ffe0 	bl	800220c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	429a      	cmp	r2, r3
 8002256:	d8f7      	bhi.n	8002248 <HAL_Delay+0x28>
  {
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000002c 	.word	0x2000002c

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4906      	ldr	r1, [pc, #24]	; (8002300 <__NVIC_EnableIRQ+0x34>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	e000e100 	.word	0xe000e100

08002304 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	2b00      	cmp	r3, #0
 8002314:	db12      	blt.n	800233c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	f003 021f 	and.w	r2, r3, #31
 800231c:	490a      	ldr	r1, [pc, #40]	; (8002348 <__NVIC_DisableIRQ+0x44>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	2001      	movs	r0, #1
 8002326:	fa00 f202 	lsl.w	r2, r0, r2
 800232a:	3320      	adds	r3, #32
 800232c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002330:	f3bf 8f4f 	dsb	sy
}
 8002334:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002336:	f3bf 8f6f 	isb	sy
}
 800233a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db0a      	blt.n	8002376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	490c      	ldr	r1, [pc, #48]	; (8002398 <__NVIC_SetPriority+0x4c>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	440b      	add	r3, r1
 8002370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002374:	e00a      	b.n	800238c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <__NVIC_SetPriority+0x50>)
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	3b04      	subs	r3, #4
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	440b      	add	r3, r1
 800238a:	761a      	strb	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1c3 0307 	rsb	r3, r3, #7
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	bf28      	it	cs
 80023be:	2304      	movcs	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d902      	bls.n	80023d0 <NVIC_EncodePriority+0x30>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b03      	subs	r3, #3
 80023ce:	e000      	b.n	80023d2 <NVIC_EncodePriority+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	4313      	orrs	r3, r2
         );
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f7ff ff90 	bl	800234c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff09 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002470:	f7ff ff1e 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff90 	bl	80023a0 <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5f 	bl	800234c <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff11 	bl	80022cc <__NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff1f 	bl	8002304 <__NVIC_DisableIRQ>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ff94 	bl	8002404 <SysTick_Config>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b08b      	sub	sp, #44	; 0x2c
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	e169      	b.n	80027d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024fc:	2201      	movs	r2, #1
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	429a      	cmp	r2, r3
 8002516:	f040 8158 	bne.w	80027ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4a9a      	ldr	r2, [pc, #616]	; (8002788 <HAL_GPIO_Init+0x2a0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d05e      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 8002524:	4a98      	ldr	r2, [pc, #608]	; (8002788 <HAL_GPIO_Init+0x2a0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d875      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 800252a:	4a98      	ldr	r2, [pc, #608]	; (800278c <HAL_GPIO_Init+0x2a4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d058      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 8002530:	4a96      	ldr	r2, [pc, #600]	; (800278c <HAL_GPIO_Init+0x2a4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d86f      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 8002536:	4a96      	ldr	r2, [pc, #600]	; (8002790 <HAL_GPIO_Init+0x2a8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d052      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 800253c:	4a94      	ldr	r2, [pc, #592]	; (8002790 <HAL_GPIO_Init+0x2a8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d869      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 8002542:	4a94      	ldr	r2, [pc, #592]	; (8002794 <HAL_GPIO_Init+0x2ac>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d04c      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 8002548:	4a92      	ldr	r2, [pc, #584]	; (8002794 <HAL_GPIO_Init+0x2ac>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d863      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 800254e:	4a92      	ldr	r2, [pc, #584]	; (8002798 <HAL_GPIO_Init+0x2b0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d046      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 8002554:	4a90      	ldr	r2, [pc, #576]	; (8002798 <HAL_GPIO_Init+0x2b0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d85d      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 800255a:	2b12      	cmp	r3, #18
 800255c:	d82a      	bhi.n	80025b4 <HAL_GPIO_Init+0xcc>
 800255e:	2b12      	cmp	r3, #18
 8002560:	d859      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <HAL_GPIO_Init+0x80>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	080025e3 	.word	0x080025e3
 800256c:	080025bd 	.word	0x080025bd
 8002570:	080025cf 	.word	0x080025cf
 8002574:	08002611 	.word	0x08002611
 8002578:	08002617 	.word	0x08002617
 800257c:	08002617 	.word	0x08002617
 8002580:	08002617 	.word	0x08002617
 8002584:	08002617 	.word	0x08002617
 8002588:	08002617 	.word	0x08002617
 800258c:	08002617 	.word	0x08002617
 8002590:	08002617 	.word	0x08002617
 8002594:	08002617 	.word	0x08002617
 8002598:	08002617 	.word	0x08002617
 800259c:	08002617 	.word	0x08002617
 80025a0:	08002617 	.word	0x08002617
 80025a4:	08002617 	.word	0x08002617
 80025a8:	08002617 	.word	0x08002617
 80025ac:	080025c5 	.word	0x080025c5
 80025b0:	080025d9 	.word	0x080025d9
 80025b4:	4a79      	ldr	r2, [pc, #484]	; (800279c <HAL_GPIO_Init+0x2b4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025ba:	e02c      	b.n	8002616 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	623b      	str	r3, [r7, #32]
          break;
 80025c2:	e029      	b.n	8002618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	3304      	adds	r3, #4
 80025ca:	623b      	str	r3, [r7, #32]
          break;
 80025cc:	e024      	b.n	8002618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	3308      	adds	r3, #8
 80025d4:	623b      	str	r3, [r7, #32]
          break;
 80025d6:	e01f      	b.n	8002618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	330c      	adds	r3, #12
 80025de:	623b      	str	r3, [r7, #32]
          break;
 80025e0:	e01a      	b.n	8002618 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ea:	2304      	movs	r3, #4
 80025ec:	623b      	str	r3, [r7, #32]
          break;
 80025ee:	e013      	b.n	8002618 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f8:	2308      	movs	r3, #8
 80025fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	611a      	str	r2, [r3, #16]
          break;
 8002602:	e009      	b.n	8002618 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002604:	2308      	movs	r3, #8
 8002606:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	615a      	str	r2, [r3, #20]
          break;
 800260e:	e003      	b.n	8002618 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002610:	2300      	movs	r3, #0
 8002612:	623b      	str	r3, [r7, #32]
          break;
 8002614:	e000      	b.n	8002618 <HAL_GPIO_Init+0x130>
          break;
 8002616:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2bff      	cmp	r3, #255	; 0xff
 800261c:	d801      	bhi.n	8002622 <HAL_GPIO_Init+0x13a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	e001      	b.n	8002626 <HAL_GPIO_Init+0x13e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d802      	bhi.n	8002634 <HAL_GPIO_Init+0x14c>
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	e002      	b.n	800263a <HAL_GPIO_Init+0x152>
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	3b08      	subs	r3, #8
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	210f      	movs	r1, #15
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	401a      	ands	r2, r3
 800264c:	6a39      	ldr	r1, [r7, #32]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	431a      	orrs	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80b1 	beq.w	80027ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002668:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <HAL_GPIO_Init+0x2b8>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_GPIO_Init+0x2b8>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6193      	str	r3, [r2, #24]
 8002674:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_GPIO_Init+0x2b8>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002680:	4a48      	ldr	r2, [pc, #288]	; (80027a4 <HAL_GPIO_Init+0x2bc>)
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	3302      	adds	r3, #2
 8002688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	220f      	movs	r2, #15
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4013      	ands	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a40      	ldr	r2, [pc, #256]	; (80027a8 <HAL_GPIO_Init+0x2c0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d013      	beq.n	80026d4 <HAL_GPIO_Init+0x1ec>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a3f      	ldr	r2, [pc, #252]	; (80027ac <HAL_GPIO_Init+0x2c4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00d      	beq.n	80026d0 <HAL_GPIO_Init+0x1e8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a3e      	ldr	r2, [pc, #248]	; (80027b0 <HAL_GPIO_Init+0x2c8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d007      	beq.n	80026cc <HAL_GPIO_Init+0x1e4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a3d      	ldr	r2, [pc, #244]	; (80027b4 <HAL_GPIO_Init+0x2cc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d101      	bne.n	80026c8 <HAL_GPIO_Init+0x1e0>
 80026c4:	2303      	movs	r3, #3
 80026c6:	e006      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026c8:	2304      	movs	r3, #4
 80026ca:	e004      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e002      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026d4:	2300      	movs	r3, #0
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	f002 0203 	and.w	r2, r2, #3
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	4093      	lsls	r3, r2
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026e6:	492f      	ldr	r1, [pc, #188]	; (80027a4 <HAL_GPIO_Init+0x2bc>)
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002700:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	492c      	ldr	r1, [pc, #176]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800270e:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	43db      	mvns	r3, r3
 8002716:	4928      	ldr	r1, [pc, #160]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002718:	4013      	ands	r3, r2
 800271a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d006      	beq.n	8002736 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002728:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	4922      	ldr	r1, [pc, #136]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
 8002734:	e006      	b.n	8002744 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	43db      	mvns	r3, r3
 800273e:	491e      	ldr	r1, [pc, #120]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002740:	4013      	ands	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d006      	beq.n	800275e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	4918      	ldr	r1, [pc, #96]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
 800275c:	e006      	b.n	800276c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	43db      	mvns	r3, r3
 8002766:	4914      	ldr	r1, [pc, #80]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002768:	4013      	ands	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d021      	beq.n	80027bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	490e      	ldr	r1, [pc, #56]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
 8002784:	e021      	b.n	80027ca <HAL_GPIO_Init+0x2e2>
 8002786:	bf00      	nop
 8002788:	10320000 	.word	0x10320000
 800278c:	10310000 	.word	0x10310000
 8002790:	10220000 	.word	0x10220000
 8002794:	10210000 	.word	0x10210000
 8002798:	10120000 	.word	0x10120000
 800279c:	10110000 	.word	0x10110000
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40010000 	.word	0x40010000
 80027a8:	40010800 	.word	0x40010800
 80027ac:	40010c00 	.word	0x40010c00
 80027b0:	40011000 	.word	0x40011000
 80027b4:	40011400 	.word	0x40011400
 80027b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_GPIO_Init+0x304>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	4909      	ldr	r1, [pc, #36]	; (80027ec <HAL_GPIO_Init+0x304>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	3301      	adds	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f47f ae8e 	bne.w	80024fc <HAL_GPIO_Init+0x14>
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	372c      	adds	r7, #44	; 0x2c
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	40010400 	.word	0x40010400

080027f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e001      	b.n	8002812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	807b      	strh	r3, [r7, #2]
 800282a:	4613      	mov	r3, r2
 800282c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800282e:	787b      	ldrb	r3, [r7, #1]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002834:	887a      	ldrh	r2, [r7, #2]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800283a:	e003      	b.n	8002844 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	041a      	lsls	r2, r3, #16
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	611a      	str	r2, [r3, #16]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
	...

08002850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	88fb      	ldrh	r3, [r7, #6]
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fdb4 	bl	80013dc <HAL_GPIO_EXTI_Callback>
  }
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40010400 	.word	0x40010400

08002880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e12b      	b.n	8002aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff faf4 	bl	8001e94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2224      	movs	r2, #36	; 0x24
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028e4:	f001 fd70 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 80028e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4a81      	ldr	r2, [pc, #516]	; (8002af4 <HAL_I2C_Init+0x274>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d807      	bhi.n	8002904 <HAL_I2C_Init+0x84>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a80      	ldr	r2, [pc, #512]	; (8002af8 <HAL_I2C_Init+0x278>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	bf94      	ite	ls
 80028fc:	2301      	movls	r3, #1
 80028fe:	2300      	movhi	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e006      	b.n	8002912 <HAL_I2C_Init+0x92>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4a7d      	ldr	r2, [pc, #500]	; (8002afc <HAL_I2C_Init+0x27c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	bf94      	ite	ls
 800290c:	2301      	movls	r3, #1
 800290e:	2300      	movhi	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0e7      	b.n	8002aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4a78      	ldr	r2, [pc, #480]	; (8002b00 <HAL_I2C_Init+0x280>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0c9b      	lsrs	r3, r3, #18
 8002924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a6a      	ldr	r2, [pc, #424]	; (8002af4 <HAL_I2C_Init+0x274>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d802      	bhi.n	8002954 <HAL_I2C_Init+0xd4>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	3301      	adds	r3, #1
 8002952:	e009      	b.n	8002968 <HAL_I2C_Init+0xe8>
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	4a69      	ldr	r2, [pc, #420]	; (8002b04 <HAL_I2C_Init+0x284>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	099b      	lsrs	r3, r3, #6
 8002966:	3301      	adds	r3, #1
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	430b      	orrs	r3, r1
 800296e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800297a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	495c      	ldr	r1, [pc, #368]	; (8002af4 <HAL_I2C_Init+0x274>)
 8002984:	428b      	cmp	r3, r1
 8002986:	d819      	bhi.n	80029bc <HAL_I2C_Init+0x13c>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1e59      	subs	r1, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fbb1 f3f3 	udiv	r3, r1, r3
 8002996:	1c59      	adds	r1, r3, #1
 8002998:	f640 73fc 	movw	r3, #4092	; 0xffc
 800299c:	400b      	ands	r3, r1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_I2C_Init+0x138>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1e59      	subs	r1, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80029b0:	3301      	adds	r3, #1
 80029b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b6:	e051      	b.n	8002a5c <HAL_I2C_Init+0x1dc>
 80029b8:	2304      	movs	r3, #4
 80029ba:	e04f      	b.n	8002a5c <HAL_I2C_Init+0x1dc>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d111      	bne.n	80029e8 <HAL_I2C_Init+0x168>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1e58      	subs	r0, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6859      	ldr	r1, [r3, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	440b      	add	r3, r1
 80029d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d6:	3301      	adds	r3, #1
 80029d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	e012      	b.n	8002a0e <HAL_I2C_Init+0x18e>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e58      	subs	r0, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	0099      	lsls	r1, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf0c      	ite	eq
 8002a08:	2301      	moveq	r3, #1
 8002a0a:	2300      	movne	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Init+0x196>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e022      	b.n	8002a5c <HAL_I2C_Init+0x1dc>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10e      	bne.n	8002a3c <HAL_I2C_Init+0x1bc>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1e58      	subs	r0, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	440b      	add	r3, r1
 8002a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3a:	e00f      	b.n	8002a5c <HAL_I2C_Init+0x1dc>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1e58      	subs	r0, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	0099      	lsls	r1, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	6809      	ldr	r1, [r1, #0]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69da      	ldr	r2, [r3, #28]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6911      	ldr	r1, [r2, #16]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68d2      	ldr	r2, [r2, #12]
 8002a96:	4311      	orrs	r1, r2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	000186a0 	.word	0x000186a0
 8002af8:	001e847f 	.word	0x001e847f
 8002afc:	003d08ff 	.word	0x003d08ff
 8002b00:	431bde83 	.word	0x431bde83
 8002b04:	10624dd3 	.word	0x10624dd3

08002b08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	461a      	mov	r2, r3
 8002b14:	460b      	mov	r3, r1
 8002b16:	817b      	strh	r3, [r7, #10]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff fb76 	bl	800220c <HAL_GetTick>
 8002b20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	f040 80e0 	bne.w	8002cf0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2319      	movs	r3, #25
 8002b36:	2201      	movs	r2, #1
 8002b38:	4970      	ldr	r1, [pc, #448]	; (8002cfc <HAL_I2C_Master_Transmit+0x1f4>)
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fe44 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0d3      	b.n	8002cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_I2C_Master_Transmit+0x50>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e0cc      	b.n	8002cf2 <HAL_I2C_Master_Transmit+0x1ea>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d007      	beq.n	8002b7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0201 	orr.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2221      	movs	r2, #33	; 0x21
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	893a      	ldrh	r2, [r7, #8]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a50      	ldr	r2, [pc, #320]	; (8002d00 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bc0:	8979      	ldrh	r1, [r7, #10]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	6a3a      	ldr	r2, [r7, #32]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fbfe 	bl	80033c8 <I2C_MasterRequestWrite>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e08d      	b.n	8002cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bec:	e066      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	6a39      	ldr	r1, [r7, #32]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 ff02 	bl	80039fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d107      	bne.n	8002c16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e06b      	b.n	8002cf2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	781a      	ldrb	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d11b      	bne.n	8002c90 <HAL_I2C_Master_Transmit+0x188>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d017      	beq.n	8002c90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	6a39      	ldr	r1, [r7, #32]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fef9 	bl	8003a8c <I2C_WaitOnBTFFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00d      	beq.n	8002cbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d107      	bne.n	8002cb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e01a      	b.n	8002cf2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d194      	bne.n	8002bee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
  }
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	00100002 	.word	0x00100002
 8002d00:	ffff0000 	.word	0xffff0000

08002d04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	461a      	mov	r2, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	817b      	strh	r3, [r7, #10]
 8002d16:	460b      	mov	r3, r1
 8002d18:	813b      	strh	r3, [r7, #8]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d1e:	f7ff fa75 	bl	800220c <HAL_GetTick>
 8002d22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	f040 80d9 	bne.w	8002ee4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2319      	movs	r3, #25
 8002d38:	2201      	movs	r2, #1
 8002d3a:	496d      	ldr	r1, [pc, #436]	; (8002ef0 <HAL_I2C_Mem_Write+0x1ec>)
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fd43 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e0cc      	b.n	8002ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_I2C_Mem_Write+0x56>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e0c5      	b.n	8002ee6 <HAL_I2C_Mem_Write+0x1e2>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d007      	beq.n	8002d80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2221      	movs	r2, #33	; 0x21
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2240      	movs	r2, #64	; 0x40
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a3a      	ldr	r2, [r7, #32]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a4d      	ldr	r2, [pc, #308]	; (8002ef4 <HAL_I2C_Mem_Write+0x1f0>)
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dc2:	88f8      	ldrh	r0, [r7, #6]
 8002dc4:	893a      	ldrh	r2, [r7, #8]
 8002dc6:	8979      	ldrh	r1, [r7, #10]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fb7a 	bl	80034cc <I2C_RequestMemoryWrite>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d052      	beq.n	8002e84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e081      	b.n	8002ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fe08 	bl	80039fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d107      	bne.n	8002e0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e06b      	b.n	8002ee6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	781a      	ldrb	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d11b      	bne.n	8002e84 <HAL_I2C_Mem_Write+0x180>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d017      	beq.n	8002e84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1aa      	bne.n	8002de2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fdfb 	bl	8003a8c <I2C_WaitOnBTFFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d107      	bne.n	8002eb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e016      	b.n	8002ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e000      	b.n	8002ee6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
  }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	00100002 	.word	0x00100002
 8002ef4:	ffff0000 	.word	0xffff0000

08002ef8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08c      	sub	sp, #48	; 0x30
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	4608      	mov	r0, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	461a      	mov	r2, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	817b      	strh	r3, [r7, #10]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	813b      	strh	r3, [r7, #8]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f16:	f7ff f979 	bl	800220c <HAL_GetTick>
 8002f1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	f040 8244 	bne.w	80033b2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2319      	movs	r3, #25
 8002f30:	2201      	movs	r2, #1
 8002f32:	4982      	ldr	r1, [pc, #520]	; (800313c <HAL_I2C_Mem_Read+0x244>)
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fc47 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
 8002f42:	e237      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_I2C_Mem_Read+0x5a>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e230      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d007      	beq.n	8002f78 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2222      	movs	r2, #34	; 0x22
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2240      	movs	r2, #64	; 0x40
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a62      	ldr	r2, [pc, #392]	; (8003140 <HAL_I2C_Mem_Read+0x248>)
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fba:	88f8      	ldrh	r0, [r7, #6]
 8002fbc:	893a      	ldrh	r2, [r7, #8]
 8002fbe:	8979      	ldrh	r1, [r7, #10]
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	4603      	mov	r3, r0
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fb14 	bl	80035f8 <I2C_RequestMemoryRead>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e1ec      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d113      	bne.n	800300a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e1c0      	b.n	800338c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	2b01      	cmp	r3, #1
 8003010:	d11e      	bne.n	8003050 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003020:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003022:	b672      	cpsid	i
}
 8003024:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800304c:	b662      	cpsie	i
}
 800304e:	e035      	b.n	80030bc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	2b02      	cmp	r3, #2
 8003056:	d11e      	bne.n	8003096 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003066:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003068:	b672      	cpsid	i
}
 800306a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003090:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003092:	b662      	cpsie	i
}
 8003094:	e012      	b.n	80030bc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030bc:	e166      	b.n	800338c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	f200 811f 	bhi.w	8003306 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d123      	bne.n	8003118 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fd21 	bl	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e167      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003116:	e139      	b.n	800338c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	2b02      	cmp	r3, #2
 800311e:	d152      	bne.n	80031c6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	2200      	movs	r2, #0
 8003128:	4906      	ldr	r1, [pc, #24]	; (8003144 <HAL_I2C_Mem_Read+0x24c>)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fb4c 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e13c      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
 800313a:	bf00      	nop
 800313c:	00100002 	.word	0x00100002
 8003140:	ffff0000 	.word	0xffff0000
 8003144:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003148:	b672      	cpsid	i
}
 800314a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800318e:	b662      	cpsie	i
}
 8003190:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c4:	e0e2      	b.n	800338c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	2200      	movs	r2, #0
 80031ce:	497b      	ldr	r1, [pc, #492]	; (80033bc <HAL_I2C_Mem_Read+0x4c4>)
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 faf9 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0e9      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031f0:	b672      	cpsid	i
}
 80031f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003226:	4b66      	ldr	r3, [pc, #408]	; (80033c0 <HAL_I2C_Mem_Read+0x4c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	08db      	lsrs	r3, r3, #3
 800322c:	4a65      	ldr	r2, [pc, #404]	; (80033c4 <HAL_I2C_Mem_Read+0x4cc>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0a1a      	lsrs	r2, r3, #8
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	00da      	lsls	r2, r3, #3
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	3b01      	subs	r3, #1
 8003244:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d118      	bne.n	800327e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800326e:	b662      	cpsie	i
}
 8003270:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e09a      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b04      	cmp	r3, #4
 800328a:	d1d9      	bne.n	8003240 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032ce:	b662      	cpsie	i
}
 80032d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003304:	e042      	b.n	800338c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003308:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fc06 	bl	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e04c      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b04      	cmp	r3, #4
 8003358:	d118      	bne.n	800338c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	f47f ae94 	bne.w	80030be <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
  }
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3728      	adds	r7, #40	; 0x28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	00010004 	.word	0x00010004
 80033c0:	20000024 	.word	0x20000024
 80033c4:	14f8b589 	.word	0x14f8b589

080033c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	460b      	mov	r3, r1
 80033d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d006      	beq.n	80033f2 <I2C_MasterRequestWrite+0x2a>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d003      	beq.n	80033f2 <I2C_MasterRequestWrite+0x2a>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033f0:	d108      	bne.n	8003404 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	e00b      	b.n	800341c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	2b12      	cmp	r3, #18
 800340a:	d107      	bne.n	800341c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800341a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f9cd 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00d      	beq.n	8003450 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003442:	d103      	bne.n	800344c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e035      	b.n	80034bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003458:	d108      	bne.n	800346c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003468:	611a      	str	r2, [r3, #16]
 800346a:	e01b      	b.n	80034a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800346c:	897b      	ldrh	r3, [r7, #10]
 800346e:	11db      	asrs	r3, r3, #7
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f003 0306 	and.w	r3, r3, #6
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f063 030f 	orn	r3, r3, #15
 800347c:	b2da      	uxtb	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	490e      	ldr	r1, [pc, #56]	; (80034c4 <I2C_MasterRequestWrite+0xfc>)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fa16 	bl	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e010      	b.n	80034bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800349a:	897b      	ldrh	r3, [r7, #10]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4907      	ldr	r1, [pc, #28]	; (80034c8 <I2C_MasterRequestWrite+0x100>)
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fa06 	bl	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	00010008 	.word	0x00010008
 80034c8:	00010002 	.word	0x00010002

080034cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	4608      	mov	r0, r1
 80034d6:	4611      	mov	r1, r2
 80034d8:	461a      	mov	r2, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	817b      	strh	r3, [r7, #10]
 80034de:	460b      	mov	r3, r1
 80034e0:	813b      	strh	r3, [r7, #8]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f960 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351c:	d103      	bne.n	8003526 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e05f      	b.n	80035ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800352a:	897b      	ldrh	r3, [r7, #10]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003538:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	6a3a      	ldr	r2, [r7, #32]
 800353e:	492d      	ldr	r1, [pc, #180]	; (80035f4 <I2C_RequestMemoryWrite+0x128>)
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f9bb 	bl	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e04c      	b.n	80035ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003568:	6a39      	ldr	r1, [r7, #32]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fa46 	bl	80039fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b04      	cmp	r3, #4
 800357c:	d107      	bne.n	800358e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e02b      	b.n	80035ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d105      	bne.n	80035a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003598:	893b      	ldrh	r3, [r7, #8]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	611a      	str	r2, [r3, #16]
 80035a2:	e021      	b.n	80035e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035a4:	893b      	ldrh	r3, [r7, #8]
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b4:	6a39      	ldr	r1, [r7, #32]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fa20 	bl	80039fc <I2C_WaitOnTXEFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00d      	beq.n	80035de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d107      	bne.n	80035da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e005      	b.n	80035ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035de:	893b      	ldrh	r3, [r7, #8]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	00010002 	.word	0x00010002

080035f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	4608      	mov	r0, r1
 8003602:	4611      	mov	r1, r2
 8003604:	461a      	mov	r2, r3
 8003606:	4603      	mov	r3, r0
 8003608:	817b      	strh	r3, [r7, #10]
 800360a:	460b      	mov	r3, r1
 800360c:	813b      	strh	r3, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003620:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003630:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	2200      	movs	r2, #0
 800363a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f8c2 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003658:	d103      	bne.n	8003662 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e0aa      	b.n	80037bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003666:	897b      	ldrh	r3, [r7, #10]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003674:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	6a3a      	ldr	r2, [r7, #32]
 800367a:	4952      	ldr	r1, [pc, #328]	; (80037c4 <I2C_RequestMemoryRead+0x1cc>)
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f91d 	bl	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e097      	b.n	80037bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a4:	6a39      	ldr	r1, [r7, #32]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f9a8 	bl	80039fc <I2C_WaitOnTXEFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00d      	beq.n	80036ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d107      	bne.n	80036ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e076      	b.n	80037bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	611a      	str	r2, [r3, #16]
 80036de:	e021      	b.n	8003724 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036e0:	893b      	ldrh	r3, [r7, #8]
 80036e2:	0a1b      	lsrs	r3, r3, #8
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f0:	6a39      	ldr	r1, [r7, #32]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f982 	bl	80039fc <I2C_WaitOnTXEFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00d      	beq.n	800371a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2b04      	cmp	r3, #4
 8003704:	d107      	bne.n	8003716 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003714:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e050      	b.n	80037bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800371a:	893b      	ldrh	r3, [r7, #8]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003726:	6a39      	ldr	r1, [r7, #32]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f967 	bl	80039fc <I2C_WaitOnTXEFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00d      	beq.n	8003750 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	2b04      	cmp	r3, #4
 800373a:	d107      	bne.n	800374c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e035      	b.n	80037bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800375e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	2200      	movs	r2, #0
 8003768:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f82b 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003786:	d103      	bne.n	8003790 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e013      	b.n	80037bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003794:	897b      	ldrh	r3, [r7, #10]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	6a3a      	ldr	r2, [r7, #32]
 80037a8:	4906      	ldr	r1, [pc, #24]	; (80037c4 <I2C_RequestMemoryRead+0x1cc>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f886 	bl	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	00010002 	.word	0x00010002

080037c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d8:	e048      	b.n	800386c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d044      	beq.n	800386c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fe fd13 	bl	800220c <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d139      	bne.n	800386c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	0c1b      	lsrs	r3, r3, #16
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d10d      	bne.n	800381e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	43da      	mvns	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	e00c      	b.n	8003838 <I2C_WaitOnFlagUntilTimeout+0x70>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	43da      	mvns	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	429a      	cmp	r2, r3
 800383c:	d116      	bne.n	800386c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e023      	b.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	0c1b      	lsrs	r3, r3, #16
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10d      	bne.n	8003892 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	43da      	mvns	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4013      	ands	r3, r2
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	e00c      	b.n	80038ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	43da      	mvns	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d093      	beq.n	80037da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ca:	e071      	b.n	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038da:	d123      	bne.n	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f043 0204 	orr.w	r2, r3, #4
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e067      	b.n	80039f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392a:	d041      	beq.n	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392c:	f7fe fc6e 	bl	800220c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	429a      	cmp	r2, r3
 800393a:	d302      	bcc.n	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d136      	bne.n	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	d10c      	bne.n	8003966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	43da      	mvns	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4013      	ands	r3, r2
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf14      	ite	ne
 800395e:	2301      	movne	r3, #1
 8003960:	2300      	moveq	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	e00b      	b.n	800397e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	43da      	mvns	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	4013      	ands	r3, r2
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d016      	beq.n	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f043 0220 	orr.w	r2, r3, #32
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e021      	b.n	80039f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d10c      	bne.n	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	43da      	mvns	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4013      	ands	r3, r2
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf14      	ite	ne
 80039cc:	2301      	movne	r3, #1
 80039ce:	2300      	moveq	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	e00b      	b.n	80039ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	43da      	mvns	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4013      	ands	r3, r2
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bf14      	ite	ne
 80039e6:	2301      	movne	r3, #1
 80039e8:	2300      	moveq	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f47f af6d 	bne.w	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a08:	e034      	b.n	8003a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f8e3 	bl	8003bd6 <I2C_IsAcknowledgeFailed>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e034      	b.n	8003a84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d028      	beq.n	8003a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7fe fbf3 	bl	800220c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d11d      	bne.n	8003a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a42:	2b80      	cmp	r3, #128	; 0x80
 8003a44:	d016      	beq.n	8003a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f043 0220 	orr.w	r2, r3, #32
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e007      	b.n	8003a84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b80      	cmp	r3, #128	; 0x80
 8003a80:	d1c3      	bne.n	8003a0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a98:	e034      	b.n	8003b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f89b 	bl	8003bd6 <I2C_IsAcknowledgeFailed>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e034      	b.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d028      	beq.n	8003b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab2:	f7fe fbab 	bl	800220c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d302      	bcc.n	8003ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d11d      	bne.n	8003b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d016      	beq.n	8003b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e007      	b.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d1c3      	bne.n	8003a9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b28:	e049      	b.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b10      	cmp	r3, #16
 8003b36:	d119      	bne.n	8003b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0210 	mvn.w	r2, #16
 8003b40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e030      	b.n	8003bce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6c:	f7fe fb4e 	bl	800220c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d302      	bcc.n	8003b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d11d      	bne.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8c:	2b40      	cmp	r3, #64	; 0x40
 8003b8e:	d016      	beq.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f043 0220 	orr.w	r2, r3, #32
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e007      	b.n	8003bce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d1ae      	bne.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bec:	d11b      	bne.n	8003c26 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f043 0204 	orr.w	r2, r3, #4
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
	...

08003c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e272      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8087 	beq.w	8003d62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c54:	4b92      	ldr	r3, [pc, #584]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d00c      	beq.n	8003c7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c60:	4b8f      	ldr	r3, [pc, #572]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d112      	bne.n	8003c92 <HAL_RCC_OscConfig+0x5e>
 8003c6c:	4b8c      	ldr	r3, [pc, #560]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c78:	d10b      	bne.n	8003c92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7a:	4b89      	ldr	r3, [pc, #548]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d06c      	beq.n	8003d60 <HAL_RCC_OscConfig+0x12c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d168      	bne.n	8003d60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e24c      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9a:	d106      	bne.n	8003caa <HAL_RCC_OscConfig+0x76>
 8003c9c:	4b80      	ldr	r3, [pc, #512]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7f      	ldr	r2, [pc, #508]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	e02e      	b.n	8003d08 <HAL_RCC_OscConfig+0xd4>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x98>
 8003cb2:	4b7b      	ldr	r3, [pc, #492]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a7a      	ldr	r2, [pc, #488]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	4b78      	ldr	r3, [pc, #480]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a77      	ldr	r2, [pc, #476]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e01d      	b.n	8003d08 <HAL_RCC_OscConfig+0xd4>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0xbc>
 8003cd6:	4b72      	ldr	r3, [pc, #456]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a71      	ldr	r2, [pc, #452]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b6f      	ldr	r3, [pc, #444]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a6e      	ldr	r2, [pc, #440]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e00b      	b.n	8003d08 <HAL_RCC_OscConfig+0xd4>
 8003cf0:	4b6b      	ldr	r3, [pc, #428]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a6a      	ldr	r2, [pc, #424]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	4b68      	ldr	r3, [pc, #416]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a67      	ldr	r2, [pc, #412]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d013      	beq.n	8003d38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fe fa7c 	bl	800220c <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d18:	f7fe fa78 	bl	800220c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e200      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2a:	4b5d      	ldr	r3, [pc, #372]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0xe4>
 8003d36:	e014      	b.n	8003d62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe fa68 	bl	800220c <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d40:	f7fe fa64 	bl	800220c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	; 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e1ec      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d52:	4b53      	ldr	r3, [pc, #332]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x10c>
 8003d5e:	e000      	b.n	8003d62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d063      	beq.n	8003e36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d6e:	4b4c      	ldr	r3, [pc, #304]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d7a:	4b49      	ldr	r3, [pc, #292]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d11c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x18c>
 8003d86:	4b46      	ldr	r3, [pc, #280]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d116      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d92:	4b43      	ldr	r3, [pc, #268]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_RCC_OscConfig+0x176>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e1c0      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003daa:	4b3d      	ldr	r3, [pc, #244]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4939      	ldr	r1, [pc, #228]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	e03a      	b.n	8003e36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d020      	beq.n	8003e0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc8:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fe fa1d 	bl	800220c <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd6:	f7fe fa19 	bl	800220c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e1a1      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de8:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df4:	4b2a      	ldr	r3, [pc, #168]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4927      	ldr	r1, [pc, #156]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	600b      	str	r3, [r1, #0]
 8003e08:	e015      	b.n	8003e36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e0a:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fe f9fc 	bl	800220c <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e18:	f7fe f9f8 	bl	800220c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e180      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d03a      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d019      	beq.n	8003e7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4a:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e50:	f7fe f9dc 	bl	800220c <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e58:	f7fe f9d8 	bl	800220c <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e160      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e76:	2001      	movs	r0, #1
 8003e78:	f000 faba 	bl	80043f0 <RCC_Delay>
 8003e7c:	e01c      	b.n	8003eb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e84:	f7fe f9c2 	bl	800220c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8a:	e00f      	b.n	8003eac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e8c:	f7fe f9be 	bl	800220c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d908      	bls.n	8003eac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e146      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	42420000 	.word	0x42420000
 8003ea8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eac:	4b92      	ldr	r3, [pc, #584]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e9      	bne.n	8003e8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80a6 	beq.w	8004012 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eca:	4b8b      	ldr	r3, [pc, #556]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10d      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed6:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	4a87      	ldr	r2, [pc, #540]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	61d3      	str	r3, [r2, #28]
 8003ee2:	4b85      	ldr	r3, [pc, #532]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef2:	4b82      	ldr	r3, [pc, #520]	; (80040fc <HAL_RCC_OscConfig+0x4c8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d118      	bne.n	8003f30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efe:	4b7f      	ldr	r3, [pc, #508]	; (80040fc <HAL_RCC_OscConfig+0x4c8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a7e      	ldr	r2, [pc, #504]	; (80040fc <HAL_RCC_OscConfig+0x4c8>)
 8003f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f0a:	f7fe f97f 	bl	800220c <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f12:	f7fe f97b 	bl	800220c <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b64      	cmp	r3, #100	; 0x64
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e103      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f24:	4b75      	ldr	r3, [pc, #468]	; (80040fc <HAL_RCC_OscConfig+0x4c8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x312>
 8003f38:	4b6f      	ldr	r3, [pc, #444]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4a6e      	ldr	r2, [pc, #440]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6213      	str	r3, [r2, #32]
 8003f44:	e02d      	b.n	8003fa2 <HAL_RCC_OscConfig+0x36e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x334>
 8003f4e:	4b6a      	ldr	r3, [pc, #424]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	4a69      	ldr	r2, [pc, #420]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	6213      	str	r3, [r2, #32]
 8003f5a:	4b67      	ldr	r3, [pc, #412]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4a66      	ldr	r2, [pc, #408]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f60:	f023 0304 	bic.w	r3, r3, #4
 8003f64:	6213      	str	r3, [r2, #32]
 8003f66:	e01c      	b.n	8003fa2 <HAL_RCC_OscConfig+0x36e>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b05      	cmp	r3, #5
 8003f6e:	d10c      	bne.n	8003f8a <HAL_RCC_OscConfig+0x356>
 8003f70:	4b61      	ldr	r3, [pc, #388]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	4a60      	ldr	r2, [pc, #384]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f76:	f043 0304 	orr.w	r3, r3, #4
 8003f7a:	6213      	str	r3, [r2, #32]
 8003f7c:	4b5e      	ldr	r3, [pc, #376]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	4a5d      	ldr	r2, [pc, #372]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6213      	str	r3, [r2, #32]
 8003f88:	e00b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x36e>
 8003f8a:	4b5b      	ldr	r3, [pc, #364]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4a5a      	ldr	r2, [pc, #360]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	6213      	str	r3, [r2, #32]
 8003f96:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	4a57      	ldr	r2, [pc, #348]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f9c:	f023 0304 	bic.w	r3, r3, #4
 8003fa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d015      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003faa:	f7fe f92f 	bl	800220c <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb0:	e00a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fe f92b 	bl	800220c <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e0b1      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc8:	4b4b      	ldr	r3, [pc, #300]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0ee      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x37e>
 8003fd4:	e014      	b.n	8004000 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7fe f919 	bl	800220c <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fe f915 	bl	800220c <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e09b      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff4:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ee      	bne.n	8003fde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d105      	bne.n	8004012 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004006:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4a3b      	ldr	r2, [pc, #236]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004010:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8087 	beq.w	800412a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800401c:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 030c 	and.w	r3, r3, #12
 8004024:	2b08      	cmp	r3, #8
 8004026:	d061      	beq.n	80040ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d146      	bne.n	80040be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004030:	4b33      	ldr	r3, [pc, #204]	; (8004100 <HAL_RCC_OscConfig+0x4cc>)
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fe f8e9 	bl	800220c <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403e:	f7fe f8e5 	bl	800220c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e06d      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004050:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f0      	bne.n	800403e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004064:	d108      	bne.n	8004078 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	4921      	ldr	r1, [pc, #132]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004078:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a19      	ldr	r1, [r3, #32]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	430b      	orrs	r3, r1
 800408a:	491b      	ldr	r1, [pc, #108]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <HAL_RCC_OscConfig+0x4cc>)
 8004092:	2201      	movs	r2, #1
 8004094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fe f8b9 	bl	800220c <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409e:	f7fe f8b5 	bl	800220c <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e03d      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x46a>
 80040bc:	e035      	b.n	800412a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_RCC_OscConfig+0x4cc>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fe f8a2 	bl	800220c <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fe f89e 	bl	800220c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e026      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x498>
 80040ea:	e01e      	b.n	800412a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e019      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40007000 	.word	0x40007000
 8004100:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_OscConfig+0x500>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	429a      	cmp	r2, r3
 8004116:	d106      	bne.n	8004126 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d001      	beq.n	800412a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000

08004138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0d0      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b6a      	ldr	r3, [pc, #424]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d910      	bls.n	800417c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b67      	ldr	r3, [pc, #412]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 0207 	bic.w	r2, r3, #7
 8004162:	4965      	ldr	r1, [pc, #404]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b63      	ldr	r3, [pc, #396]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0b8      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004194:	4b59      	ldr	r3, [pc, #356]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a58      	ldr	r2, [pc, #352]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800419e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ac:	4b53      	ldr	r3, [pc, #332]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a52      	ldr	r2, [pc, #328]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80041b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b50      	ldr	r3, [pc, #320]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	494d      	ldr	r1, [pc, #308]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d040      	beq.n	8004258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041de:	4b47      	ldr	r3, [pc, #284]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d115      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e07f      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d107      	bne.n	8004206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f6:	4b41      	ldr	r3, [pc, #260]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e073      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004206:	4b3d      	ldr	r3, [pc, #244]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e06b      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004216:	4b39      	ldr	r3, [pc, #228]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f023 0203 	bic.w	r2, r3, #3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4936      	ldr	r1, [pc, #216]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	4313      	orrs	r3, r2
 8004226:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004228:	f7fd fff0 	bl	800220c <HAL_GetTick>
 800422c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	e00a      	b.n	8004246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004230:	f7fd ffec 	bl	800220c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	; 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e053      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 020c 	and.w	r2, r3, #12
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	429a      	cmp	r2, r3
 8004256:	d1eb      	bne.n	8004230 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d210      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 0207 	bic.w	r2, r3, #7
 800426e:	4922      	ldr	r1, [pc, #136]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e032      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004294:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4916      	ldr	r1, [pc, #88]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	490e      	ldr	r1, [pc, #56]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042c6:	f000 f821 	bl	800430c <HAL_RCC_GetSysClockFreq>
 80042ca:	4602      	mov	r2, r0
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	091b      	lsrs	r3, r3, #4
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	490a      	ldr	r1, [pc, #40]	; (8004300 <HAL_RCC_ClockConfig+0x1c8>)
 80042d8:	5ccb      	ldrb	r3, [r1, r3]
 80042da:	fa22 f303 	lsr.w	r3, r2, r3
 80042de:	4a09      	ldr	r2, [pc, #36]	; (8004304 <HAL_RCC_ClockConfig+0x1cc>)
 80042e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_RCC_ClockConfig+0x1d0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fd ff4e 	bl	8002188 <HAL_InitTick>

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40022000 	.word	0x40022000
 80042fc:	40021000 	.word	0x40021000
 8004300:	080058c8 	.word	0x080058c8
 8004304:	20000024 	.word	0x20000024
 8004308:	20000028 	.word	0x20000028

0800430c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	2300      	movs	r3, #0
 8004320:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004326:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b04      	cmp	r3, #4
 8004334:	d002      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x30>
 8004336:	2b08      	cmp	r3, #8
 8004338:	d003      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x36>
 800433a:	e027      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800433c:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800433e:	613b      	str	r3, [r7, #16]
      break;
 8004340:	e027      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	0c9b      	lsrs	r3, r3, #18
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	4a17      	ldr	r2, [pc, #92]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800434c:	5cd3      	ldrb	r3, [r2, r3]
 800434e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d010      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	0c5b      	lsrs	r3, r3, #17
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	4a11      	ldr	r2, [pc, #68]	; (80043ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8004366:	5cd3      	ldrb	r3, [r2, r3]
 8004368:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a0d      	ldr	r2, [pc, #52]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800436e:	fb03 f202 	mul.w	r2, r3, r2
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e004      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	613b      	str	r3, [r7, #16]
      break;
 800438a:	e002      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800438e:	613b      	str	r3, [r7, #16]
      break;
 8004390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004392:	693b      	ldr	r3, [r7, #16]
}
 8004394:	4618      	mov	r0, r3
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	007a1200 	.word	0x007a1200
 80043a8:	080058e0 	.word	0x080058e0
 80043ac:	080058f0 	.word	0x080058f0
 80043b0:	003d0900 	.word	0x003d0900

080043b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b8:	4b02      	ldr	r3, [pc, #8]	; (80043c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr
 80043c4:	20000024 	.word	0x20000024

080043c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043cc:	f7ff fff2 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4903      	ldr	r1, [pc, #12]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80043de:	5ccb      	ldrb	r3, [r1, r3]
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	080058d8 	.word	0x080058d8

080043f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <RCC_Delay+0x34>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <RCC_Delay+0x38>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	0a5b      	lsrs	r3, r3, #9
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800440c:	bf00      	nop
  }
  while (Delay --);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1e5a      	subs	r2, r3, #1
 8004412:	60fa      	str	r2, [r7, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f9      	bne.n	800440c <RCC_Delay+0x1c>
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	20000024 	.word	0x20000024
 8004428:	10624dd3 	.word	0x10624dd3

0800442c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e041      	b.n	80044c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fd fd5c 	bl	8001f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f000 faa2 	bl	80049b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d001      	beq.n	80044e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e03a      	b.n	800455a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a18      	ldr	r2, [pc, #96]	; (8004564 <HAL_TIM_Base_Start_IT+0x98>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00e      	beq.n	8004524 <HAL_TIM_Base_Start_IT+0x58>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450e:	d009      	beq.n	8004524 <HAL_TIM_Base_Start_IT+0x58>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a14      	ldr	r2, [pc, #80]	; (8004568 <HAL_TIM_Base_Start_IT+0x9c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_TIM_Base_Start_IT+0x58>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a13      	ldr	r2, [pc, #76]	; (800456c <HAL_TIM_Base_Start_IT+0xa0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d111      	bne.n	8004548 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b06      	cmp	r3, #6
 8004534:	d010      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0201 	orr.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004546:	e007      	b.n	8004558 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40000400 	.word	0x40000400
 800456c:	40000800 	.word	0x40000800

08004570 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0201 	bic.w	r2, r2, #1
 8004586:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6a1a      	ldr	r2, [r3, #32]
 800458e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004592:	4013      	ands	r3, r2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10f      	bne.n	80045b8 <HAL_TIM_Base_Stop_IT+0x48>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6a1a      	ldr	r2, [r3, #32]
 800459e:	f240 4344 	movw	r3, #1092	; 0x444
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d107      	bne.n	80045b8 <HAL_TIM_Base_Stop_IT+0x48>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr

080045cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d122      	bne.n	8004628 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d11b      	bne.n	8004628 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0202 	mvn.w	r2, #2
 80045f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f9b4 	bl	800497c <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f9a7 	bl	800496a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f9b6 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b04      	cmp	r3, #4
 8004634:	d122      	bne.n	800467c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b04      	cmp	r3, #4
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0204 	mvn.w	r2, #4
 800464c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f98a 	bl	800497c <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f97d 	bl	800496a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f98c 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b08      	cmp	r3, #8
 8004688:	d122      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b08      	cmp	r3, #8
 8004696:	d11b      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0208 	mvn.w	r2, #8
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2204      	movs	r2, #4
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f960 	bl	800497c <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f953 	bl	800496a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f962 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d122      	bne.n	8004724 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d11b      	bne.n	8004724 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0210 	mvn.w	r2, #16
 80046f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2208      	movs	r2, #8
 80046fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f936 	bl	800497c <HAL_TIM_IC_CaptureCallback>
 8004710:	e005      	b.n	800471e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f929 	bl	800496a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f938 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b01      	cmp	r3, #1
 8004730:	d10e      	bne.n	8004750 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b01      	cmp	r3, #1
 800473e:	d107      	bne.n	8004750 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0201 	mvn.w	r2, #1
 8004748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fd fafc 	bl	8001d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b80      	cmp	r3, #128	; 0x80
 800475c:	d10e      	bne.n	800477c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b80      	cmp	r3, #128	; 0x80
 800476a:	d107      	bne.n	800477c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fa7b 	bl	8004c72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d10e      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	d107      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f8fc 	bl	80049a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d10e      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d107      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0220 	mvn.w	r2, #32
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa46 	bl	8004c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047d4:	bf00      	nop
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_TIM_ConfigClockSource+0x1c>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e0b4      	b.n	8004962 <HAL_TIM_ConfigClockSource+0x186>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800481e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004830:	d03e      	beq.n	80048b0 <HAL_TIM_ConfigClockSource+0xd4>
 8004832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004836:	f200 8087 	bhi.w	8004948 <HAL_TIM_ConfigClockSource+0x16c>
 800483a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483e:	f000 8086 	beq.w	800494e <HAL_TIM_ConfigClockSource+0x172>
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004846:	d87f      	bhi.n	8004948 <HAL_TIM_ConfigClockSource+0x16c>
 8004848:	2b70      	cmp	r3, #112	; 0x70
 800484a:	d01a      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0xa6>
 800484c:	2b70      	cmp	r3, #112	; 0x70
 800484e:	d87b      	bhi.n	8004948 <HAL_TIM_ConfigClockSource+0x16c>
 8004850:	2b60      	cmp	r3, #96	; 0x60
 8004852:	d050      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0x11a>
 8004854:	2b60      	cmp	r3, #96	; 0x60
 8004856:	d877      	bhi.n	8004948 <HAL_TIM_ConfigClockSource+0x16c>
 8004858:	2b50      	cmp	r3, #80	; 0x50
 800485a:	d03c      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0xfa>
 800485c:	2b50      	cmp	r3, #80	; 0x50
 800485e:	d873      	bhi.n	8004948 <HAL_TIM_ConfigClockSource+0x16c>
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d058      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0x13a>
 8004864:	2b40      	cmp	r3, #64	; 0x40
 8004866:	d86f      	bhi.n	8004948 <HAL_TIM_ConfigClockSource+0x16c>
 8004868:	2b30      	cmp	r3, #48	; 0x30
 800486a:	d064      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0x15a>
 800486c:	2b30      	cmp	r3, #48	; 0x30
 800486e:	d86b      	bhi.n	8004948 <HAL_TIM_ConfigClockSource+0x16c>
 8004870:	2b20      	cmp	r3, #32
 8004872:	d060      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0x15a>
 8004874:	2b20      	cmp	r3, #32
 8004876:	d867      	bhi.n	8004948 <HAL_TIM_ConfigClockSource+0x16c>
 8004878:	2b00      	cmp	r3, #0
 800487a:	d05c      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0x15a>
 800487c:	2b10      	cmp	r3, #16
 800487e:	d05a      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0x15a>
 8004880:	e062      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004892:	f000 f968 	bl	8004b66 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	609a      	str	r2, [r3, #8]
      break;
 80048ae:	e04f      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048c0:	f000 f951 	bl	8004b66 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048d2:	609a      	str	r2, [r3, #8]
      break;
 80048d4:	e03c      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e2:	461a      	mov	r2, r3
 80048e4:	f000 f8c8 	bl	8004a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2150      	movs	r1, #80	; 0x50
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f91f 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 80048f4:	e02c      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004902:	461a      	mov	r2, r3
 8004904:	f000 f8e6 	bl	8004ad4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2160      	movs	r1, #96	; 0x60
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f90f 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 8004914:	e01c      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004922:	461a      	mov	r2, r3
 8004924:	f000 f8a8 	bl	8004a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2140      	movs	r1, #64	; 0x40
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f8ff 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 8004934:	e00c      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f000 f8f6 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 8004946:	e003      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
      break;
 800494c:	e000      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800494e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004960:	7bfb      	ldrb	r3, [r7, #15]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr
	...

080049b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <TIM_Base_SetConfig+0xb8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00b      	beq.n	80049e4 <TIM_Base_SetConfig+0x30>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d2:	d007      	beq.n	80049e4 <TIM_Base_SetConfig+0x30>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <TIM_Base_SetConfig+0xbc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_Base_SetConfig+0x30>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a25      	ldr	r2, [pc, #148]	; (8004a74 <TIM_Base_SetConfig+0xc0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d108      	bne.n	80049f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a1c      	ldr	r2, [pc, #112]	; (8004a6c <TIM_Base_SetConfig+0xb8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00b      	beq.n	8004a16 <TIM_Base_SetConfig+0x62>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a04:	d007      	beq.n	8004a16 <TIM_Base_SetConfig+0x62>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a19      	ldr	r2, [pc, #100]	; (8004a70 <TIM_Base_SetConfig+0xbc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <TIM_Base_SetConfig+0x62>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <TIM_Base_SetConfig+0xc0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d108      	bne.n	8004a28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <TIM_Base_SetConfig+0xb8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d103      	bne.n	8004a5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	615a      	str	r2, [r3, #20]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800

08004a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f023 0201 	bic.w	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f023 030a 	bic.w	r3, r3, #10
 8004ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	621a      	str	r2, [r3, #32]
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr

08004ad4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f023 0210 	bic.w	r2, r3, #16
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	031b      	lsls	r3, r3, #12
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	621a      	str	r2, [r3, #32]
}
 8004b28:	bf00      	nop
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f043 0307 	orr.w	r3, r3, #7
 8004b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b087      	sub	sp, #28
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	021a      	lsls	r2, r3, #8
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	609a      	str	r2, [r3, #8]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e046      	b.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a16      	ldr	r2, [pc, #88]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00e      	beq.n	8004c1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d009      	beq.n	8004c1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a12      	ldr	r2, [pc, #72]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d004      	beq.n	8004c1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a10      	ldr	r2, [pc, #64]	; (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d10c      	bne.n	8004c38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800

08004c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	f023 030f 	bic.w	r3, r3, #15
 8004c94:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	f043 030c 	orr.w	r3, r3, #12
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	f043 0308 	orr.w	r3, r3, #8
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8004cb0:	7bbb      	ldrb	r3, [r7, #14]
 8004cb2:	f043 030c 	orr.w	r3, r3, #12
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8004cba:	7bbb      	ldrb	r3, [r7, #14]
 8004cbc:	f043 0308 	orr.w	r3, r3, #8
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004cc4:	f107 0208 	add.w	r2, r7, #8
 8004cc8:	2364      	movs	r3, #100	; 0x64
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2304      	movs	r3, #4
 8004cce:	214e      	movs	r1, #78	; 0x4e
 8004cd0:	4803      	ldr	r0, [pc, #12]	; (8004ce0 <lcd_send_cmd+0x5c>)
 8004cd2:	f7fd ff19 	bl	8002b08 <HAL_I2C_Master_Transmit>
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	2000009c 	.word	0x2000009c

08004ce4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	f023 030f 	bic.w	r3, r3, #15
 8004cf4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	f043 030d 	orr.w	r3, r3, #13
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	f043 0309 	orr.w	r3, r3, #9
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004d10:	7bbb      	ldrb	r3, [r7, #14]
 8004d12:	f043 030d 	orr.w	r3, r3, #13
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004d1a:	7bbb      	ldrb	r3, [r7, #14]
 8004d1c:	f043 0309 	orr.w	r3, r3, #9
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004d24:	f107 0208 	add.w	r2, r7, #8
 8004d28:	2364      	movs	r3, #100	; 0x64
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	214e      	movs	r1, #78	; 0x4e
 8004d30:	4803      	ldr	r0, [pc, #12]	; (8004d40 <lcd_send_data+0x5c>)
 8004d32:	f7fd fee9 	bl	8002b08 <HAL_I2C_Master_Transmit>
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	2000009c 	.word	0x2000009c

08004d44 <lcd_clear>:

void lcd_clear (void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8004d4a:	2080      	movs	r0, #128	; 0x80
 8004d4c:	f7ff ff9a 	bl	8004c84 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8004d50:	2300      	movs	r3, #0
 8004d52:	607b      	str	r3, [r7, #4]
 8004d54:	e005      	b.n	8004d62 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8004d56:	2020      	movs	r0, #32
 8004d58:	f7ff ffc4 	bl	8004ce4 <lcd_send_data>
	for (int i=0; i<70; i++)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	607b      	str	r3, [r7, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b45      	cmp	r3, #69	; 0x45
 8004d66:	ddf6      	ble.n	8004d56 <lcd_clear+0x12>
	}
}
 8004d68:	bf00      	nop
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
    switch (row)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <lcd_put_cur+0x18>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d005      	beq.n	8004d94 <lcd_put_cur+0x22>
 8004d88:	e009      	b.n	8004d9e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d90:	603b      	str	r3, [r7, #0]
            break;
 8004d92:	e004      	b.n	8004d9e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d9a:	603b      	str	r3, [r7, #0]
            break;
 8004d9c:	bf00      	nop
    }

    lcd_send_cmd (col);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff ff6e 	bl	8004c84 <lcd_send_cmd>
}
 8004da8:	bf00      	nop
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <lcd_init>:


void lcd_init (void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8004db4:	2032      	movs	r0, #50	; 0x32
 8004db6:	f7fd fa33 	bl	8002220 <HAL_Delay>
	lcd_send_cmd (0x30);
 8004dba:	2030      	movs	r0, #48	; 0x30
 8004dbc:	f7ff ff62 	bl	8004c84 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8004dc0:	2005      	movs	r0, #5
 8004dc2:	f7fd fa2d 	bl	8002220 <HAL_Delay>
	lcd_send_cmd (0x30);
 8004dc6:	2030      	movs	r0, #48	; 0x30
 8004dc8:	f7ff ff5c 	bl	8004c84 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8004dcc:	2001      	movs	r0, #1
 8004dce:	f7fd fa27 	bl	8002220 <HAL_Delay>
	lcd_send_cmd (0x30);
 8004dd2:	2030      	movs	r0, #48	; 0x30
 8004dd4:	f7ff ff56 	bl	8004c84 <lcd_send_cmd>
	HAL_Delay(10);
 8004dd8:	200a      	movs	r0, #10
 8004dda:	f7fd fa21 	bl	8002220 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8004dde:	2020      	movs	r0, #32
 8004de0:	f7ff ff50 	bl	8004c84 <lcd_send_cmd>
	HAL_Delay(10);
 8004de4:	200a      	movs	r0, #10
 8004de6:	f7fd fa1b 	bl	8002220 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8004dea:	2028      	movs	r0, #40	; 0x28
 8004dec:	f7ff ff4a 	bl	8004c84 <lcd_send_cmd>
	HAL_Delay(1);
 8004df0:	2001      	movs	r0, #1
 8004df2:	f7fd fa15 	bl	8002220 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8004df6:	2008      	movs	r0, #8
 8004df8:	f7ff ff44 	bl	8004c84 <lcd_send_cmd>
	HAL_Delay(1);
 8004dfc:	2001      	movs	r0, #1
 8004dfe:	f7fd fa0f 	bl	8002220 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8004e02:	2001      	movs	r0, #1
 8004e04:	f7ff ff3e 	bl	8004c84 <lcd_send_cmd>
	HAL_Delay(1);
 8004e08:	2001      	movs	r0, #1
 8004e0a:	f7fd fa09 	bl	8002220 <HAL_Delay>
	HAL_Delay(1);
 8004e0e:	2001      	movs	r0, #1
 8004e10:	f7fd fa06 	bl	8002220 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8004e14:	2006      	movs	r0, #6
 8004e16:	f7ff ff35 	bl	8004c84 <lcd_send_cmd>
	HAL_Delay(1);
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	f7fd fa00 	bl	8002220 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8004e20:	200c      	movs	r0, #12
 8004e22:	f7ff ff2f 	bl	8004c84 <lcd_send_cmd>
}
 8004e26:	bf00      	nop
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <lcd_send_string>:

void lcd_send_string (char *str)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b082      	sub	sp, #8
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8004e32:	e006      	b.n	8004e42 <lcd_send_string+0x18>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	607a      	str	r2, [r7, #4]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ff51 	bl	8004ce4 <lcd_send_data>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f4      	bne.n	8004e34 <lcd_send_string+0xa>
}
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <siprintf>:
 8004e54:	b40e      	push	{r1, r2, r3}
 8004e56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e5a:	b500      	push	{lr}
 8004e5c:	b09c      	sub	sp, #112	; 0x70
 8004e5e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e60:	9002      	str	r0, [sp, #8]
 8004e62:	9006      	str	r0, [sp, #24]
 8004e64:	9107      	str	r1, [sp, #28]
 8004e66:	9104      	str	r1, [sp, #16]
 8004e68:	4808      	ldr	r0, [pc, #32]	; (8004e8c <siprintf+0x38>)
 8004e6a:	4909      	ldr	r1, [pc, #36]	; (8004e90 <siprintf+0x3c>)
 8004e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e70:	9105      	str	r1, [sp, #20]
 8004e72:	6800      	ldr	r0, [r0, #0]
 8004e74:	a902      	add	r1, sp, #8
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	f000 f98e 	bl	8005198 <_svfiprintf_r>
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	9b02      	ldr	r3, [sp, #8]
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	b01c      	add	sp, #112	; 0x70
 8004e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e88:	b003      	add	sp, #12
 8004e8a:	4770      	bx	lr
 8004e8c:	2000007c 	.word	0x2000007c
 8004e90:	ffff0208 	.word	0xffff0208

08004e94 <memset>:
 8004e94:	4603      	mov	r3, r0
 8004e96:	4402      	add	r2, r0
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d100      	bne.n	8004e9e <memset+0xa>
 8004e9c:	4770      	bx	lr
 8004e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ea2:	e7f9      	b.n	8004e98 <memset+0x4>

08004ea4 <__errno>:
 8004ea4:	4b01      	ldr	r3, [pc, #4]	; (8004eac <__errno+0x8>)
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	2000007c 	.word	0x2000007c

08004eb0 <__libc_init_array>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	2600      	movs	r6, #0
 8004eb4:	4d0c      	ldr	r5, [pc, #48]	; (8004ee8 <__libc_init_array+0x38>)
 8004eb6:	4c0d      	ldr	r4, [pc, #52]	; (8004eec <__libc_init_array+0x3c>)
 8004eb8:	1b64      	subs	r4, r4, r5
 8004eba:	10a4      	asrs	r4, r4, #2
 8004ebc:	42a6      	cmp	r6, r4
 8004ebe:	d109      	bne.n	8004ed4 <__libc_init_array+0x24>
 8004ec0:	f000 fc7a 	bl	80057b8 <_init>
 8004ec4:	2600      	movs	r6, #0
 8004ec6:	4d0a      	ldr	r5, [pc, #40]	; (8004ef0 <__libc_init_array+0x40>)
 8004ec8:	4c0a      	ldr	r4, [pc, #40]	; (8004ef4 <__libc_init_array+0x44>)
 8004eca:	1b64      	subs	r4, r4, r5
 8004ecc:	10a4      	asrs	r4, r4, #2
 8004ece:	42a6      	cmp	r6, r4
 8004ed0:	d105      	bne.n	8004ede <__libc_init_array+0x2e>
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
 8004ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed8:	4798      	blx	r3
 8004eda:	3601      	adds	r6, #1
 8004edc:	e7ee      	b.n	8004ebc <__libc_init_array+0xc>
 8004ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee2:	4798      	blx	r3
 8004ee4:	3601      	adds	r6, #1
 8004ee6:	e7f2      	b.n	8004ece <__libc_init_array+0x1e>
 8004ee8:	08005928 	.word	0x08005928
 8004eec:	08005928 	.word	0x08005928
 8004ef0:	08005928 	.word	0x08005928
 8004ef4:	0800592c 	.word	0x0800592c

08004ef8 <__retarget_lock_acquire_recursive>:
 8004ef8:	4770      	bx	lr

08004efa <__retarget_lock_release_recursive>:
 8004efa:	4770      	bx	lr

08004efc <_free_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4605      	mov	r5, r0
 8004f00:	2900      	cmp	r1, #0
 8004f02:	d040      	beq.n	8004f86 <_free_r+0x8a>
 8004f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f08:	1f0c      	subs	r4, r1, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	bfb8      	it	lt
 8004f0e:	18e4      	addlt	r4, r4, r3
 8004f10:	f000 f8dc 	bl	80050cc <__malloc_lock>
 8004f14:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <_free_r+0x8c>)
 8004f16:	6813      	ldr	r3, [r2, #0]
 8004f18:	b933      	cbnz	r3, 8004f28 <_free_r+0x2c>
 8004f1a:	6063      	str	r3, [r4, #4]
 8004f1c:	6014      	str	r4, [r2, #0]
 8004f1e:	4628      	mov	r0, r5
 8004f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f24:	f000 b8d8 	b.w	80050d8 <__malloc_unlock>
 8004f28:	42a3      	cmp	r3, r4
 8004f2a:	d908      	bls.n	8004f3e <_free_r+0x42>
 8004f2c:	6820      	ldr	r0, [r4, #0]
 8004f2e:	1821      	adds	r1, r4, r0
 8004f30:	428b      	cmp	r3, r1
 8004f32:	bf01      	itttt	eq
 8004f34:	6819      	ldreq	r1, [r3, #0]
 8004f36:	685b      	ldreq	r3, [r3, #4]
 8004f38:	1809      	addeq	r1, r1, r0
 8004f3a:	6021      	streq	r1, [r4, #0]
 8004f3c:	e7ed      	b.n	8004f1a <_free_r+0x1e>
 8004f3e:	461a      	mov	r2, r3
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	b10b      	cbz	r3, 8004f48 <_free_r+0x4c>
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d9fa      	bls.n	8004f3e <_free_r+0x42>
 8004f48:	6811      	ldr	r1, [r2, #0]
 8004f4a:	1850      	adds	r0, r2, r1
 8004f4c:	42a0      	cmp	r0, r4
 8004f4e:	d10b      	bne.n	8004f68 <_free_r+0x6c>
 8004f50:	6820      	ldr	r0, [r4, #0]
 8004f52:	4401      	add	r1, r0
 8004f54:	1850      	adds	r0, r2, r1
 8004f56:	4283      	cmp	r3, r0
 8004f58:	6011      	str	r1, [r2, #0]
 8004f5a:	d1e0      	bne.n	8004f1e <_free_r+0x22>
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4408      	add	r0, r1
 8004f62:	6010      	str	r0, [r2, #0]
 8004f64:	6053      	str	r3, [r2, #4]
 8004f66:	e7da      	b.n	8004f1e <_free_r+0x22>
 8004f68:	d902      	bls.n	8004f70 <_free_r+0x74>
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	602b      	str	r3, [r5, #0]
 8004f6e:	e7d6      	b.n	8004f1e <_free_r+0x22>
 8004f70:	6820      	ldr	r0, [r4, #0]
 8004f72:	1821      	adds	r1, r4, r0
 8004f74:	428b      	cmp	r3, r1
 8004f76:	bf01      	itttt	eq
 8004f78:	6819      	ldreq	r1, [r3, #0]
 8004f7a:	685b      	ldreq	r3, [r3, #4]
 8004f7c:	1809      	addeq	r1, r1, r0
 8004f7e:	6021      	streq	r1, [r4, #0]
 8004f80:	6063      	str	r3, [r4, #4]
 8004f82:	6054      	str	r4, [r2, #4]
 8004f84:	e7cb      	b.n	8004f1e <_free_r+0x22>
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	200004a4 	.word	0x200004a4

08004f8c <sbrk_aligned>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4e0e      	ldr	r6, [pc, #56]	; (8004fc8 <sbrk_aligned+0x3c>)
 8004f90:	460c      	mov	r4, r1
 8004f92:	6831      	ldr	r1, [r6, #0]
 8004f94:	4605      	mov	r5, r0
 8004f96:	b911      	cbnz	r1, 8004f9e <sbrk_aligned+0x12>
 8004f98:	f000 fbaa 	bl	80056f0 <_sbrk_r>
 8004f9c:	6030      	str	r0, [r6, #0]
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f000 fba5 	bl	80056f0 <_sbrk_r>
 8004fa6:	1c43      	adds	r3, r0, #1
 8004fa8:	d00a      	beq.n	8004fc0 <sbrk_aligned+0x34>
 8004faa:	1cc4      	adds	r4, r0, #3
 8004fac:	f024 0403 	bic.w	r4, r4, #3
 8004fb0:	42a0      	cmp	r0, r4
 8004fb2:	d007      	beq.n	8004fc4 <sbrk_aligned+0x38>
 8004fb4:	1a21      	subs	r1, r4, r0
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f000 fb9a 	bl	80056f0 <_sbrk_r>
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d101      	bne.n	8004fc4 <sbrk_aligned+0x38>
 8004fc0:	f04f 34ff 	mov.w	r4, #4294967295
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
 8004fc8:	200004a8 	.word	0x200004a8

08004fcc <_malloc_r>:
 8004fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd0:	1ccd      	adds	r5, r1, #3
 8004fd2:	f025 0503 	bic.w	r5, r5, #3
 8004fd6:	3508      	adds	r5, #8
 8004fd8:	2d0c      	cmp	r5, #12
 8004fda:	bf38      	it	cc
 8004fdc:	250c      	movcc	r5, #12
 8004fde:	2d00      	cmp	r5, #0
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	db01      	blt.n	8004fe8 <_malloc_r+0x1c>
 8004fe4:	42a9      	cmp	r1, r5
 8004fe6:	d905      	bls.n	8004ff4 <_malloc_r+0x28>
 8004fe8:	230c      	movs	r3, #12
 8004fea:	2600      	movs	r6, #0
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	4630      	mov	r0, r6
 8004ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ff4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80050c8 <_malloc_r+0xfc>
 8004ff8:	f000 f868 	bl	80050cc <__malloc_lock>
 8004ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8005000:	461c      	mov	r4, r3
 8005002:	bb5c      	cbnz	r4, 800505c <_malloc_r+0x90>
 8005004:	4629      	mov	r1, r5
 8005006:	4638      	mov	r0, r7
 8005008:	f7ff ffc0 	bl	8004f8c <sbrk_aligned>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	4604      	mov	r4, r0
 8005010:	d155      	bne.n	80050be <_malloc_r+0xf2>
 8005012:	f8d8 4000 	ldr.w	r4, [r8]
 8005016:	4626      	mov	r6, r4
 8005018:	2e00      	cmp	r6, #0
 800501a:	d145      	bne.n	80050a8 <_malloc_r+0xdc>
 800501c:	2c00      	cmp	r4, #0
 800501e:	d048      	beq.n	80050b2 <_malloc_r+0xe6>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	4631      	mov	r1, r6
 8005024:	4638      	mov	r0, r7
 8005026:	eb04 0903 	add.w	r9, r4, r3
 800502a:	f000 fb61 	bl	80056f0 <_sbrk_r>
 800502e:	4581      	cmp	r9, r0
 8005030:	d13f      	bne.n	80050b2 <_malloc_r+0xe6>
 8005032:	6821      	ldr	r1, [r4, #0]
 8005034:	4638      	mov	r0, r7
 8005036:	1a6d      	subs	r5, r5, r1
 8005038:	4629      	mov	r1, r5
 800503a:	f7ff ffa7 	bl	8004f8c <sbrk_aligned>
 800503e:	3001      	adds	r0, #1
 8005040:	d037      	beq.n	80050b2 <_malloc_r+0xe6>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	442b      	add	r3, r5
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	f8d8 3000 	ldr.w	r3, [r8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d038      	beq.n	80050c2 <_malloc_r+0xf6>
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	42a2      	cmp	r2, r4
 8005054:	d12b      	bne.n	80050ae <_malloc_r+0xe2>
 8005056:	2200      	movs	r2, #0
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	e00f      	b.n	800507c <_malloc_r+0xb0>
 800505c:	6822      	ldr	r2, [r4, #0]
 800505e:	1b52      	subs	r2, r2, r5
 8005060:	d41f      	bmi.n	80050a2 <_malloc_r+0xd6>
 8005062:	2a0b      	cmp	r2, #11
 8005064:	d917      	bls.n	8005096 <_malloc_r+0xca>
 8005066:	1961      	adds	r1, r4, r5
 8005068:	42a3      	cmp	r3, r4
 800506a:	6025      	str	r5, [r4, #0]
 800506c:	bf18      	it	ne
 800506e:	6059      	strne	r1, [r3, #4]
 8005070:	6863      	ldr	r3, [r4, #4]
 8005072:	bf08      	it	eq
 8005074:	f8c8 1000 	streq.w	r1, [r8]
 8005078:	5162      	str	r2, [r4, r5]
 800507a:	604b      	str	r3, [r1, #4]
 800507c:	4638      	mov	r0, r7
 800507e:	f104 060b 	add.w	r6, r4, #11
 8005082:	f000 f829 	bl	80050d8 <__malloc_unlock>
 8005086:	f026 0607 	bic.w	r6, r6, #7
 800508a:	1d23      	adds	r3, r4, #4
 800508c:	1af2      	subs	r2, r6, r3
 800508e:	d0ae      	beq.n	8004fee <_malloc_r+0x22>
 8005090:	1b9b      	subs	r3, r3, r6
 8005092:	50a3      	str	r3, [r4, r2]
 8005094:	e7ab      	b.n	8004fee <_malloc_r+0x22>
 8005096:	42a3      	cmp	r3, r4
 8005098:	6862      	ldr	r2, [r4, #4]
 800509a:	d1dd      	bne.n	8005058 <_malloc_r+0x8c>
 800509c:	f8c8 2000 	str.w	r2, [r8]
 80050a0:	e7ec      	b.n	800507c <_malloc_r+0xb0>
 80050a2:	4623      	mov	r3, r4
 80050a4:	6864      	ldr	r4, [r4, #4]
 80050a6:	e7ac      	b.n	8005002 <_malloc_r+0x36>
 80050a8:	4634      	mov	r4, r6
 80050aa:	6876      	ldr	r6, [r6, #4]
 80050ac:	e7b4      	b.n	8005018 <_malloc_r+0x4c>
 80050ae:	4613      	mov	r3, r2
 80050b0:	e7cc      	b.n	800504c <_malloc_r+0x80>
 80050b2:	230c      	movs	r3, #12
 80050b4:	4638      	mov	r0, r7
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	f000 f80e 	bl	80050d8 <__malloc_unlock>
 80050bc:	e797      	b.n	8004fee <_malloc_r+0x22>
 80050be:	6025      	str	r5, [r4, #0]
 80050c0:	e7dc      	b.n	800507c <_malloc_r+0xb0>
 80050c2:	605b      	str	r3, [r3, #4]
 80050c4:	deff      	udf	#255	; 0xff
 80050c6:	bf00      	nop
 80050c8:	200004a4 	.word	0x200004a4

080050cc <__malloc_lock>:
 80050cc:	4801      	ldr	r0, [pc, #4]	; (80050d4 <__malloc_lock+0x8>)
 80050ce:	f7ff bf13 	b.w	8004ef8 <__retarget_lock_acquire_recursive>
 80050d2:	bf00      	nop
 80050d4:	200004a0 	.word	0x200004a0

080050d8 <__malloc_unlock>:
 80050d8:	4801      	ldr	r0, [pc, #4]	; (80050e0 <__malloc_unlock+0x8>)
 80050da:	f7ff bf0e 	b.w	8004efa <__retarget_lock_release_recursive>
 80050de:	bf00      	nop
 80050e0:	200004a0 	.word	0x200004a0

080050e4 <__ssputs_r>:
 80050e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	461f      	mov	r7, r3
 80050ea:	688e      	ldr	r6, [r1, #8]
 80050ec:	4682      	mov	sl, r0
 80050ee:	42be      	cmp	r6, r7
 80050f0:	460c      	mov	r4, r1
 80050f2:	4690      	mov	r8, r2
 80050f4:	680b      	ldr	r3, [r1, #0]
 80050f6:	d82c      	bhi.n	8005152 <__ssputs_r+0x6e>
 80050f8:	898a      	ldrh	r2, [r1, #12]
 80050fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050fe:	d026      	beq.n	800514e <__ssputs_r+0x6a>
 8005100:	6965      	ldr	r5, [r4, #20]
 8005102:	6909      	ldr	r1, [r1, #16]
 8005104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005108:	eba3 0901 	sub.w	r9, r3, r1
 800510c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005110:	1c7b      	adds	r3, r7, #1
 8005112:	444b      	add	r3, r9
 8005114:	106d      	asrs	r5, r5, #1
 8005116:	429d      	cmp	r5, r3
 8005118:	bf38      	it	cc
 800511a:	461d      	movcc	r5, r3
 800511c:	0553      	lsls	r3, r2, #21
 800511e:	d527      	bpl.n	8005170 <__ssputs_r+0x8c>
 8005120:	4629      	mov	r1, r5
 8005122:	f7ff ff53 	bl	8004fcc <_malloc_r>
 8005126:	4606      	mov	r6, r0
 8005128:	b360      	cbz	r0, 8005184 <__ssputs_r+0xa0>
 800512a:	464a      	mov	r2, r9
 800512c:	6921      	ldr	r1, [r4, #16]
 800512e:	f000 fafd 	bl	800572c <memcpy>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513c:	81a3      	strh	r3, [r4, #12]
 800513e:	6126      	str	r6, [r4, #16]
 8005140:	444e      	add	r6, r9
 8005142:	6026      	str	r6, [r4, #0]
 8005144:	463e      	mov	r6, r7
 8005146:	6165      	str	r5, [r4, #20]
 8005148:	eba5 0509 	sub.w	r5, r5, r9
 800514c:	60a5      	str	r5, [r4, #8]
 800514e:	42be      	cmp	r6, r7
 8005150:	d900      	bls.n	8005154 <__ssputs_r+0x70>
 8005152:	463e      	mov	r6, r7
 8005154:	4632      	mov	r2, r6
 8005156:	4641      	mov	r1, r8
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	f000 faaf 	bl	80056bc <memmove>
 800515e:	2000      	movs	r0, #0
 8005160:	68a3      	ldr	r3, [r4, #8]
 8005162:	1b9b      	subs	r3, r3, r6
 8005164:	60a3      	str	r3, [r4, #8]
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	4433      	add	r3, r6
 800516a:	6023      	str	r3, [r4, #0]
 800516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005170:	462a      	mov	r2, r5
 8005172:	f000 fae9 	bl	8005748 <_realloc_r>
 8005176:	4606      	mov	r6, r0
 8005178:	2800      	cmp	r0, #0
 800517a:	d1e0      	bne.n	800513e <__ssputs_r+0x5a>
 800517c:	4650      	mov	r0, sl
 800517e:	6921      	ldr	r1, [r4, #16]
 8005180:	f7ff febc 	bl	8004efc <_free_r>
 8005184:	230c      	movs	r3, #12
 8005186:	f8ca 3000 	str.w	r3, [sl]
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	f04f 30ff 	mov.w	r0, #4294967295
 8005190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005194:	81a3      	strh	r3, [r4, #12]
 8005196:	e7e9      	b.n	800516c <__ssputs_r+0x88>

08005198 <_svfiprintf_r>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	4698      	mov	r8, r3
 800519e:	898b      	ldrh	r3, [r1, #12]
 80051a0:	4607      	mov	r7, r0
 80051a2:	061b      	lsls	r3, r3, #24
 80051a4:	460d      	mov	r5, r1
 80051a6:	4614      	mov	r4, r2
 80051a8:	b09d      	sub	sp, #116	; 0x74
 80051aa:	d50e      	bpl.n	80051ca <_svfiprintf_r+0x32>
 80051ac:	690b      	ldr	r3, [r1, #16]
 80051ae:	b963      	cbnz	r3, 80051ca <_svfiprintf_r+0x32>
 80051b0:	2140      	movs	r1, #64	; 0x40
 80051b2:	f7ff ff0b 	bl	8004fcc <_malloc_r>
 80051b6:	6028      	str	r0, [r5, #0]
 80051b8:	6128      	str	r0, [r5, #16]
 80051ba:	b920      	cbnz	r0, 80051c6 <_svfiprintf_r+0x2e>
 80051bc:	230c      	movs	r3, #12
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	e0d0      	b.n	8005368 <_svfiprintf_r+0x1d0>
 80051c6:	2340      	movs	r3, #64	; 0x40
 80051c8:	616b      	str	r3, [r5, #20]
 80051ca:	2300      	movs	r3, #0
 80051cc:	9309      	str	r3, [sp, #36]	; 0x24
 80051ce:	2320      	movs	r3, #32
 80051d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051d4:	2330      	movs	r3, #48	; 0x30
 80051d6:	f04f 0901 	mov.w	r9, #1
 80051da:	f8cd 800c 	str.w	r8, [sp, #12]
 80051de:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005380 <_svfiprintf_r+0x1e8>
 80051e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051e6:	4623      	mov	r3, r4
 80051e8:	469a      	mov	sl, r3
 80051ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051ee:	b10a      	cbz	r2, 80051f4 <_svfiprintf_r+0x5c>
 80051f0:	2a25      	cmp	r2, #37	; 0x25
 80051f2:	d1f9      	bne.n	80051e8 <_svfiprintf_r+0x50>
 80051f4:	ebba 0b04 	subs.w	fp, sl, r4
 80051f8:	d00b      	beq.n	8005212 <_svfiprintf_r+0x7a>
 80051fa:	465b      	mov	r3, fp
 80051fc:	4622      	mov	r2, r4
 80051fe:	4629      	mov	r1, r5
 8005200:	4638      	mov	r0, r7
 8005202:	f7ff ff6f 	bl	80050e4 <__ssputs_r>
 8005206:	3001      	adds	r0, #1
 8005208:	f000 80a9 	beq.w	800535e <_svfiprintf_r+0x1c6>
 800520c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800520e:	445a      	add	r2, fp
 8005210:	9209      	str	r2, [sp, #36]	; 0x24
 8005212:	f89a 3000 	ldrb.w	r3, [sl]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80a1 	beq.w	800535e <_svfiprintf_r+0x1c6>
 800521c:	2300      	movs	r3, #0
 800521e:	f04f 32ff 	mov.w	r2, #4294967295
 8005222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005226:	f10a 0a01 	add.w	sl, sl, #1
 800522a:	9304      	str	r3, [sp, #16]
 800522c:	9307      	str	r3, [sp, #28]
 800522e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005232:	931a      	str	r3, [sp, #104]	; 0x68
 8005234:	4654      	mov	r4, sl
 8005236:	2205      	movs	r2, #5
 8005238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800523c:	4850      	ldr	r0, [pc, #320]	; (8005380 <_svfiprintf_r+0x1e8>)
 800523e:	f000 fa67 	bl	8005710 <memchr>
 8005242:	9a04      	ldr	r2, [sp, #16]
 8005244:	b9d8      	cbnz	r0, 800527e <_svfiprintf_r+0xe6>
 8005246:	06d0      	lsls	r0, r2, #27
 8005248:	bf44      	itt	mi
 800524a:	2320      	movmi	r3, #32
 800524c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005250:	0711      	lsls	r1, r2, #28
 8005252:	bf44      	itt	mi
 8005254:	232b      	movmi	r3, #43	; 0x2b
 8005256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800525a:	f89a 3000 	ldrb.w	r3, [sl]
 800525e:	2b2a      	cmp	r3, #42	; 0x2a
 8005260:	d015      	beq.n	800528e <_svfiprintf_r+0xf6>
 8005262:	4654      	mov	r4, sl
 8005264:	2000      	movs	r0, #0
 8005266:	f04f 0c0a 	mov.w	ip, #10
 800526a:	9a07      	ldr	r2, [sp, #28]
 800526c:	4621      	mov	r1, r4
 800526e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005272:	3b30      	subs	r3, #48	; 0x30
 8005274:	2b09      	cmp	r3, #9
 8005276:	d94d      	bls.n	8005314 <_svfiprintf_r+0x17c>
 8005278:	b1b0      	cbz	r0, 80052a8 <_svfiprintf_r+0x110>
 800527a:	9207      	str	r2, [sp, #28]
 800527c:	e014      	b.n	80052a8 <_svfiprintf_r+0x110>
 800527e:	eba0 0308 	sub.w	r3, r0, r8
 8005282:	fa09 f303 	lsl.w	r3, r9, r3
 8005286:	4313      	orrs	r3, r2
 8005288:	46a2      	mov	sl, r4
 800528a:	9304      	str	r3, [sp, #16]
 800528c:	e7d2      	b.n	8005234 <_svfiprintf_r+0x9c>
 800528e:	9b03      	ldr	r3, [sp, #12]
 8005290:	1d19      	adds	r1, r3, #4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	9103      	str	r1, [sp, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	bfbb      	ittet	lt
 800529a:	425b      	neglt	r3, r3
 800529c:	f042 0202 	orrlt.w	r2, r2, #2
 80052a0:	9307      	strge	r3, [sp, #28]
 80052a2:	9307      	strlt	r3, [sp, #28]
 80052a4:	bfb8      	it	lt
 80052a6:	9204      	strlt	r2, [sp, #16]
 80052a8:	7823      	ldrb	r3, [r4, #0]
 80052aa:	2b2e      	cmp	r3, #46	; 0x2e
 80052ac:	d10c      	bne.n	80052c8 <_svfiprintf_r+0x130>
 80052ae:	7863      	ldrb	r3, [r4, #1]
 80052b0:	2b2a      	cmp	r3, #42	; 0x2a
 80052b2:	d134      	bne.n	800531e <_svfiprintf_r+0x186>
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	3402      	adds	r4, #2
 80052b8:	1d1a      	adds	r2, r3, #4
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	9203      	str	r2, [sp, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bfb8      	it	lt
 80052c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80052c6:	9305      	str	r3, [sp, #20]
 80052c8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005384 <_svfiprintf_r+0x1ec>
 80052cc:	2203      	movs	r2, #3
 80052ce:	4650      	mov	r0, sl
 80052d0:	7821      	ldrb	r1, [r4, #0]
 80052d2:	f000 fa1d 	bl	8005710 <memchr>
 80052d6:	b138      	cbz	r0, 80052e8 <_svfiprintf_r+0x150>
 80052d8:	2240      	movs	r2, #64	; 0x40
 80052da:	9b04      	ldr	r3, [sp, #16]
 80052dc:	eba0 000a 	sub.w	r0, r0, sl
 80052e0:	4082      	lsls	r2, r0
 80052e2:	4313      	orrs	r3, r2
 80052e4:	3401      	adds	r4, #1
 80052e6:	9304      	str	r3, [sp, #16]
 80052e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ec:	2206      	movs	r2, #6
 80052ee:	4826      	ldr	r0, [pc, #152]	; (8005388 <_svfiprintf_r+0x1f0>)
 80052f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052f4:	f000 fa0c 	bl	8005710 <memchr>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d038      	beq.n	800536e <_svfiprintf_r+0x1d6>
 80052fc:	4b23      	ldr	r3, [pc, #140]	; (800538c <_svfiprintf_r+0x1f4>)
 80052fe:	bb1b      	cbnz	r3, 8005348 <_svfiprintf_r+0x1b0>
 8005300:	9b03      	ldr	r3, [sp, #12]
 8005302:	3307      	adds	r3, #7
 8005304:	f023 0307 	bic.w	r3, r3, #7
 8005308:	3308      	adds	r3, #8
 800530a:	9303      	str	r3, [sp, #12]
 800530c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530e:	4433      	add	r3, r6
 8005310:	9309      	str	r3, [sp, #36]	; 0x24
 8005312:	e768      	b.n	80051e6 <_svfiprintf_r+0x4e>
 8005314:	460c      	mov	r4, r1
 8005316:	2001      	movs	r0, #1
 8005318:	fb0c 3202 	mla	r2, ip, r2, r3
 800531c:	e7a6      	b.n	800526c <_svfiprintf_r+0xd4>
 800531e:	2300      	movs	r3, #0
 8005320:	f04f 0c0a 	mov.w	ip, #10
 8005324:	4619      	mov	r1, r3
 8005326:	3401      	adds	r4, #1
 8005328:	9305      	str	r3, [sp, #20]
 800532a:	4620      	mov	r0, r4
 800532c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005330:	3a30      	subs	r2, #48	; 0x30
 8005332:	2a09      	cmp	r2, #9
 8005334:	d903      	bls.n	800533e <_svfiprintf_r+0x1a6>
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0c6      	beq.n	80052c8 <_svfiprintf_r+0x130>
 800533a:	9105      	str	r1, [sp, #20]
 800533c:	e7c4      	b.n	80052c8 <_svfiprintf_r+0x130>
 800533e:	4604      	mov	r4, r0
 8005340:	2301      	movs	r3, #1
 8005342:	fb0c 2101 	mla	r1, ip, r1, r2
 8005346:	e7f0      	b.n	800532a <_svfiprintf_r+0x192>
 8005348:	ab03      	add	r3, sp, #12
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	462a      	mov	r2, r5
 800534e:	4638      	mov	r0, r7
 8005350:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <_svfiprintf_r+0x1f8>)
 8005352:	a904      	add	r1, sp, #16
 8005354:	f3af 8000 	nop.w
 8005358:	1c42      	adds	r2, r0, #1
 800535a:	4606      	mov	r6, r0
 800535c:	d1d6      	bne.n	800530c <_svfiprintf_r+0x174>
 800535e:	89ab      	ldrh	r3, [r5, #12]
 8005360:	065b      	lsls	r3, r3, #25
 8005362:	f53f af2d 	bmi.w	80051c0 <_svfiprintf_r+0x28>
 8005366:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005368:	b01d      	add	sp, #116	; 0x74
 800536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536e:	ab03      	add	r3, sp, #12
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	462a      	mov	r2, r5
 8005374:	4638      	mov	r0, r7
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <_svfiprintf_r+0x1f8>)
 8005378:	a904      	add	r1, sp, #16
 800537a:	f000 f87d 	bl	8005478 <_printf_i>
 800537e:	e7eb      	b.n	8005358 <_svfiprintf_r+0x1c0>
 8005380:	080058f2 	.word	0x080058f2
 8005384:	080058f8 	.word	0x080058f8
 8005388:	080058fc 	.word	0x080058fc
 800538c:	00000000 	.word	0x00000000
 8005390:	080050e5 	.word	0x080050e5

08005394 <_printf_common>:
 8005394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	4616      	mov	r6, r2
 800539a:	4699      	mov	r9, r3
 800539c:	688a      	ldr	r2, [r1, #8]
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	4607      	mov	r7, r0
 80053a2:	4293      	cmp	r3, r2
 80053a4:	bfb8      	it	lt
 80053a6:	4613      	movlt	r3, r2
 80053a8:	6033      	str	r3, [r6, #0]
 80053aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053ae:	460c      	mov	r4, r1
 80053b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053b4:	b10a      	cbz	r2, 80053ba <_printf_common+0x26>
 80053b6:	3301      	adds	r3, #1
 80053b8:	6033      	str	r3, [r6, #0]
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	0699      	lsls	r1, r3, #26
 80053be:	bf42      	ittt	mi
 80053c0:	6833      	ldrmi	r3, [r6, #0]
 80053c2:	3302      	addmi	r3, #2
 80053c4:	6033      	strmi	r3, [r6, #0]
 80053c6:	6825      	ldr	r5, [r4, #0]
 80053c8:	f015 0506 	ands.w	r5, r5, #6
 80053cc:	d106      	bne.n	80053dc <_printf_common+0x48>
 80053ce:	f104 0a19 	add.w	sl, r4, #25
 80053d2:	68e3      	ldr	r3, [r4, #12]
 80053d4:	6832      	ldr	r2, [r6, #0]
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	42ab      	cmp	r3, r5
 80053da:	dc2b      	bgt.n	8005434 <_printf_common+0xa0>
 80053dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053e0:	1e13      	subs	r3, r2, #0
 80053e2:	6822      	ldr	r2, [r4, #0]
 80053e4:	bf18      	it	ne
 80053e6:	2301      	movne	r3, #1
 80053e8:	0692      	lsls	r2, r2, #26
 80053ea:	d430      	bmi.n	800544e <_printf_common+0xba>
 80053ec:	4649      	mov	r1, r9
 80053ee:	4638      	mov	r0, r7
 80053f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f4:	47c0      	blx	r8
 80053f6:	3001      	adds	r0, #1
 80053f8:	d023      	beq.n	8005442 <_printf_common+0xae>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	6922      	ldr	r2, [r4, #16]
 80053fe:	f003 0306 	and.w	r3, r3, #6
 8005402:	2b04      	cmp	r3, #4
 8005404:	bf14      	ite	ne
 8005406:	2500      	movne	r5, #0
 8005408:	6833      	ldreq	r3, [r6, #0]
 800540a:	f04f 0600 	mov.w	r6, #0
 800540e:	bf08      	it	eq
 8005410:	68e5      	ldreq	r5, [r4, #12]
 8005412:	f104 041a 	add.w	r4, r4, #26
 8005416:	bf08      	it	eq
 8005418:	1aed      	subeq	r5, r5, r3
 800541a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800541e:	bf08      	it	eq
 8005420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005424:	4293      	cmp	r3, r2
 8005426:	bfc4      	itt	gt
 8005428:	1a9b      	subgt	r3, r3, r2
 800542a:	18ed      	addgt	r5, r5, r3
 800542c:	42b5      	cmp	r5, r6
 800542e:	d11a      	bne.n	8005466 <_printf_common+0xd2>
 8005430:	2000      	movs	r0, #0
 8005432:	e008      	b.n	8005446 <_printf_common+0xb2>
 8005434:	2301      	movs	r3, #1
 8005436:	4652      	mov	r2, sl
 8005438:	4649      	mov	r1, r9
 800543a:	4638      	mov	r0, r7
 800543c:	47c0      	blx	r8
 800543e:	3001      	adds	r0, #1
 8005440:	d103      	bne.n	800544a <_printf_common+0xb6>
 8005442:	f04f 30ff 	mov.w	r0, #4294967295
 8005446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800544a:	3501      	adds	r5, #1
 800544c:	e7c1      	b.n	80053d2 <_printf_common+0x3e>
 800544e:	2030      	movs	r0, #48	; 0x30
 8005450:	18e1      	adds	r1, r4, r3
 8005452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800545c:	4422      	add	r2, r4
 800545e:	3302      	adds	r3, #2
 8005460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005464:	e7c2      	b.n	80053ec <_printf_common+0x58>
 8005466:	2301      	movs	r3, #1
 8005468:	4622      	mov	r2, r4
 800546a:	4649      	mov	r1, r9
 800546c:	4638      	mov	r0, r7
 800546e:	47c0      	blx	r8
 8005470:	3001      	adds	r0, #1
 8005472:	d0e6      	beq.n	8005442 <_printf_common+0xae>
 8005474:	3601      	adds	r6, #1
 8005476:	e7d9      	b.n	800542c <_printf_common+0x98>

08005478 <_printf_i>:
 8005478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800547c:	7e0f      	ldrb	r7, [r1, #24]
 800547e:	4691      	mov	r9, r2
 8005480:	2f78      	cmp	r7, #120	; 0x78
 8005482:	4680      	mov	r8, r0
 8005484:	460c      	mov	r4, r1
 8005486:	469a      	mov	sl, r3
 8005488:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800548a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800548e:	d807      	bhi.n	80054a0 <_printf_i+0x28>
 8005490:	2f62      	cmp	r7, #98	; 0x62
 8005492:	d80a      	bhi.n	80054aa <_printf_i+0x32>
 8005494:	2f00      	cmp	r7, #0
 8005496:	f000 80d5 	beq.w	8005644 <_printf_i+0x1cc>
 800549a:	2f58      	cmp	r7, #88	; 0x58
 800549c:	f000 80c1 	beq.w	8005622 <_printf_i+0x1aa>
 80054a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054a8:	e03a      	b.n	8005520 <_printf_i+0xa8>
 80054aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ae:	2b15      	cmp	r3, #21
 80054b0:	d8f6      	bhi.n	80054a0 <_printf_i+0x28>
 80054b2:	a101      	add	r1, pc, #4	; (adr r1, 80054b8 <_printf_i+0x40>)
 80054b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054b8:	08005511 	.word	0x08005511
 80054bc:	08005525 	.word	0x08005525
 80054c0:	080054a1 	.word	0x080054a1
 80054c4:	080054a1 	.word	0x080054a1
 80054c8:	080054a1 	.word	0x080054a1
 80054cc:	080054a1 	.word	0x080054a1
 80054d0:	08005525 	.word	0x08005525
 80054d4:	080054a1 	.word	0x080054a1
 80054d8:	080054a1 	.word	0x080054a1
 80054dc:	080054a1 	.word	0x080054a1
 80054e0:	080054a1 	.word	0x080054a1
 80054e4:	0800562b 	.word	0x0800562b
 80054e8:	08005551 	.word	0x08005551
 80054ec:	080055e5 	.word	0x080055e5
 80054f0:	080054a1 	.word	0x080054a1
 80054f4:	080054a1 	.word	0x080054a1
 80054f8:	0800564d 	.word	0x0800564d
 80054fc:	080054a1 	.word	0x080054a1
 8005500:	08005551 	.word	0x08005551
 8005504:	080054a1 	.word	0x080054a1
 8005508:	080054a1 	.word	0x080054a1
 800550c:	080055ed 	.word	0x080055ed
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	1d1a      	adds	r2, r3, #4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	602a      	str	r2, [r5, #0]
 8005518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800551c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005520:	2301      	movs	r3, #1
 8005522:	e0a0      	b.n	8005666 <_printf_i+0x1ee>
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	682b      	ldr	r3, [r5, #0]
 8005528:	0607      	lsls	r7, r0, #24
 800552a:	f103 0104 	add.w	r1, r3, #4
 800552e:	6029      	str	r1, [r5, #0]
 8005530:	d501      	bpl.n	8005536 <_printf_i+0xbe>
 8005532:	681e      	ldr	r6, [r3, #0]
 8005534:	e003      	b.n	800553e <_printf_i+0xc6>
 8005536:	0646      	lsls	r6, r0, #25
 8005538:	d5fb      	bpl.n	8005532 <_printf_i+0xba>
 800553a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800553e:	2e00      	cmp	r6, #0
 8005540:	da03      	bge.n	800554a <_printf_i+0xd2>
 8005542:	232d      	movs	r3, #45	; 0x2d
 8005544:	4276      	negs	r6, r6
 8005546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800554a:	230a      	movs	r3, #10
 800554c:	4859      	ldr	r0, [pc, #356]	; (80056b4 <_printf_i+0x23c>)
 800554e:	e012      	b.n	8005576 <_printf_i+0xfe>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	6820      	ldr	r0, [r4, #0]
 8005554:	1d19      	adds	r1, r3, #4
 8005556:	6029      	str	r1, [r5, #0]
 8005558:	0605      	lsls	r5, r0, #24
 800555a:	d501      	bpl.n	8005560 <_printf_i+0xe8>
 800555c:	681e      	ldr	r6, [r3, #0]
 800555e:	e002      	b.n	8005566 <_printf_i+0xee>
 8005560:	0641      	lsls	r1, r0, #25
 8005562:	d5fb      	bpl.n	800555c <_printf_i+0xe4>
 8005564:	881e      	ldrh	r6, [r3, #0]
 8005566:	2f6f      	cmp	r7, #111	; 0x6f
 8005568:	bf0c      	ite	eq
 800556a:	2308      	moveq	r3, #8
 800556c:	230a      	movne	r3, #10
 800556e:	4851      	ldr	r0, [pc, #324]	; (80056b4 <_printf_i+0x23c>)
 8005570:	2100      	movs	r1, #0
 8005572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005576:	6865      	ldr	r5, [r4, #4]
 8005578:	2d00      	cmp	r5, #0
 800557a:	bfa8      	it	ge
 800557c:	6821      	ldrge	r1, [r4, #0]
 800557e:	60a5      	str	r5, [r4, #8]
 8005580:	bfa4      	itt	ge
 8005582:	f021 0104 	bicge.w	r1, r1, #4
 8005586:	6021      	strge	r1, [r4, #0]
 8005588:	b90e      	cbnz	r6, 800558e <_printf_i+0x116>
 800558a:	2d00      	cmp	r5, #0
 800558c:	d04b      	beq.n	8005626 <_printf_i+0x1ae>
 800558e:	4615      	mov	r5, r2
 8005590:	fbb6 f1f3 	udiv	r1, r6, r3
 8005594:	fb03 6711 	mls	r7, r3, r1, r6
 8005598:	5dc7      	ldrb	r7, [r0, r7]
 800559a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800559e:	4637      	mov	r7, r6
 80055a0:	42bb      	cmp	r3, r7
 80055a2:	460e      	mov	r6, r1
 80055a4:	d9f4      	bls.n	8005590 <_printf_i+0x118>
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d10b      	bne.n	80055c2 <_printf_i+0x14a>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	07de      	lsls	r6, r3, #31
 80055ae:	d508      	bpl.n	80055c2 <_printf_i+0x14a>
 80055b0:	6923      	ldr	r3, [r4, #16]
 80055b2:	6861      	ldr	r1, [r4, #4]
 80055b4:	4299      	cmp	r1, r3
 80055b6:	bfde      	ittt	le
 80055b8:	2330      	movle	r3, #48	; 0x30
 80055ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055c2:	1b52      	subs	r2, r2, r5
 80055c4:	6122      	str	r2, [r4, #16]
 80055c6:	464b      	mov	r3, r9
 80055c8:	4621      	mov	r1, r4
 80055ca:	4640      	mov	r0, r8
 80055cc:	f8cd a000 	str.w	sl, [sp]
 80055d0:	aa03      	add	r2, sp, #12
 80055d2:	f7ff fedf 	bl	8005394 <_printf_common>
 80055d6:	3001      	adds	r0, #1
 80055d8:	d14a      	bne.n	8005670 <_printf_i+0x1f8>
 80055da:	f04f 30ff 	mov.w	r0, #4294967295
 80055de:	b004      	add	sp, #16
 80055e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	f043 0320 	orr.w	r3, r3, #32
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	2778      	movs	r7, #120	; 0x78
 80055ee:	4832      	ldr	r0, [pc, #200]	; (80056b8 <_printf_i+0x240>)
 80055f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	6829      	ldr	r1, [r5, #0]
 80055f8:	061f      	lsls	r7, r3, #24
 80055fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80055fe:	d402      	bmi.n	8005606 <_printf_i+0x18e>
 8005600:	065f      	lsls	r7, r3, #25
 8005602:	bf48      	it	mi
 8005604:	b2b6      	uxthmi	r6, r6
 8005606:	07df      	lsls	r7, r3, #31
 8005608:	bf48      	it	mi
 800560a:	f043 0320 	orrmi.w	r3, r3, #32
 800560e:	6029      	str	r1, [r5, #0]
 8005610:	bf48      	it	mi
 8005612:	6023      	strmi	r3, [r4, #0]
 8005614:	b91e      	cbnz	r6, 800561e <_printf_i+0x1a6>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	f023 0320 	bic.w	r3, r3, #32
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	2310      	movs	r3, #16
 8005620:	e7a6      	b.n	8005570 <_printf_i+0xf8>
 8005622:	4824      	ldr	r0, [pc, #144]	; (80056b4 <_printf_i+0x23c>)
 8005624:	e7e4      	b.n	80055f0 <_printf_i+0x178>
 8005626:	4615      	mov	r5, r2
 8005628:	e7bd      	b.n	80055a6 <_printf_i+0x12e>
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	6826      	ldr	r6, [r4, #0]
 800562e:	1d18      	adds	r0, r3, #4
 8005630:	6961      	ldr	r1, [r4, #20]
 8005632:	6028      	str	r0, [r5, #0]
 8005634:	0635      	lsls	r5, r6, #24
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	d501      	bpl.n	800563e <_printf_i+0x1c6>
 800563a:	6019      	str	r1, [r3, #0]
 800563c:	e002      	b.n	8005644 <_printf_i+0x1cc>
 800563e:	0670      	lsls	r0, r6, #25
 8005640:	d5fb      	bpl.n	800563a <_printf_i+0x1c2>
 8005642:	8019      	strh	r1, [r3, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	4615      	mov	r5, r2
 8005648:	6123      	str	r3, [r4, #16]
 800564a:	e7bc      	b.n	80055c6 <_printf_i+0x14e>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	2100      	movs	r1, #0
 8005650:	1d1a      	adds	r2, r3, #4
 8005652:	602a      	str	r2, [r5, #0]
 8005654:	681d      	ldr	r5, [r3, #0]
 8005656:	6862      	ldr	r2, [r4, #4]
 8005658:	4628      	mov	r0, r5
 800565a:	f000 f859 	bl	8005710 <memchr>
 800565e:	b108      	cbz	r0, 8005664 <_printf_i+0x1ec>
 8005660:	1b40      	subs	r0, r0, r5
 8005662:	6060      	str	r0, [r4, #4]
 8005664:	6863      	ldr	r3, [r4, #4]
 8005666:	6123      	str	r3, [r4, #16]
 8005668:	2300      	movs	r3, #0
 800566a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800566e:	e7aa      	b.n	80055c6 <_printf_i+0x14e>
 8005670:	462a      	mov	r2, r5
 8005672:	4649      	mov	r1, r9
 8005674:	4640      	mov	r0, r8
 8005676:	6923      	ldr	r3, [r4, #16]
 8005678:	47d0      	blx	sl
 800567a:	3001      	adds	r0, #1
 800567c:	d0ad      	beq.n	80055da <_printf_i+0x162>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	079b      	lsls	r3, r3, #30
 8005682:	d413      	bmi.n	80056ac <_printf_i+0x234>
 8005684:	68e0      	ldr	r0, [r4, #12]
 8005686:	9b03      	ldr	r3, [sp, #12]
 8005688:	4298      	cmp	r0, r3
 800568a:	bfb8      	it	lt
 800568c:	4618      	movlt	r0, r3
 800568e:	e7a6      	b.n	80055de <_printf_i+0x166>
 8005690:	2301      	movs	r3, #1
 8005692:	4632      	mov	r2, r6
 8005694:	4649      	mov	r1, r9
 8005696:	4640      	mov	r0, r8
 8005698:	47d0      	blx	sl
 800569a:	3001      	adds	r0, #1
 800569c:	d09d      	beq.n	80055da <_printf_i+0x162>
 800569e:	3501      	adds	r5, #1
 80056a0:	68e3      	ldr	r3, [r4, #12]
 80056a2:	9903      	ldr	r1, [sp, #12]
 80056a4:	1a5b      	subs	r3, r3, r1
 80056a6:	42ab      	cmp	r3, r5
 80056a8:	dcf2      	bgt.n	8005690 <_printf_i+0x218>
 80056aa:	e7eb      	b.n	8005684 <_printf_i+0x20c>
 80056ac:	2500      	movs	r5, #0
 80056ae:	f104 0619 	add.w	r6, r4, #25
 80056b2:	e7f5      	b.n	80056a0 <_printf_i+0x228>
 80056b4:	08005903 	.word	0x08005903
 80056b8:	08005914 	.word	0x08005914

080056bc <memmove>:
 80056bc:	4288      	cmp	r0, r1
 80056be:	b510      	push	{r4, lr}
 80056c0:	eb01 0402 	add.w	r4, r1, r2
 80056c4:	d902      	bls.n	80056cc <memmove+0x10>
 80056c6:	4284      	cmp	r4, r0
 80056c8:	4623      	mov	r3, r4
 80056ca:	d807      	bhi.n	80056dc <memmove+0x20>
 80056cc:	1e43      	subs	r3, r0, #1
 80056ce:	42a1      	cmp	r1, r4
 80056d0:	d008      	beq.n	80056e4 <memmove+0x28>
 80056d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056da:	e7f8      	b.n	80056ce <memmove+0x12>
 80056dc:	4601      	mov	r1, r0
 80056de:	4402      	add	r2, r0
 80056e0:	428a      	cmp	r2, r1
 80056e2:	d100      	bne.n	80056e6 <memmove+0x2a>
 80056e4:	bd10      	pop	{r4, pc}
 80056e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056ee:	e7f7      	b.n	80056e0 <memmove+0x24>

080056f0 <_sbrk_r>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	2300      	movs	r3, #0
 80056f4:	4d05      	ldr	r5, [pc, #20]	; (800570c <_sbrk_r+0x1c>)
 80056f6:	4604      	mov	r4, r0
 80056f8:	4608      	mov	r0, r1
 80056fa:	602b      	str	r3, [r5, #0]
 80056fc:	f7fc fccc 	bl	8002098 <_sbrk>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d102      	bne.n	800570a <_sbrk_r+0x1a>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	b103      	cbz	r3, 800570a <_sbrk_r+0x1a>
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	2000049c 	.word	0x2000049c

08005710 <memchr>:
 8005710:	4603      	mov	r3, r0
 8005712:	b510      	push	{r4, lr}
 8005714:	b2c9      	uxtb	r1, r1
 8005716:	4402      	add	r2, r0
 8005718:	4293      	cmp	r3, r2
 800571a:	4618      	mov	r0, r3
 800571c:	d101      	bne.n	8005722 <memchr+0x12>
 800571e:	2000      	movs	r0, #0
 8005720:	e003      	b.n	800572a <memchr+0x1a>
 8005722:	7804      	ldrb	r4, [r0, #0]
 8005724:	3301      	adds	r3, #1
 8005726:	428c      	cmp	r4, r1
 8005728:	d1f6      	bne.n	8005718 <memchr+0x8>
 800572a:	bd10      	pop	{r4, pc}

0800572c <memcpy>:
 800572c:	440a      	add	r2, r1
 800572e:	4291      	cmp	r1, r2
 8005730:	f100 33ff 	add.w	r3, r0, #4294967295
 8005734:	d100      	bne.n	8005738 <memcpy+0xc>
 8005736:	4770      	bx	lr
 8005738:	b510      	push	{r4, lr}
 800573a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800573e:	4291      	cmp	r1, r2
 8005740:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005744:	d1f9      	bne.n	800573a <memcpy+0xe>
 8005746:	bd10      	pop	{r4, pc}

08005748 <_realloc_r>:
 8005748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574c:	4680      	mov	r8, r0
 800574e:	4614      	mov	r4, r2
 8005750:	460e      	mov	r6, r1
 8005752:	b921      	cbnz	r1, 800575e <_realloc_r+0x16>
 8005754:	4611      	mov	r1, r2
 8005756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800575a:	f7ff bc37 	b.w	8004fcc <_malloc_r>
 800575e:	b92a      	cbnz	r2, 800576c <_realloc_r+0x24>
 8005760:	f7ff fbcc 	bl	8004efc <_free_r>
 8005764:	4625      	mov	r5, r4
 8005766:	4628      	mov	r0, r5
 8005768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800576c:	f000 f81b 	bl	80057a6 <_malloc_usable_size_r>
 8005770:	4284      	cmp	r4, r0
 8005772:	4607      	mov	r7, r0
 8005774:	d802      	bhi.n	800577c <_realloc_r+0x34>
 8005776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800577a:	d812      	bhi.n	80057a2 <_realloc_r+0x5a>
 800577c:	4621      	mov	r1, r4
 800577e:	4640      	mov	r0, r8
 8005780:	f7ff fc24 	bl	8004fcc <_malloc_r>
 8005784:	4605      	mov	r5, r0
 8005786:	2800      	cmp	r0, #0
 8005788:	d0ed      	beq.n	8005766 <_realloc_r+0x1e>
 800578a:	42bc      	cmp	r4, r7
 800578c:	4622      	mov	r2, r4
 800578e:	4631      	mov	r1, r6
 8005790:	bf28      	it	cs
 8005792:	463a      	movcs	r2, r7
 8005794:	f7ff ffca 	bl	800572c <memcpy>
 8005798:	4631      	mov	r1, r6
 800579a:	4640      	mov	r0, r8
 800579c:	f7ff fbae 	bl	8004efc <_free_r>
 80057a0:	e7e1      	b.n	8005766 <_realloc_r+0x1e>
 80057a2:	4635      	mov	r5, r6
 80057a4:	e7df      	b.n	8005766 <_realloc_r+0x1e>

080057a6 <_malloc_usable_size_r>:
 80057a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057aa:	1f18      	subs	r0, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bfbc      	itt	lt
 80057b0:	580b      	ldrlt	r3, [r1, r0]
 80057b2:	18c0      	addlt	r0, r0, r3
 80057b4:	4770      	bx	lr
	...

080057b8 <_init>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	bf00      	nop
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr

080057c4 <_fini>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	bf00      	nop
 80057c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	469e      	mov	lr, r3
 80057ce:	4770      	bx	lr
